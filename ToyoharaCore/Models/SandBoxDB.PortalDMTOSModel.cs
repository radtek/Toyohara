//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 29.10.2018 9:10:23
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace ToyoharaCore
{

    public partial class PortalDMTOSModel : DbContext
    {

        public PortalDMTOSModel() :
            base()
        {
            OnCreated();
        }

        public PortalDMTOSModel(DbContextOptions<PortalDMTOSModel> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                if (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null))
                  optionsBuilder.UseSqlServer(@"Data Source=sql061;Initial Catalog=PortalDMTOS;Integrated Security=False;Persist Security Info=True;User ID=sendbox;Password=Sendbox01");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        #region Methods

        public List<SYS_AUTHORIZE_USER2Result> SYS_AUTHORIZE_USER2 (string login, System.Nullable<int> user_id, string browser, string server_name)
        {

            List<SYS_AUTHORIZE_USER2Result> result = new List<SYS_AUTHORIZE_USER2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_AUTHORIZE_USER2";

                    DbParameter loginParameter = cmd.CreateParameter();
                    loginParameter.ParameterName = "login";
                    loginParameter.Direction = ParameterDirection.Input;
                    loginParameter.DbType = DbType.String;
                    if (login != null)
                    {
                        loginParameter.Value = login;
                    }
                    else
                    {
                        loginParameter.Size = -1;
                        loginParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loginParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter browserParameter = cmd.CreateParameter();
                    browserParameter.ParameterName = "browser";
                    browserParameter.Direction = ParameterDirection.Input;
                    browserParameter.DbType = DbType.String;
                    if (browser != null)
                    {
                        browserParameter.Value = browser;
                    }
                    else
                    {
                        browserParameter.Size = -1;
                        browserParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(browserParameter);

                    DbParameter server_nameParameter = cmd.CreateParameter();
                    server_nameParameter.ParameterName = "server_name";
                    server_nameParameter.Direction = ParameterDirection.Input;
                    server_nameParameter.DbType = DbType.String;
                    server_nameParameter.Size = 510;
                    if (server_name != null)
                    {
                        server_nameParameter.Value = server_name;
                    }
                    else
                    {
                        server_nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(server_nameParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_AUTHORIZE_USER2Result row = new SYS_AUTHORIZE_USER2Result();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("short_description") && !reader.IsDBNull(reader.GetOrdinal("short_description")))
                                row.short_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"short_description")), typeof(string));
                            else
                                row.short_description = null;

                            if (fieldNames.Contains("login") && !reader.IsDBNull(reader.GetOrdinal("login")))
                                row.login = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"login")), typeof(string));
                            else
                                row.login = null;

                            if (fieldNames.Contains("1C_code") && !reader.IsDBNull(reader.GetOrdinal("1C_code")))
                                row.C_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"1C_code")), typeof(string));
                            else
                                row.C_code = null;

                            if (fieldNames.Contains("division_id") && !reader.IsDBNull(reader.GetOrdinal("division_id")))
                                row.division_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"division_id")), typeof(int));
                            else
                                row.division_id = null;

                            if (fieldNames.Contains("position") && !reader.IsDBNull(reader.GetOrdinal("position")))
                                row.position = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"position")), typeof(string));
                            else
                                row.position = null;

                            if (fieldNames.Contains("mail") && !reader.IsDBNull(reader.GetOrdinal("mail")))
                                row.mail = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mail")), typeof(string));
                            else
                                row.mail = null;

                            if (fieldNames.Contains("phone") && !reader.IsDBNull(reader.GetOrdinal("phone")))
                                row.phone = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phone")), typeof(string));
                            else
                                row.phone = null;

                            if (fieldNames.Contains("short_description_reverse") && !reader.IsDBNull(reader.GetOrdinal("short_description_reverse")))
                                row.short_description_reverse = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"short_description_reverse")), typeof(string));
                            else
                                row.short_description_reverse = null;

                            if (fieldNames.Contains("is_locked") && !reader.IsDBNull(reader.GetOrdinal("is_locked")))
                                row.is_locked = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_locked")), typeof(bool));

                            if (fieldNames.Contains("creation_date") && !reader.IsDBNull(reader.GetOrdinal("creation_date")))
                                row.creation_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"creation_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("modification_date") && !reader.IsDBNull(reader.GetOrdinal("modification_date")))
                                row.modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("not_in_SGM") && !reader.IsDBNull(reader.GetOrdinal("not_in_SGM")))
                                row.not_in_SGM = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"not_in_SGM")), typeof(bool));
                            else
                                row.not_in_SGM = null;

                            if (fieldNames.Contains("site_map") && !reader.IsDBNull(reader.GetOrdinal("site_map")))
                                row.site_map = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"site_map")), typeof(string));
                            else
                                row.site_map = null;

                            if (fieldNames.Contains("site_map_subcontractor") && !reader.IsDBNull(reader.GetOrdinal("site_map_subcontractor")))
                                row.site_map_subcontractor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"site_map_subcontractor")), typeof(string));

                            if (fieldNames.Contains("delegating_user_id") && !reader.IsDBNull(reader.GetOrdinal("delegating_user_id")))
                                row.delegating_user_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delegating_user_id")), typeof(int));

                            if (fieldNames.Contains("delegating_user_description") && !reader.IsDBNull(reader.GetOrdinal("delegating_user_description")))
                                row.delegating_user_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delegating_user_description")), typeof(string));
                            else
                                row.delegating_user_description = null;

                            if (fieldNames.Contains("is_administrator") && !reader.IsDBNull(reader.GetOrdinal("is_administrator")))
                                row.is_administrator = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_administrator")), typeof(int));

                            if (fieldNames.Contains("department_id") && !reader.IsDBNull(reader.GetOrdinal("department_id")))
                                row.department_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"department_id")), typeof(int));
                            else
                                row.department_id = null;

                            if (fieldNames.Contains("system_message") && !reader.IsDBNull(reader.GetOrdinal("system_message")))
                                row.system_message = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"system_message")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SYS_AUTHORIZE_USER2Result>> SYS_AUTHORIZE_USER2Async (string login, System.Nullable<int> user_id, string browser, string server_name)
        {

            List<SYS_AUTHORIZE_USER2Result> result = new List<SYS_AUTHORIZE_USER2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_AUTHORIZE_USER2";

                    DbParameter loginParameter = cmd.CreateParameter();
                    loginParameter.ParameterName = "login";
                    loginParameter.Direction = ParameterDirection.Input;
                    loginParameter.DbType = DbType.String;
                    if (login != null)
                    {
                        loginParameter.Value = login;
                    }
                    else
                    {
                        loginParameter.Size = -1;
                        loginParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loginParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter browserParameter = cmd.CreateParameter();
                    browserParameter.ParameterName = "browser";
                    browserParameter.Direction = ParameterDirection.Input;
                    browserParameter.DbType = DbType.String;
                    if (browser != null)
                    {
                        browserParameter.Value = browser;
                    }
                    else
                    {
                        browserParameter.Size = -1;
                        browserParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(browserParameter);

                    DbParameter server_nameParameter = cmd.CreateParameter();
                    server_nameParameter.ParameterName = "server_name";
                    server_nameParameter.Direction = ParameterDirection.Input;
                    server_nameParameter.DbType = DbType.String;
                    server_nameParameter.Size = 510;
                    if (server_name != null)
                    {
                        server_nameParameter.Value = server_name;
                    }
                    else
                    {
                        server_nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(server_nameParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_AUTHORIZE_USER2Result row = new SYS_AUTHORIZE_USER2Result();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("short_description") && !reader.IsDBNull(reader.GetOrdinal("short_description")))
                                row.short_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"short_description")), typeof(string));
                            else
                                row.short_description = null;

                            if (fieldNames.Contains("login") && !reader.IsDBNull(reader.GetOrdinal("login")))
                                row.login = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"login")), typeof(string));
                            else
                                row.login = null;

                            if (fieldNames.Contains("1C_code") && !reader.IsDBNull(reader.GetOrdinal("1C_code")))
                                row.C_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"1C_code")), typeof(string));
                            else
                                row.C_code = null;

                            if (fieldNames.Contains("division_id") && !reader.IsDBNull(reader.GetOrdinal("division_id")))
                                row.division_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"division_id")), typeof(int));
                            else
                                row.division_id = null;

                            if (fieldNames.Contains("position") && !reader.IsDBNull(reader.GetOrdinal("position")))
                                row.position = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"position")), typeof(string));
                            else
                                row.position = null;

                            if (fieldNames.Contains("mail") && !reader.IsDBNull(reader.GetOrdinal("mail")))
                                row.mail = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mail")), typeof(string));
                            else
                                row.mail = null;

                            if (fieldNames.Contains("phone") && !reader.IsDBNull(reader.GetOrdinal("phone")))
                                row.phone = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phone")), typeof(string));
                            else
                                row.phone = null;

                            if (fieldNames.Contains("short_description_reverse") && !reader.IsDBNull(reader.GetOrdinal("short_description_reverse")))
                                row.short_description_reverse = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"short_description_reverse")), typeof(string));
                            else
                                row.short_description_reverse = null;

                            if (fieldNames.Contains("is_locked") && !reader.IsDBNull(reader.GetOrdinal("is_locked")))
                                row.is_locked = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_locked")), typeof(bool));

                            if (fieldNames.Contains("creation_date") && !reader.IsDBNull(reader.GetOrdinal("creation_date")))
                                row.creation_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"creation_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("modification_date") && !reader.IsDBNull(reader.GetOrdinal("modification_date")))
                                row.modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("not_in_SGM") && !reader.IsDBNull(reader.GetOrdinal("not_in_SGM")))
                                row.not_in_SGM = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"not_in_SGM")), typeof(bool));
                            else
                                row.not_in_SGM = null;

                            if (fieldNames.Contains("site_map") && !reader.IsDBNull(reader.GetOrdinal("site_map")))
                                row.site_map = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"site_map")), typeof(string));
                            else
                                row.site_map = null;

                            if (fieldNames.Contains("site_map_subcontractor") && !reader.IsDBNull(reader.GetOrdinal("site_map_subcontractor")))
                                row.site_map_subcontractor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"site_map_subcontractor")), typeof(string));

                            if (fieldNames.Contains("delegating_user_id") && !reader.IsDBNull(reader.GetOrdinal("delegating_user_id")))
                                row.delegating_user_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delegating_user_id")), typeof(int));

                            if (fieldNames.Contains("delegating_user_description") && !reader.IsDBNull(reader.GetOrdinal("delegating_user_description")))
                                row.delegating_user_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delegating_user_description")), typeof(string));
                            else
                                row.delegating_user_description = null;

                            if (fieldNames.Contains("is_administrator") && !reader.IsDBNull(reader.GetOrdinal("is_administrator")))
                                row.is_administrator = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_administrator")), typeof(int));

                            if (fieldNames.Contains("department_id") && !reader.IsDBNull(reader.GetOrdinal("department_id")))
                                row.department_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"department_id")), typeof(int));
                            else
                                row.department_id = null;

                            if (fieldNames.Contains("system_message") && !reader.IsDBNull(reader.GetOrdinal("system_message")))
                                row.system_message = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"system_message")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECT_STATES_FOR_DDResult> APL_SELECT_PROJECT_STATES_FOR_DD ()
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_STATES_FOR_DD";
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_STATES_FOR_DDResult>> APL_SELECT_PROJECT_STATES_FOR_DDAsync ()
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_STATES_FOR_DD";
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<SYS_SELECT_MESSAGESResult> SYS_SELECT_MESSAGES (System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<SYS_SELECT_MESSAGESResult> result = new List<SYS_SELECT_MESSAGESResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_MESSAGES";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_MESSAGESResult row = new SYS_SELECT_MESSAGESResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SYS_SELECT_MESSAGESResult>> SYS_SELECT_MESSAGESAsync (System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<SYS_SELECT_MESSAGESResult> result = new List<SYS_SELECT_MESSAGESResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_MESSAGES";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_MESSAGESResult row = new SYS_SELECT_MESSAGESResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<SYS_SELECT_DELEGATING_USERSResult> SYS_SELECT_DELEGATING_USERS (System.Nullable<int> user_id, System.Nullable<int> delegating_user_id)
        {

            List<SYS_SELECT_DELEGATING_USERSResult> result = new List<SYS_SELECT_DELEGATING_USERSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_DELEGATING_USERS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter delegating_user_idParameter = cmd.CreateParameter();
                    delegating_user_idParameter.ParameterName = "delegating_user_id";
                    delegating_user_idParameter.Direction = ParameterDirection.Input;
                    delegating_user_idParameter.DbType = DbType.Int32;
                    delegating_user_idParameter.Precision = 10;
                    delegating_user_idParameter.Scale = 0;
                    if (delegating_user_id.HasValue)
                    {
                        delegating_user_idParameter.Value = delegating_user_id.Value;
                    }
                    else
                    {
                        delegating_user_idParameter.Size = -1;
                        delegating_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delegating_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_DELEGATING_USERSResult row = new SYS_SELECT_DELEGATING_USERSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("short_description") && !reader.IsDBNull(reader.GetOrdinal("short_description")))
                                row.short_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"short_description")), typeof(string));
                            else
                                row.short_description = null;

                            if (fieldNames.Contains("login") && !reader.IsDBNull(reader.GetOrdinal("login")))
                                row.login = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"login")), typeof(string));
                            else
                                row.login = null;

                            if (fieldNames.Contains("1C_code") && !reader.IsDBNull(reader.GetOrdinal("1C_code")))
                                row.C_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"1C_code")), typeof(string));
                            else
                                row.C_code = null;

                            if (fieldNames.Contains("division_id") && !reader.IsDBNull(reader.GetOrdinal("division_id")))
                                row.division_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"division_id")), typeof(int));
                            else
                                row.division_id = null;

                            if (fieldNames.Contains("position") && !reader.IsDBNull(reader.GetOrdinal("position")))
                                row.position = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"position")), typeof(string));
                            else
                                row.position = null;

                            if (fieldNames.Contains("mail") && !reader.IsDBNull(reader.GetOrdinal("mail")))
                                row.mail = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mail")), typeof(string));
                            else
                                row.mail = null;

                            if (fieldNames.Contains("phone") && !reader.IsDBNull(reader.GetOrdinal("phone")))
                                row.phone = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phone")), typeof(string));
                            else
                                row.phone = null;

                            if (fieldNames.Contains("short_description_reverse") && !reader.IsDBNull(reader.GetOrdinal("short_description_reverse")))
                                row.short_description_reverse = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"short_description_reverse")), typeof(string));
                            else
                                row.short_description_reverse = null;

                            if (fieldNames.Contains("is_locked") && !reader.IsDBNull(reader.GetOrdinal("is_locked")))
                                row.is_locked = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_locked")), typeof(bool));

                            if (fieldNames.Contains("creation_date") && !reader.IsDBNull(reader.GetOrdinal("creation_date")))
                                row.creation_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"creation_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("modification_date") && !reader.IsDBNull(reader.GetOrdinal("modification_date")))
                                row.modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("not_in_SGM") && !reader.IsDBNull(reader.GetOrdinal("not_in_SGM")))
                                row.not_in_SGM = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"not_in_SGM")), typeof(bool));
                            else
                                row.not_in_SGM = null;

                            if (fieldNames.Contains("type") && !reader.IsDBNull(reader.GetOrdinal("type")))
                                row.type = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"type")), typeof(int));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SYS_SELECT_DELEGATING_USERSResult>> SYS_SELECT_DELEGATING_USERSAsync (System.Nullable<int> user_id, System.Nullable<int> delegating_user_id)
        {

            List<SYS_SELECT_DELEGATING_USERSResult> result = new List<SYS_SELECT_DELEGATING_USERSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_DELEGATING_USERS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter delegating_user_idParameter = cmd.CreateParameter();
                    delegating_user_idParameter.ParameterName = "delegating_user_id";
                    delegating_user_idParameter.Direction = ParameterDirection.Input;
                    delegating_user_idParameter.DbType = DbType.Int32;
                    delegating_user_idParameter.Precision = 10;
                    delegating_user_idParameter.Scale = 0;
                    if (delegating_user_id.HasValue)
                    {
                        delegating_user_idParameter.Value = delegating_user_id.Value;
                    }
                    else
                    {
                        delegating_user_idParameter.Size = -1;
                        delegating_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delegating_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_DELEGATING_USERSResult row = new SYS_SELECT_DELEGATING_USERSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("short_description") && !reader.IsDBNull(reader.GetOrdinal("short_description")))
                                row.short_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"short_description")), typeof(string));
                            else
                                row.short_description = null;

                            if (fieldNames.Contains("login") && !reader.IsDBNull(reader.GetOrdinal("login")))
                                row.login = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"login")), typeof(string));
                            else
                                row.login = null;

                            if (fieldNames.Contains("1C_code") && !reader.IsDBNull(reader.GetOrdinal("1C_code")))
                                row.C_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"1C_code")), typeof(string));
                            else
                                row.C_code = null;

                            if (fieldNames.Contains("division_id") && !reader.IsDBNull(reader.GetOrdinal("division_id")))
                                row.division_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"division_id")), typeof(int));
                            else
                                row.division_id = null;

                            if (fieldNames.Contains("position") && !reader.IsDBNull(reader.GetOrdinal("position")))
                                row.position = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"position")), typeof(string));
                            else
                                row.position = null;

                            if (fieldNames.Contains("mail") && !reader.IsDBNull(reader.GetOrdinal("mail")))
                                row.mail = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mail")), typeof(string));
                            else
                                row.mail = null;

                            if (fieldNames.Contains("phone") && !reader.IsDBNull(reader.GetOrdinal("phone")))
                                row.phone = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phone")), typeof(string));
                            else
                                row.phone = null;

                            if (fieldNames.Contains("short_description_reverse") && !reader.IsDBNull(reader.GetOrdinal("short_description_reverse")))
                                row.short_description_reverse = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"short_description_reverse")), typeof(string));
                            else
                                row.short_description_reverse = null;

                            if (fieldNames.Contains("is_locked") && !reader.IsDBNull(reader.GetOrdinal("is_locked")))
                                row.is_locked = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_locked")), typeof(bool));

                            if (fieldNames.Contains("creation_date") && !reader.IsDBNull(reader.GetOrdinal("creation_date")))
                                row.creation_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"creation_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("modification_date") && !reader.IsDBNull(reader.GetOrdinal("modification_date")))
                                row.modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("not_in_SGM") && !reader.IsDBNull(reader.GetOrdinal("not_in_SGM")))
                                row.not_in_SGM = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"not_in_SGM")), typeof(bool));
                            else
                                row.not_in_SGM = null;

                            if (fieldNames.Contains("type") && !reader.IsDBNull(reader.GetOrdinal("type")))
                                row.type = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"type")), typeof(int));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECT_STATES_FOR_DDResult> PRC_SELECT_ORDER_ITEMS_GKI_STATES_FOR_DD ()
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.PRC_SELECT_ORDER_ITEMS_GKI_STATES_FOR_DD";
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_STATES_FOR_DDResult>> PRC_SELECT_ORDER_ITEMS_GKI_STATES_FOR_DDAsync ()
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.PRC_SELECT_ORDER_ITEMS_GKI_STATES_FOR_DD";
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public void PRC_UPDATE_ORDER_ITEM_GKI (System.Nullable<int> id, string gki_code, System.Nullable<int> gki_state_id, string gki_order_number, string note, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.PRC_UPDATE_ORDER_ITEM_GKI";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter gki_codeParameter = cmd.CreateParameter();
                    gki_codeParameter.ParameterName = "gki_code";
                    gki_codeParameter.Direction = ParameterDirection.Input;
                    gki_codeParameter.DbType = DbType.String;
                    if (gki_code != null)
                    {
                        gki_codeParameter.Value = gki_code;
                    }
                    else
                    {
                        gki_codeParameter.Size = -1;
                        gki_codeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(gki_codeParameter);

                    DbParameter gki_state_idParameter = cmd.CreateParameter();
                    gki_state_idParameter.ParameterName = "gki_state_id";
                    gki_state_idParameter.Direction = ParameterDirection.Input;
                    gki_state_idParameter.DbType = DbType.Int32;
                    gki_state_idParameter.Precision = 10;
                    gki_state_idParameter.Scale = 0;
                    if (gki_state_id.HasValue)
                    {
                        gki_state_idParameter.Value = gki_state_id.Value;
                    }
                    else
                    {
                        gki_state_idParameter.Size = -1;
                        gki_state_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(gki_state_idParameter);

                    DbParameter gki_order_numberParameter = cmd.CreateParameter();
                    gki_order_numberParameter.ParameterName = "gki_order_number";
                    gki_order_numberParameter.Direction = ParameterDirection.Input;
                    gki_order_numberParameter.DbType = DbType.String;
                    if (gki_order_number != null)
                    {
                        gki_order_numberParameter.Value = gki_order_number;
                    }
                    else
                    {
                        gki_order_numberParameter.Size = -1;
                        gki_order_numberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(gki_order_numberParameter);

                    DbParameter noteParameter = cmd.CreateParameter();
                    noteParameter.ParameterName = "note";
                    noteParameter.Direction = ParameterDirection.Input;
                    noteParameter.DbType = DbType.String;
                    if (note != null)
                    {
                        noteParameter.Value = note;
                    }
                    else
                    {
                        noteParameter.Size = -1;
                        noteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(noteParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task PRC_UPDATE_ORDER_ITEM_GKIAsync (System.Nullable<int> id, string gki_code, System.Nullable<int> gki_state_id, string gki_order_number, string note, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.PRC_UPDATE_ORDER_ITEM_GKI";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter gki_codeParameter = cmd.CreateParameter();
                    gki_codeParameter.ParameterName = "gki_code";
                    gki_codeParameter.Direction = ParameterDirection.Input;
                    gki_codeParameter.DbType = DbType.String;
                    if (gki_code != null)
                    {
                        gki_codeParameter.Value = gki_code;
                    }
                    else
                    {
                        gki_codeParameter.Size = -1;
                        gki_codeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(gki_codeParameter);

                    DbParameter gki_state_idParameter = cmd.CreateParameter();
                    gki_state_idParameter.ParameterName = "gki_state_id";
                    gki_state_idParameter.Direction = ParameterDirection.Input;
                    gki_state_idParameter.DbType = DbType.Int32;
                    gki_state_idParameter.Precision = 10;
                    gki_state_idParameter.Scale = 0;
                    if (gki_state_id.HasValue)
                    {
                        gki_state_idParameter.Value = gki_state_id.Value;
                    }
                    else
                    {
                        gki_state_idParameter.Size = -1;
                        gki_state_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(gki_state_idParameter);

                    DbParameter gki_order_numberParameter = cmd.CreateParameter();
                    gki_order_numberParameter.ParameterName = "gki_order_number";
                    gki_order_numberParameter.Direction = ParameterDirection.Input;
                    gki_order_numberParameter.DbType = DbType.String;
                    if (gki_order_number != null)
                    {
                        gki_order_numberParameter.Value = gki_order_number;
                    }
                    else
                    {
                        gki_order_numberParameter.Size = -1;
                        gki_order_numberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(gki_order_numberParameter);

                    DbParameter noteParameter = cmd.CreateParameter();
                    noteParameter.ParameterName = "note";
                    noteParameter.Direction = ParameterDirection.Input;
                    noteParameter.DbType = DbType.String;
                    if (note != null)
                    {
                        noteParameter.Value = note;
                    }
                    else
                    {
                        noteParameter.Size = -1;
                        noteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(noteParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public List<PRC_SELECT_ORDER_ITEMS_GKI_with_pagingResult> PRC_SELECT_ORDER_ITEMS_GKI_with_paging (ref System.Nullable<int> page, System.Nullable<int> page_size, string sort_member, string selected_records, string filter, System.Nullable<bool> show_classified, System.Nullable<bool> only_new, System.Nullable<int> user_id)
        {

            List<PRC_SELECT_ORDER_ITEMS_GKI_with_pagingResult> result = new List<PRC_SELECT_ORDER_ITEMS_GKI_with_pagingResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.PRC_SELECT_ORDER_ITEMS_GKI_with_paging";

                    DbParameter pageParameter = cmd.CreateParameter();
                    pageParameter.ParameterName = "page";
                    pageParameter.Direction = ParameterDirection.InputOutput;
                    pageParameter.DbType = DbType.Int32;
                    pageParameter.Precision = 10;
                    pageParameter.Scale = 0;
                    if (page.HasValue)
                    {
                        pageParameter.Value = page.Value;
                    }
                    else
                    {
                        pageParameter.Size = -1;
                        pageParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(pageParameter);

                    DbParameter page_sizeParameter = cmd.CreateParameter();
                    page_sizeParameter.ParameterName = "page_size";
                    page_sizeParameter.Direction = ParameterDirection.Input;
                    page_sizeParameter.DbType = DbType.Int32;
                    page_sizeParameter.Precision = 10;
                    page_sizeParameter.Scale = 0;
                    if (page_size.HasValue)
                    {
                        page_sizeParameter.Value = page_size.Value;
                    }
                    else
                    {
                        page_sizeParameter.Size = -1;
                        page_sizeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(page_sizeParameter);

                    DbParameter sort_memberParameter = cmd.CreateParameter();
                    sort_memberParameter.ParameterName = "sort_member";
                    sort_memberParameter.Direction = ParameterDirection.Input;
                    sort_memberParameter.DbType = DbType.String;
                    sort_memberParameter.Size = 510;
                    if (sort_member != null)
                    {
                        sort_memberParameter.Value = sort_member;
                    }
                    else
                    {
                        sort_memberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(sort_memberParameter);

                    DbParameter selected_recordsParameter = cmd.CreateParameter();
                    selected_recordsParameter.ParameterName = "selected_records";
                    selected_recordsParameter.Direction = ParameterDirection.Input;
                    selected_recordsParameter.DbType = DbType.String;
                    selected_recordsParameter.Size = 510;
                    if (selected_records != null)
                    {
                        selected_recordsParameter.Value = selected_records;
                    }
                    else
                    {
                        selected_recordsParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(selected_recordsParameter);

                    DbParameter filterParameter = cmd.CreateParameter();
                    filterParameter.ParameterName = "filter";
                    filterParameter.Direction = ParameterDirection.Input;
                    filterParameter.DbType = DbType.String;
                    if (filter != null)
                    {
                        filterParameter.Value = filter;
                    }
                    else
                    {
                        filterParameter.Size = -1;
                        filterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(filterParameter);

                    DbParameter show_classifiedParameter = cmd.CreateParameter();
                    show_classifiedParameter.ParameterName = "show_classified";
                    show_classifiedParameter.Direction = ParameterDirection.Input;
                    show_classifiedParameter.DbType = DbType.Boolean;
                    if (show_classified.HasValue)
                    {
                        show_classifiedParameter.Value = show_classified.Value;
                    }
                    else
                    {
                        show_classifiedParameter.Size = -1;
                        show_classifiedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_classifiedParameter);

                    DbParameter only_newParameter = cmd.CreateParameter();
                    only_newParameter.ParameterName = "only_new";
                    only_newParameter.Direction = ParameterDirection.Input;
                    only_newParameter.DbType = DbType.Boolean;
                    if (only_new.HasValue)
                    {
                        only_newParameter.Value = only_new.Value;
                    }
                    else
                    {
                        only_newParameter.Size = -1;
                        only_newParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(only_newParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PRC_SELECT_ORDER_ITEMS_GKI_with_pagingResult row = new PRC_SELECT_ORDER_ITEMS_GKI_with_pagingResult();
                            if (fieldNames.Contains("row_count") && !reader.IsDBNull(reader.GetOrdinal("row_count")))
                                row.row_count = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"row_count")), typeof(int));
                            else
                                row.row_count = null;

                            if (fieldNames.Contains("rank") && !reader.IsDBNull(reader.GetOrdinal("rank")))
                                row.rank = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"rank")), typeof(long));
                            else
                                row.rank = null;

                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("item_description") && !reader.IsDBNull(reader.GetOrdinal("item_description")))
                                row.item_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_description")), typeof(string));
                            else
                                row.item_description = null;

                            if (fieldNames.Contains("item_additional_properties") && !reader.IsDBNull(reader.GetOrdinal("item_additional_properties")))
                                row.item_additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_additional_properties")), typeof(string));
                            else
                                row.item_additional_properties = null;

                            if (fieldNames.Contains("order_code") && !reader.IsDBNull(reader.GetOrdinal("order_code")))
                                row.order_code = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_code")), typeof(int));

                            if (fieldNames.Contains("order_number") && !reader.IsDBNull(reader.GetOrdinal("order_number")))
                                row.order_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_number")), typeof(string));
                            else
                                row.order_number = null;

                            if (fieldNames.Contains("supply_manager") && !reader.IsDBNull(reader.GetOrdinal("supply_manager")))
                                row.supply_manager = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_manager")), typeof(string));
                            else
                                row.supply_manager = null;

                            if (fieldNames.Contains("order_item_note") && !reader.IsDBNull(reader.GetOrdinal("order_item_note")))
                                row.order_item_note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_item_note")), typeof(string));

                            if (fieldNames.Contains("order_item_modification_date") && !reader.IsDBNull(reader.GetOrdinal("order_item_modification_date")))
                                row.order_item_modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_item_modification_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("gki_code") && !reader.IsDBNull(reader.GetOrdinal("gki_code")))
                                row.gki_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_code")), typeof(string));
                            else
                                row.gki_code = null;

                            if (fieldNames.Contains("gki_code_date") && !reader.IsDBNull(reader.GetOrdinal("gki_code_date")))
                                row.gki_code_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_code_date")), typeof(System.DateTime));
                            else
                                row.gki_code_date = null;

                            if (fieldNames.Contains("gki_order_number") && !reader.IsDBNull(reader.GetOrdinal("gki_order_number")))
                                row.gki_order_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_order_number")), typeof(string));
                            else
                                row.gki_order_number = null;

                            if (fieldNames.Contains("gki_order_date") && !reader.IsDBNull(reader.GetOrdinal("gki_order_date")))
                                row.gki_order_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_order_date")), typeof(System.DateTime));
                            else
                                row.gki_order_date = null;

                            if (fieldNames.Contains("gki_state_id") && !reader.IsDBNull(reader.GetOrdinal("gki_state_id")))
                                row.gki_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state_id")), typeof(int));
                            else
                                row.gki_state_id = null;

                            if (fieldNames.Contains("gki_state") && !reader.IsDBNull(reader.GetOrdinal("gki_state")))
                                row.gki_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state")), typeof(string));
                            else
                                row.gki_state = null;

                            if (fieldNames.Contains("gki_state_date") && !reader.IsDBNull(reader.GetOrdinal("gki_state_date")))
                                row.gki_state_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state_date")), typeof(System.DateTime));
                            else
                                row.gki_state_date = null;

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal("note")))
                                row.note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.note = null;

                            if (fieldNames.Contains("gki_user") && !reader.IsDBNull(reader.GetOrdinal("gki_user")))
                                row.gki_user = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_user")), typeof(string));
                            else
                                row.gki_user = null;

                            if (fieldNames.Contains("color") && !reader.IsDBNull(reader.GetOrdinal("color")))
                                row.color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color")), typeof(string));
                            else
                                row.color = null;

                            if (fieldNames.Contains("checked") && !reader.IsDBNull(reader.GetOrdinal("checked")))
                                row.@checked = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"checked")), typeof(string));

                            result.Add(row);
                        }
                    }

                    if (cmd.Parameters["page"].Value != null && !(cmd.Parameters["page"].Value is System.DBNull))
                        page = (int)Convert.ChangeType(cmd.Parameters["page"].Value, typeof(int));
                    else
                        page = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<Tuple<System.Nullable<int>, List<PRC_SELECT_ORDER_ITEMS_GKI_with_pagingResult>>> PRC_SELECT_ORDER_ITEMS_GKI_with_pagingAsync (System.Nullable<int> page, System.Nullable<int> page_size, string sort_member, string selected_records, string filter, System.Nullable<bool> show_classified, System.Nullable<bool> only_new, System.Nullable<int> user_id)
        {

            List<PRC_SELECT_ORDER_ITEMS_GKI_with_pagingResult> result = new List<PRC_SELECT_ORDER_ITEMS_GKI_with_pagingResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.PRC_SELECT_ORDER_ITEMS_GKI_with_paging";

                    DbParameter pageParameter = cmd.CreateParameter();
                    pageParameter.ParameterName = "page";
                    pageParameter.Direction = ParameterDirection.InputOutput;
                    pageParameter.DbType = DbType.Int32;
                    pageParameter.Precision = 10;
                    pageParameter.Scale = 0;
                    if (page.HasValue)
                    {
                        pageParameter.Value = page.Value;
                    }
                    else
                    {
                        pageParameter.Size = -1;
                        pageParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(pageParameter);

                    DbParameter page_sizeParameter = cmd.CreateParameter();
                    page_sizeParameter.ParameterName = "page_size";
                    page_sizeParameter.Direction = ParameterDirection.Input;
                    page_sizeParameter.DbType = DbType.Int32;
                    page_sizeParameter.Precision = 10;
                    page_sizeParameter.Scale = 0;
                    if (page_size.HasValue)
                    {
                        page_sizeParameter.Value = page_size.Value;
                    }
                    else
                    {
                        page_sizeParameter.Size = -1;
                        page_sizeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(page_sizeParameter);

                    DbParameter sort_memberParameter = cmd.CreateParameter();
                    sort_memberParameter.ParameterName = "sort_member";
                    sort_memberParameter.Direction = ParameterDirection.Input;
                    sort_memberParameter.DbType = DbType.String;
                    sort_memberParameter.Size = 510;
                    if (sort_member != null)
                    {
                        sort_memberParameter.Value = sort_member;
                    }
                    else
                    {
                        sort_memberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(sort_memberParameter);

                    DbParameter selected_recordsParameter = cmd.CreateParameter();
                    selected_recordsParameter.ParameterName = "selected_records";
                    selected_recordsParameter.Direction = ParameterDirection.Input;
                    selected_recordsParameter.DbType = DbType.String;
                    selected_recordsParameter.Size = 510;
                    if (selected_records != null)
                    {
                        selected_recordsParameter.Value = selected_records;
                    }
                    else
                    {
                        selected_recordsParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(selected_recordsParameter);

                    DbParameter filterParameter = cmd.CreateParameter();
                    filterParameter.ParameterName = "filter";
                    filterParameter.Direction = ParameterDirection.Input;
                    filterParameter.DbType = DbType.String;
                    if (filter != null)
                    {
                        filterParameter.Value = filter;
                    }
                    else
                    {
                        filterParameter.Size = -1;
                        filterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(filterParameter);

                    DbParameter show_classifiedParameter = cmd.CreateParameter();
                    show_classifiedParameter.ParameterName = "show_classified";
                    show_classifiedParameter.Direction = ParameterDirection.Input;
                    show_classifiedParameter.DbType = DbType.Boolean;
                    if (show_classified.HasValue)
                    {
                        show_classifiedParameter.Value = show_classified.Value;
                    }
                    else
                    {
                        show_classifiedParameter.Size = -1;
                        show_classifiedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_classifiedParameter);

                    DbParameter only_newParameter = cmd.CreateParameter();
                    only_newParameter.ParameterName = "only_new";
                    only_newParameter.Direction = ParameterDirection.Input;
                    only_newParameter.DbType = DbType.Boolean;
                    if (only_new.HasValue)
                    {
                        only_newParameter.Value = only_new.Value;
                    }
                    else
                    {
                        only_newParameter.Size = -1;
                        only_newParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(only_newParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PRC_SELECT_ORDER_ITEMS_GKI_with_pagingResult row = new PRC_SELECT_ORDER_ITEMS_GKI_with_pagingResult();
                            if (fieldNames.Contains("row_count") && !reader.IsDBNull(reader.GetOrdinal("row_count")))
                                row.row_count = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"row_count")), typeof(int));
                            else
                                row.row_count = null;

                            if (fieldNames.Contains("rank") && !reader.IsDBNull(reader.GetOrdinal("rank")))
                                row.rank = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"rank")), typeof(long));
                            else
                                row.rank = null;

                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("item_description") && !reader.IsDBNull(reader.GetOrdinal("item_description")))
                                row.item_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_description")), typeof(string));
                            else
                                row.item_description = null;

                            if (fieldNames.Contains("item_additional_properties") && !reader.IsDBNull(reader.GetOrdinal("item_additional_properties")))
                                row.item_additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_additional_properties")), typeof(string));
                            else
                                row.item_additional_properties = null;

                            if (fieldNames.Contains("order_code") && !reader.IsDBNull(reader.GetOrdinal("order_code")))
                                row.order_code = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_code")), typeof(int));

                            if (fieldNames.Contains("order_number") && !reader.IsDBNull(reader.GetOrdinal("order_number")))
                                row.order_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_number")), typeof(string));
                            else
                                row.order_number = null;

                            if (fieldNames.Contains("supply_manager") && !reader.IsDBNull(reader.GetOrdinal("supply_manager")))
                                row.supply_manager = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_manager")), typeof(string));
                            else
                                row.supply_manager = null;

                            if (fieldNames.Contains("order_item_note") && !reader.IsDBNull(reader.GetOrdinal("order_item_note")))
                                row.order_item_note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_item_note")), typeof(string));

                            if (fieldNames.Contains("order_item_modification_date") && !reader.IsDBNull(reader.GetOrdinal("order_item_modification_date")))
                                row.order_item_modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_item_modification_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("gki_code") && !reader.IsDBNull(reader.GetOrdinal("gki_code")))
                                row.gki_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_code")), typeof(string));
                            else
                                row.gki_code = null;

                            if (fieldNames.Contains("gki_code_date") && !reader.IsDBNull(reader.GetOrdinal("gki_code_date")))
                                row.gki_code_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_code_date")), typeof(System.DateTime));
                            else
                                row.gki_code_date = null;

                            if (fieldNames.Contains("gki_order_number") && !reader.IsDBNull(reader.GetOrdinal("gki_order_number")))
                                row.gki_order_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_order_number")), typeof(string));
                            else
                                row.gki_order_number = null;

                            if (fieldNames.Contains("gki_order_date") && !reader.IsDBNull(reader.GetOrdinal("gki_order_date")))
                                row.gki_order_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_order_date")), typeof(System.DateTime));
                            else
                                row.gki_order_date = null;

                            if (fieldNames.Contains("gki_state_id") && !reader.IsDBNull(reader.GetOrdinal("gki_state_id")))
                                row.gki_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state_id")), typeof(int));
                            else
                                row.gki_state_id = null;

                            if (fieldNames.Contains("gki_state") && !reader.IsDBNull(reader.GetOrdinal("gki_state")))
                                row.gki_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state")), typeof(string));
                            else
                                row.gki_state = null;

                            if (fieldNames.Contains("gki_state_date") && !reader.IsDBNull(reader.GetOrdinal("gki_state_date")))
                                row.gki_state_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state_date")), typeof(System.DateTime));
                            else
                                row.gki_state_date = null;

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal("note")))
                                row.note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.note = null;

                            if (fieldNames.Contains("gki_user") && !reader.IsDBNull(reader.GetOrdinal("gki_user")))
                                row.gki_user = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_user")), typeof(string));
                            else
                                row.gki_user = null;

                            if (fieldNames.Contains("color") && !reader.IsDBNull(reader.GetOrdinal("color")))
                                row.color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color")), typeof(string));
                            else
                                row.color = null;

                            if (fieldNames.Contains("checked") && !reader.IsDBNull(reader.GetOrdinal("checked")))
                                row.@checked = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"checked")), typeof(string));

                            result.Add(row);
                        }
                    }

                    if (cmd.Parameters["page"].Value != null && !(cmd.Parameters["page"].Value is System.DBNull))
                        page = (int)Convert.ChangeType(cmd.Parameters["page"].Value, typeof(int));
                    else
                        page = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<System.Nullable<int>, List<PRC_SELECT_ORDER_ITEMS_GKI_with_pagingResult>>(page, result);
        }

        public List<SYS_SELECT_DELEGATING_USERResult> SYS_SELECT_DELEGATING_USER (System.Nullable<int> user_id, System.Nullable<int> delegating_user_id)
        {

            List<SYS_SELECT_DELEGATING_USERResult> result = new List<SYS_SELECT_DELEGATING_USERResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_DELEGATING_USER";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter delegating_user_idParameter = cmd.CreateParameter();
                    delegating_user_idParameter.ParameterName = "delegating_user_id";
                    delegating_user_idParameter.Direction = ParameterDirection.Input;
                    delegating_user_idParameter.DbType = DbType.Int32;
                    delegating_user_idParameter.Precision = 10;
                    delegating_user_idParameter.Scale = 0;
                    if (delegating_user_id.HasValue)
                    {
                        delegating_user_idParameter.Value = delegating_user_id.Value;
                    }
                    else
                    {
                        delegating_user_idParameter.Size = -1;
                        delegating_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delegating_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_DELEGATING_USERResult row = new SYS_SELECT_DELEGATING_USERResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("login") && !reader.IsDBNull(reader.GetOrdinal("login")))
                                row.login = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"login")), typeof(string));
                            else
                                row.login = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SYS_SELECT_DELEGATING_USERResult>> SYS_SELECT_DELEGATING_USERAsync (System.Nullable<int> user_id, System.Nullable<int> delegating_user_id)
        {

            List<SYS_SELECT_DELEGATING_USERResult> result = new List<SYS_SELECT_DELEGATING_USERResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_DELEGATING_USER";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter delegating_user_idParameter = cmd.CreateParameter();
                    delegating_user_idParameter.ParameterName = "delegating_user_id";
                    delegating_user_idParameter.Direction = ParameterDirection.Input;
                    delegating_user_idParameter.DbType = DbType.Int32;
                    delegating_user_idParameter.Precision = 10;
                    delegating_user_idParameter.Scale = 0;
                    if (delegating_user_id.HasValue)
                    {
                        delegating_user_idParameter.Value = delegating_user_id.Value;
                    }
                    else
                    {
                        delegating_user_idParameter.Size = -1;
                        delegating_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delegating_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_DELEGATING_USERResult row = new SYS_SELECT_DELEGATING_USERResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("login") && !reader.IsDBNull(reader.GetOrdinal("login")))
                                row.login = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"login")), typeof(string));
                            else
                                row.login = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<SYS_SELECT_ROLES_BY_USERResult> SYS_SELECT_ROLES_BY_USER (System.Nullable<int> user_id)
        {

            List<SYS_SELECT_ROLES_BY_USERResult> result = new List<SYS_SELECT_ROLES_BY_USERResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_ROLES_BY_USER";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_ROLES_BY_USERResult row = new SYS_SELECT_ROLES_BY_USERResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.role_id = (int)Convert.ChangeType(reader.GetValue(0), typeof(int));
                            else
                            if (fieldNames.Contains("role_id") && !reader.IsDBNull(reader.GetOrdinal("role_id")))
                                row.role_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"role_id")), typeof(int));
                            else
                                row.role_id = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SYS_SELECT_ROLES_BY_USERResult>> SYS_SELECT_ROLES_BY_USERAsync (System.Nullable<int> user_id)
        {

            List<SYS_SELECT_ROLES_BY_USERResult> result = new List<SYS_SELECT_ROLES_BY_USERResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_ROLES_BY_USER";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_ROLES_BY_USERResult row = new SYS_SELECT_ROLES_BY_USERResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.role_id = (int)Convert.ChangeType(reader.GetValue(0), typeof(int));
                            else
                            if (fieldNames.Contains("role_id") && !reader.IsDBNull(reader.GetOrdinal("role_id")))
                                row.role_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"role_id")), typeof(int));
                            else
                                row.role_id = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECT_STATES_FOR_DDResult> SYS_SELECT_ROLES_FOR_DD (System.Nullable<int> user_id)
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_ROLES_FOR_DD";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_STATES_FOR_DDResult>> SYS_SELECT_ROLES_FOR_DDAsync (System.Nullable<int> user_id)
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_ROLES_FOR_DD";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECT_STATES_FOR_DDResult> SYS_SELECT_DELEGATING_USERS2 (System.Nullable<int> user_id)
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_DELEGATING_USERS2";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_STATES_FOR_DDResult>> SYS_SELECT_DELEGATING_USERS2Async (System.Nullable<int> user_id)
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_DELEGATING_USERS2";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<SYS_AUTHORIZE_USERResult> SYS_AUTHORIZE_USER (string login, string server_name, string browser)
        {

            List<SYS_AUTHORIZE_USERResult> result = new List<SYS_AUTHORIZE_USERResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_AUTHORIZE_USER";

                    DbParameter loginParameter = cmd.CreateParameter();
                    loginParameter.ParameterName = "login";
                    loginParameter.Direction = ParameterDirection.Input;
                    loginParameter.DbType = DbType.String;
                    if (login != null)
                    {
                        loginParameter.Value = login;
                    }
                    else
                    {
                        loginParameter.Size = -1;
                        loginParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loginParameter);

                    DbParameter server_nameParameter = cmd.CreateParameter();
                    server_nameParameter.ParameterName = "server_name";
                    server_nameParameter.Direction = ParameterDirection.Input;
                    server_nameParameter.DbType = DbType.String;
                    if (server_name != null)
                    {
                        server_nameParameter.Value = server_name;
                    }
                    else
                    {
                        server_nameParameter.Size = -1;
                        server_nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(server_nameParameter);

                    DbParameter browserParameter = cmd.CreateParameter();
                    browserParameter.ParameterName = "browser";
                    browserParameter.Direction = ParameterDirection.Input;
                    browserParameter.DbType = DbType.String;
                    if (browser != null)
                    {
                        browserParameter.Value = browser;
                    }
                    else
                    {
                        browserParameter.Size = -1;
                        browserParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(browserParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_AUTHORIZE_USERResult row = new SYS_AUTHORIZE_USERResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("not_in_SGM") && !reader.IsDBNull(reader.GetOrdinal("not_in_SGM")))
                                row.not_in_SGM = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"not_in_SGM")), typeof(bool));
                            else
                                row.not_in_SGM = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SYS_AUTHORIZE_USERResult>> SYS_AUTHORIZE_USERAsync (string login, string server_name, string browser)
        {

            List<SYS_AUTHORIZE_USERResult> result = new List<SYS_AUTHORIZE_USERResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_AUTHORIZE_USER";

                    DbParameter loginParameter = cmd.CreateParameter();
                    loginParameter.ParameterName = "login";
                    loginParameter.Direction = ParameterDirection.Input;
                    loginParameter.DbType = DbType.String;
                    if (login != null)
                    {
                        loginParameter.Value = login;
                    }
                    else
                    {
                        loginParameter.Size = -1;
                        loginParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loginParameter);

                    DbParameter server_nameParameter = cmd.CreateParameter();
                    server_nameParameter.ParameterName = "server_name";
                    server_nameParameter.Direction = ParameterDirection.Input;
                    server_nameParameter.DbType = DbType.String;
                    if (server_name != null)
                    {
                        server_nameParameter.Value = server_name;
                    }
                    else
                    {
                        server_nameParameter.Size = -1;
                        server_nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(server_nameParameter);

                    DbParameter browserParameter = cmd.CreateParameter();
                    browserParameter.ParameterName = "browser";
                    browserParameter.Direction = ParameterDirection.Input;
                    browserParameter.DbType = DbType.String;
                    if (browser != null)
                    {
                        browserParameter.Value = browser;
                    }
                    else
                    {
                        browserParameter.Size = -1;
                        browserParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(browserParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_AUTHORIZE_USERResult row = new SYS_AUTHORIZE_USERResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("not_in_SGM") && !reader.IsDBNull(reader.GetOrdinal("not_in_SGM")))
                                row.not_in_SGM = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"not_in_SGM")), typeof(bool));
                            else
                                row.not_in_SGM = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public void UI_DELETE_LINK_PAGE (System.Nullable<int> id, System.Nullable<int> user_id)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_DELETE_LINK_PAGE";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task UI_DELETE_LINK_PAGEAsync (System.Nullable<int> id, System.Nullable<int> user_id)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_DELETE_LINK_PAGE";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public List<UI_SELECT_LINK_ACTIONSResult> UI_SELECT_LINK_ACTIONS (System.Nullable<int> link_id)
        {

            List<UI_SELECT_LINK_ACTIONSResult> result = new List<UI_SELECT_LINK_ACTIONSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_ACTIONS";

                    DbParameter link_idParameter = cmd.CreateParameter();
                    link_idParameter.ParameterName = "link_id";
                    link_idParameter.Direction = ParameterDirection.Input;
                    link_idParameter.DbType = DbType.Int32;
                    link_idParameter.Precision = 10;
                    link_idParameter.Scale = 0;
                    if (link_id.HasValue)
                    {
                        link_idParameter.Value = link_id.Value;
                    }
                    else
                    {
                        link_idParameter.Size = -1;
                        link_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(link_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINK_ACTIONSResult row = new UI_SELECT_LINK_ACTIONSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("action_code") && !reader.IsDBNull(reader.GetOrdinal("action_code")))
                                row.action_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_code")), typeof(string));

                            if (fieldNames.Contains("action_description") && !reader.IsDBNull(reader.GetOrdinal("action_description")))
                                row.action_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_description")), typeof(string));
                            else
                                row.action_description = null;

                            if (fieldNames.Contains("comment") && !reader.IsDBNull(reader.GetOrdinal("comment")))
                                row.comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comment")), typeof(string));
                            else
                                row.comment = null;

                            if (fieldNames.Contains("stored_procedure") && !reader.IsDBNull(reader.GetOrdinal("stored_procedure")))
                                row.stored_procedure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stored_procedure")), typeof(string));

                            if (fieldNames.Contains("redirect") && !reader.IsDBNull(reader.GetOrdinal("redirect")))
                                row.redirect = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"redirect")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_SELECT_LINK_ACTIONSResult>> UI_SELECT_LINK_ACTIONSAsync (System.Nullable<int> link_id)
        {

            List<UI_SELECT_LINK_ACTIONSResult> result = new List<UI_SELECT_LINK_ACTIONSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_ACTIONS";

                    DbParameter link_idParameter = cmd.CreateParameter();
                    link_idParameter.ParameterName = "link_id";
                    link_idParameter.Direction = ParameterDirection.Input;
                    link_idParameter.DbType = DbType.Int32;
                    link_idParameter.Precision = 10;
                    link_idParameter.Scale = 0;
                    if (link_id.HasValue)
                    {
                        link_idParameter.Value = link_id.Value;
                    }
                    else
                    {
                        link_idParameter.Size = -1;
                        link_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(link_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINK_ACTIONSResult row = new UI_SELECT_LINK_ACTIONSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("action_code") && !reader.IsDBNull(reader.GetOrdinal("action_code")))
                                row.action_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_code")), typeof(string));

                            if (fieldNames.Contains("action_description") && !reader.IsDBNull(reader.GetOrdinal("action_description")))
                                row.action_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_description")), typeof(string));
                            else
                                row.action_description = null;

                            if (fieldNames.Contains("comment") && !reader.IsDBNull(reader.GetOrdinal("comment")))
                                row.comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comment")), typeof(string));
                            else
                                row.comment = null;

                            if (fieldNames.Contains("stored_procedure") && !reader.IsDBNull(reader.GetOrdinal("stored_procedure")))
                                row.stored_procedure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stored_procedure")), typeof(string));

                            if (fieldNames.Contains("redirect") && !reader.IsDBNull(reader.GetOrdinal("redirect")))
                                row.redirect = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"redirect")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_SELECT_LINK_DATAResult> UI_SELECT_LINK_DATA (System.Nullable<int> link_id)
        {

            List<UI_SELECT_LINK_DATAResult> result = new List<UI_SELECT_LINK_DATAResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_DATA";

                    DbParameter link_idParameter = cmd.CreateParameter();
                    link_idParameter.ParameterName = "link_id";
                    link_idParameter.Direction = ParameterDirection.Input;
                    link_idParameter.DbType = DbType.Int32;
                    link_idParameter.Precision = 10;
                    link_idParameter.Scale = 0;
                    if (link_id.HasValue)
                    {
                        link_idParameter.Value = link_id.Value;
                    }
                    else
                    {
                        link_idParameter.Size = -1;
                        link_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(link_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINK_DATAResult row = new UI_SELECT_LINK_DATAResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("data_type") && !reader.IsDBNull(reader.GetOrdinal("data_type")))
                                row.data_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"data_type")), typeof(string));
                            else
                                row.data_type = null;

                            if (fieldNames.Contains("data_description") && !reader.IsDBNull(reader.GetOrdinal("data_description")))
                                row.data_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"data_description")), typeof(string));
                            else
                                row.data_description = null;

                            if (fieldNames.Contains("comment") && !reader.IsDBNull(reader.GetOrdinal("comment")))
                                row.comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comment")), typeof(string));
                            else
                                row.comment = null;

                            if (fieldNames.Contains("stored_procedure") && !reader.IsDBNull(reader.GetOrdinal("stored_procedure")))
                                row.stored_procedure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stored_procedure")), typeof(string));
                            else
                                row.stored_procedure = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_SELECT_LINK_DATAResult>> UI_SELECT_LINK_DATAAsync (System.Nullable<int> link_id)
        {

            List<UI_SELECT_LINK_DATAResult> result = new List<UI_SELECT_LINK_DATAResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_DATA";

                    DbParameter link_idParameter = cmd.CreateParameter();
                    link_idParameter.ParameterName = "link_id";
                    link_idParameter.Direction = ParameterDirection.Input;
                    link_idParameter.DbType = DbType.Int32;
                    link_idParameter.Precision = 10;
                    link_idParameter.Scale = 0;
                    if (link_id.HasValue)
                    {
                        link_idParameter.Value = link_id.Value;
                    }
                    else
                    {
                        link_idParameter.Size = -1;
                        link_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(link_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINK_DATAResult row = new UI_SELECT_LINK_DATAResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("data_type") && !reader.IsDBNull(reader.GetOrdinal("data_type")))
                                row.data_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"data_type")), typeof(string));
                            else
                                row.data_type = null;

                            if (fieldNames.Contains("data_description") && !reader.IsDBNull(reader.GetOrdinal("data_description")))
                                row.data_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"data_description")), typeof(string));
                            else
                                row.data_description = null;

                            if (fieldNames.Contains("comment") && !reader.IsDBNull(reader.GetOrdinal("comment")))
                                row.comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comment")), typeof(string));
                            else
                                row.comment = null;

                            if (fieldNames.Contains("stored_procedure") && !reader.IsDBNull(reader.GetOrdinal("stored_procedure")))
                                row.stored_procedure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stored_procedure")), typeof(string));
                            else
                                row.stored_procedure = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_SELECT_LINK_PAGE_NOTE2Result> UI_SELECT_LINK_PAGE_NOTE2 (System.Nullable<int> link_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_SELECT_LINK_PAGE_NOTE2Result> result = new List<UI_SELECT_LINK_PAGE_NOTE2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_PAGE_NOTE2";

                    DbParameter link_idParameter = cmd.CreateParameter();
                    link_idParameter.ParameterName = "link_id";
                    link_idParameter.Direction = ParameterDirection.Input;
                    link_idParameter.DbType = DbType.Int32;
                    link_idParameter.Precision = 10;
                    link_idParameter.Scale = 0;
                    if (link_id.HasValue)
                    {
                        link_idParameter.Value = link_id.Value;
                    }
                    else
                    {
                        link_idParameter.Size = -1;
                        link_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(link_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINK_PAGE_NOTE2Result row = new UI_SELECT_LINK_PAGE_NOTE2Result();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.http_text = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("http_text") && !reader.IsDBNull(reader.GetOrdinal("http_text")))
                                row.http_text = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"http_text")), typeof(string));
                            else
                                row.http_text = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_SELECT_LINK_PAGE_NOTE2Result>> UI_SELECT_LINK_PAGE_NOTE2Async (System.Nullable<int> link_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_SELECT_LINK_PAGE_NOTE2Result> result = new List<UI_SELECT_LINK_PAGE_NOTE2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_PAGE_NOTE2";

                    DbParameter link_idParameter = cmd.CreateParameter();
                    link_idParameter.ParameterName = "link_id";
                    link_idParameter.Direction = ParameterDirection.Input;
                    link_idParameter.DbType = DbType.Int32;
                    link_idParameter.Precision = 10;
                    link_idParameter.Scale = 0;
                    if (link_id.HasValue)
                    {
                        link_idParameter.Value = link_id.Value;
                    }
                    else
                    {
                        link_idParameter.Size = -1;
                        link_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(link_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINK_PAGE_NOTE2Result row = new UI_SELECT_LINK_PAGE_NOTE2Result();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.http_text = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("http_text") && !reader.IsDBNull(reader.GetOrdinal("http_text")))
                                row.http_text = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"http_text")), typeof(string));
                            else
                                row.http_text = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public void UI_DEFOLT_GRID_SETTINGS (System.Nullable<int> user_id, string stored_procedure)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_DEFOLT_GRID_SETTINGS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task UI_DEFOLT_GRID_SETTINGSAsync (System.Nullable<int> user_id, string stored_procedure)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_DEFOLT_GRID_SETTINGS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public List<UI_SELECT_SITE_MENUResult> UI_SELECT_SITE_MENU (System.Nullable<int> user_id)
        {

            List<UI_SELECT_SITE_MENUResult> result = new List<UI_SELECT_SITE_MENUResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_SITE_MENU";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_SITE_MENUResult row = new UI_SELECT_SITE_MENUResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("parent_id") && !reader.IsDBNull(reader.GetOrdinal("parent_id")))
                                row.parent_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"parent_id")), typeof(int));
                            else
                                row.parent_id = null;

                            if (fieldNames.Contains("order_id") && !reader.IsDBNull(reader.GetOrdinal("order_id")))
                                row.order_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_id")), typeof(int));
                            else
                                row.order_id = null;

                            if (fieldNames.Contains("img") && !reader.IsDBNull(reader.GetOrdinal("img")))
                                row.img = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"img")), typeof(string));
                            else
                                row.img = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("url") && !reader.IsDBNull(reader.GetOrdinal("url")))
                                row.url = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"url")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_SELECT_SITE_MENUResult>> UI_SELECT_SITE_MENUAsync (System.Nullable<int> user_id)
        {

            List<UI_SELECT_SITE_MENUResult> result = new List<UI_SELECT_SITE_MENUResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_SITE_MENU";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_SITE_MENUResult row = new UI_SELECT_SITE_MENUResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("parent_id") && !reader.IsDBNull(reader.GetOrdinal("parent_id")))
                                row.parent_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"parent_id")), typeof(int));
                            else
                                row.parent_id = null;

                            if (fieldNames.Contains("order_id") && !reader.IsDBNull(reader.GetOrdinal("order_id")))
                                row.order_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_id")), typeof(int));
                            else
                                row.order_id = null;

                            if (fieldNames.Contains("img") && !reader.IsDBNull(reader.GetOrdinal("img")))
                                row.img = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"img")), typeof(string));
                            else
                                row.img = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("url") && !reader.IsDBNull(reader.GetOrdinal("url")))
                                row.url = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"url")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public void UI_UPDATE_LINK_PAGE_NOTE2 (System.Nullable<int> id, System.Nullable<int> link_id, string header, string html_text, string role_id_list, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> order_number)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_UPDATE_LINK_PAGE_NOTE2";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter link_idParameter = cmd.CreateParameter();
                    link_idParameter.ParameterName = "link_id";
                    link_idParameter.Direction = ParameterDirection.Input;
                    link_idParameter.DbType = DbType.Int32;
                    link_idParameter.Precision = 10;
                    link_idParameter.Scale = 0;
                    if (link_id.HasValue)
                    {
                        link_idParameter.Value = link_id.Value;
                    }
                    else
                    {
                        link_idParameter.Size = -1;
                        link_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(link_idParameter);

                    DbParameter headerParameter = cmd.CreateParameter();
                    headerParameter.ParameterName = "header";
                    headerParameter.Direction = ParameterDirection.Input;
                    headerParameter.DbType = DbType.String;
                    if (header != null)
                    {
                        headerParameter.Value = header;
                    }
                    else
                    {
                        headerParameter.Size = -1;
                        headerParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(headerParameter);

                    DbParameter html_textParameter = cmd.CreateParameter();
                    html_textParameter.ParameterName = "html_text";
                    html_textParameter.Direction = ParameterDirection.Input;
                    html_textParameter.DbType = DbType.String;
                    if (html_text != null)
                    {
                        html_textParameter.Value = html_text;
                    }
                    else
                    {
                        html_textParameter.Size = -1;
                        html_textParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(html_textParameter);

                    DbParameter role_id_listParameter = cmd.CreateParameter();
                    role_id_listParameter.ParameterName = "role_id_list";
                    role_id_listParameter.Direction = ParameterDirection.Input;
                    role_id_listParameter.DbType = DbType.String;
                    if (role_id_list != null)
                    {
                        role_id_listParameter.Value = role_id_list;
                    }
                    else
                    {
                        role_id_listParameter.Size = -1;
                        role_id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(role_id_listParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter order_numberParameter = cmd.CreateParameter();
                    order_numberParameter.ParameterName = "order_number";
                    order_numberParameter.Direction = ParameterDirection.Input;
                    order_numberParameter.DbType = DbType.Int32;
                    order_numberParameter.Precision = 10;
                    order_numberParameter.Scale = 0;
                    if (order_number.HasValue)
                    {
                        order_numberParameter.Value = order_number.Value;
                    }
                    else
                    {
                        order_numberParameter.Size = -1;
                        order_numberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(order_numberParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task UI_UPDATE_LINK_PAGE_NOTE2Async (System.Nullable<int> id, System.Nullable<int> link_id, string header, string html_text, string role_id_list, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> order_number)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_UPDATE_LINK_PAGE_NOTE2";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter link_idParameter = cmd.CreateParameter();
                    link_idParameter.ParameterName = "link_id";
                    link_idParameter.Direction = ParameterDirection.Input;
                    link_idParameter.DbType = DbType.Int32;
                    link_idParameter.Precision = 10;
                    link_idParameter.Scale = 0;
                    if (link_id.HasValue)
                    {
                        link_idParameter.Value = link_id.Value;
                    }
                    else
                    {
                        link_idParameter.Size = -1;
                        link_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(link_idParameter);

                    DbParameter headerParameter = cmd.CreateParameter();
                    headerParameter.ParameterName = "header";
                    headerParameter.Direction = ParameterDirection.Input;
                    headerParameter.DbType = DbType.String;
                    if (header != null)
                    {
                        headerParameter.Value = header;
                    }
                    else
                    {
                        headerParameter.Size = -1;
                        headerParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(headerParameter);

                    DbParameter html_textParameter = cmd.CreateParameter();
                    html_textParameter.ParameterName = "html_text";
                    html_textParameter.Direction = ParameterDirection.Input;
                    html_textParameter.DbType = DbType.String;
                    if (html_text != null)
                    {
                        html_textParameter.Value = html_text;
                    }
                    else
                    {
                        html_textParameter.Size = -1;
                        html_textParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(html_textParameter);

                    DbParameter role_id_listParameter = cmd.CreateParameter();
                    role_id_listParameter.ParameterName = "role_id_list";
                    role_id_listParameter.Direction = ParameterDirection.Input;
                    role_id_listParameter.DbType = DbType.String;
                    if (role_id_list != null)
                    {
                        role_id_listParameter.Value = role_id_list;
                    }
                    else
                    {
                        role_id_listParameter.Size = -1;
                        role_id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(role_id_listParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter order_numberParameter = cmd.CreateParameter();
                    order_numberParameter.ParameterName = "order_number";
                    order_numberParameter.Direction = ParameterDirection.Input;
                    order_numberParameter.DbType = DbType.Int32;
                    order_numberParameter.Precision = 10;
                    order_numberParameter.Scale = 0;
                    if (order_number.HasValue)
                    {
                        order_numberParameter.Value = order_number.Value;
                    }
                    else
                    {
                        order_numberParameter.Size = -1;
                        order_numberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(order_numberParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public List<UI_SELECT_LINK_PAGE_NOTES2Result> UI_SELECT_LINK_PAGE_NOTES2 (System.Nullable<int> link_id, System.Nullable<int> user_id)
        {

            List<UI_SELECT_LINK_PAGE_NOTES2Result> result = new List<UI_SELECT_LINK_PAGE_NOTES2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_PAGE_NOTES2";

                    DbParameter link_idParameter = cmd.CreateParameter();
                    link_idParameter.ParameterName = "link_id";
                    link_idParameter.Direction = ParameterDirection.Input;
                    link_idParameter.DbType = DbType.Int32;
                    link_idParameter.Precision = 10;
                    link_idParameter.Scale = 0;
                    if (link_id.HasValue)
                    {
                        link_idParameter.Value = link_id.Value;
                    }
                    else
                    {
                        link_idParameter.Size = -1;
                        link_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(link_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINK_PAGE_NOTES2Result row = new UI_SELECT_LINK_PAGE_NOTES2Result();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("order_number") && !reader.IsDBNull(reader.GetOrdinal("order_number")))
                                row.order_number = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_number")), typeof(int));
                            else
                                row.order_number = null;

                            if (fieldNames.Contains("header") && !reader.IsDBNull(reader.GetOrdinal("header")))
                                row.header = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"header")), typeof(string));
                            else
                                row.header = null;

                            if (fieldNames.Contains("html_text") && !reader.IsDBNull(reader.GetOrdinal("html_text")))
                                row.html_text = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"html_text")), typeof(string));
                            else
                                row.html_text = null;

                            if (fieldNames.Contains("list_roles_description") && !reader.IsDBNull(reader.GetOrdinal("list_roles_description")))
                                row.list_roles_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"list_roles_description")), typeof(string));
                            else
                                row.list_roles_description = null;

                            if (fieldNames.Contains("list_roles_id") && !reader.IsDBNull(reader.GetOrdinal("list_roles_id")))
                                row.list_roles_id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"list_roles_id")), typeof(string));
                            else
                                row.list_roles_id = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_SELECT_LINK_PAGE_NOTES2Result>> UI_SELECT_LINK_PAGE_NOTES2Async (System.Nullable<int> link_id, System.Nullable<int> user_id)
        {

            List<UI_SELECT_LINK_PAGE_NOTES2Result> result = new List<UI_SELECT_LINK_PAGE_NOTES2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_PAGE_NOTES2";

                    DbParameter link_idParameter = cmd.CreateParameter();
                    link_idParameter.ParameterName = "link_id";
                    link_idParameter.Direction = ParameterDirection.Input;
                    link_idParameter.DbType = DbType.Int32;
                    link_idParameter.Precision = 10;
                    link_idParameter.Scale = 0;
                    if (link_id.HasValue)
                    {
                        link_idParameter.Value = link_id.Value;
                    }
                    else
                    {
                        link_idParameter.Size = -1;
                        link_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(link_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINK_PAGE_NOTES2Result row = new UI_SELECT_LINK_PAGE_NOTES2Result();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("order_number") && !reader.IsDBNull(reader.GetOrdinal("order_number")))
                                row.order_number = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_number")), typeof(int));
                            else
                                row.order_number = null;

                            if (fieldNames.Contains("header") && !reader.IsDBNull(reader.GetOrdinal("header")))
                                row.header = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"header")), typeof(string));
                            else
                                row.header = null;

                            if (fieldNames.Contains("html_text") && !reader.IsDBNull(reader.GetOrdinal("html_text")))
                                row.html_text = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"html_text")), typeof(string));
                            else
                                row.html_text = null;

                            if (fieldNames.Contains("list_roles_description") && !reader.IsDBNull(reader.GetOrdinal("list_roles_description")))
                                row.list_roles_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"list_roles_description")), typeof(string));
                            else
                                row.list_roles_description = null;

                            if (fieldNames.Contains("list_roles_id") && !reader.IsDBNull(reader.GetOrdinal("list_roles_id")))
                                row.list_roles_id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"list_roles_id")), typeof(string));
                            else
                                row.list_roles_id = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public void SYS_FINISH_EVENT (System.Nullable<int> event_id, string file_name)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_FINISH_EVENT";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter file_nameParameter = cmd.CreateParameter();
                    file_nameParameter.ParameterName = "file_name";
                    file_nameParameter.Direction = ParameterDirection.Input;
                    file_nameParameter.DbType = DbType.String;
                    if (file_name != null)
                    {
                        file_nameParameter.Value = file_name;
                    }
                    else
                    {
                        file_nameParameter.Size = -1;
                        file_nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(file_nameParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task SYS_FINISH_EVENTAsync (System.Nullable<int> event_id, string file_name)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_FINISH_EVENT";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter file_nameParameter = cmd.CreateParameter();
                    file_nameParameter.ParameterName = "file_name";
                    file_nameParameter.Direction = ParameterDirection.Input;
                    file_nameParameter.DbType = DbType.String;
                    if (file_name != null)
                    {
                        file_nameParameter.Value = file_name;
                    }
                    else
                    {
                        file_nameParameter.Size = -1;
                        file_nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(file_nameParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public List<SYS_START_EVENTResult> SYS_START_EVENT (System.Nullable<int> user_id, string stored_procedure, string @params)
        {

            List<SYS_START_EVENTResult> result = new List<SYS_START_EVENTResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_START_EVENT";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);

                    DbParameter paramsParameter = cmd.CreateParameter();
                    paramsParameter.ParameterName = "@params";
                    paramsParameter.Direction = ParameterDirection.Input;
                    paramsParameter.DbType = DbType.String;
                    if (@params != null)
                    {
                        paramsParameter.Value = @params;
                    }
                    else
                    {
                        paramsParameter.Size = -1;
                        paramsParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(paramsParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_START_EVENTResult row = new SYS_START_EVENTResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.event_id = (int)Convert.ChangeType(reader.GetValue(0), typeof(int));
                            else
                            if (fieldNames.Contains("event_id") && !reader.IsDBNull(reader.GetOrdinal("event_id")))
                                row.event_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"event_id")), typeof(int));
                            else
                                row.event_id = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SYS_START_EVENTResult>> SYS_START_EVENTAsync (System.Nullable<int> user_id, string stored_procedure, string @params)
        {

            List<SYS_START_EVENTResult> result = new List<SYS_START_EVENTResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_START_EVENT";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);

                    DbParameter paramsParameter = cmd.CreateParameter();
                    paramsParameter.ParameterName = "@params";
                    paramsParameter.Direction = ParameterDirection.Input;
                    paramsParameter.DbType = DbType.String;
                    if (@params != null)
                    {
                        paramsParameter.Value = @params;
                    }
                    else
                    {
                        paramsParameter.Size = -1;
                        paramsParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(paramsParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_START_EVENTResult row = new SYS_START_EVENTResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.event_id = (int)Convert.ChangeType(reader.GetValue(0), typeof(int));
                            else
                            if (fieldNames.Contains("event_id") && !reader.IsDBNull(reader.GetOrdinal("event_id")))
                                row.event_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"event_id")), typeof(int));
                            else
                                row.event_id = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> UI_DELETE_LINK_FUNCTION (System.Nullable<int> id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_DELETE_LINK_FUNCTION";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> UI_DELETE_LINK_FUNCTIONAsync (System.Nullable<int> id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_DELETE_LINK_FUNCTION";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> UI_INSERT_LINK_FUNCTION (System.Nullable<int> section_id, string title, string stored_procedure, string description, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_INSERT_LINK_FUNCTION";

                    DbParameter section_idParameter = cmd.CreateParameter();
                    section_idParameter.ParameterName = "section_id";
                    section_idParameter.Direction = ParameterDirection.Input;
                    section_idParameter.DbType = DbType.Int32;
                    section_idParameter.Precision = 10;
                    section_idParameter.Scale = 0;
                    if (section_id.HasValue)
                    {
                        section_idParameter.Value = section_id.Value;
                    }
                    else
                    {
                        section_idParameter.Size = -1;
                        section_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(section_idParameter);

                    DbParameter titleParameter = cmd.CreateParameter();
                    titleParameter.ParameterName = "title";
                    titleParameter.Direction = ParameterDirection.Input;
                    titleParameter.DbType = DbType.String;
                    if (title != null)
                    {
                        titleParameter.Value = title;
                    }
                    else
                    {
                        titleParameter.Size = -1;
                        titleParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(titleParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> UI_INSERT_LINK_FUNCTIONAsync (System.Nullable<int> section_id, string title, string stored_procedure, string description, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_INSERT_LINK_FUNCTION";

                    DbParameter section_idParameter = cmd.CreateParameter();
                    section_idParameter.ParameterName = "section_id";
                    section_idParameter.Direction = ParameterDirection.Input;
                    section_idParameter.DbType = DbType.Int32;
                    section_idParameter.Precision = 10;
                    section_idParameter.Scale = 0;
                    if (section_id.HasValue)
                    {
                        section_idParameter.Value = section_id.Value;
                    }
                    else
                    {
                        section_idParameter.Size = -1;
                        section_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(section_idParameter);

                    DbParameter titleParameter = cmd.CreateParameter();
                    titleParameter.ParameterName = "title";
                    titleParameter.Direction = ParameterDirection.Input;
                    titleParameter.DbType = DbType.String;
                    if (title != null)
                    {
                        titleParameter.Value = title;
                    }
                    else
                    {
                        titleParameter.Size = -1;
                        titleParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(titleParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_SELECT_LINK_FUNCTIONSResult> UI_SELECT_LINK_FUNCTIONS (System.Nullable<int> user_id)
        {

            List<UI_SELECT_LINK_FUNCTIONSResult> result = new List<UI_SELECT_LINK_FUNCTIONSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_FUNCTIONS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINK_FUNCTIONSResult row = new UI_SELECT_LINK_FUNCTIONSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("section_id") && !reader.IsDBNull(reader.GetOrdinal("section_id")))
                                row.section_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"section_id")), typeof(int));
                            else
                                row.section_id = null;

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("section_description") && !reader.IsDBNull(reader.GetOrdinal("section_description")))
                                row.section_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"section_description")), typeof(string));
                            else
                                row.section_description = null;

                            if (fieldNames.Contains("title") && !reader.IsDBNull(reader.GetOrdinal("title")))
                                row.title = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"title")), typeof(string));
                            else
                                row.title = null;

                            if (fieldNames.Contains("stored_procedure") && !reader.IsDBNull(reader.GetOrdinal("stored_procedure")))
                                row.stored_procedure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stored_procedure")), typeof(string));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("modification_user") && !reader.IsDBNull(reader.GetOrdinal("modification_user")))
                                row.modification_user = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_user")), typeof(string));
                            else
                                row.modification_user = null;

                            if (fieldNames.Contains("modification_date") && !reader.IsDBNull(reader.GetOrdinal("modification_date")))
                                row.modification_date = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_date")), typeof(string));
                            else
                                row.modification_date = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_SELECT_LINK_FUNCTIONSResult>> UI_SELECT_LINK_FUNCTIONSAsync (System.Nullable<int> user_id)
        {

            List<UI_SELECT_LINK_FUNCTIONSResult> result = new List<UI_SELECT_LINK_FUNCTIONSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_FUNCTIONS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINK_FUNCTIONSResult row = new UI_SELECT_LINK_FUNCTIONSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("section_id") && !reader.IsDBNull(reader.GetOrdinal("section_id")))
                                row.section_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"section_id")), typeof(int));
                            else
                                row.section_id = null;

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("section_description") && !reader.IsDBNull(reader.GetOrdinal("section_description")))
                                row.section_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"section_description")), typeof(string));
                            else
                                row.section_description = null;

                            if (fieldNames.Contains("title") && !reader.IsDBNull(reader.GetOrdinal("title")))
                                row.title = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"title")), typeof(string));
                            else
                                row.title = null;

                            if (fieldNames.Contains("stored_procedure") && !reader.IsDBNull(reader.GetOrdinal("stored_procedure")))
                                row.stored_procedure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stored_procedure")), typeof(string));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("modification_user") && !reader.IsDBNull(reader.GetOrdinal("modification_user")))
                                row.modification_user = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_user")), typeof(string));
                            else
                                row.modification_user = null;

                            if (fieldNames.Contains("modification_date") && !reader.IsDBNull(reader.GetOrdinal("modification_date")))
                                row.modification_date = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_date")), typeof(string));
                            else
                                row.modification_date = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECT_STATES_FOR_DDResult> UI_SELECT_LINK_SECTIONS_FOR_DD (System.Nullable<int> user_id)
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_SECTIONS_FOR_DD";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_STATES_FOR_DDResult>> UI_SELECT_LINK_SECTIONS_FOR_DDAsync (System.Nullable<int> user_id)
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_SECTIONS_FOR_DD";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> UI_UPDATE_LINK_FUNCTION (System.Nullable<int> id, System.Nullable<int> section_id, string title, string stored_procedure, string description, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_UPDATE_LINK_FUNCTION";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter section_idParameter = cmd.CreateParameter();
                    section_idParameter.ParameterName = "section_id";
                    section_idParameter.Direction = ParameterDirection.Input;
                    section_idParameter.DbType = DbType.Int32;
                    section_idParameter.Precision = 10;
                    section_idParameter.Scale = 0;
                    if (section_id.HasValue)
                    {
                        section_idParameter.Value = section_id.Value;
                    }
                    else
                    {
                        section_idParameter.Size = -1;
                        section_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(section_idParameter);

                    DbParameter titleParameter = cmd.CreateParameter();
                    titleParameter.ParameterName = "title";
                    titleParameter.Direction = ParameterDirection.Input;
                    titleParameter.DbType = DbType.String;
                    if (title != null)
                    {
                        titleParameter.Value = title;
                    }
                    else
                    {
                        titleParameter.Size = -1;
                        titleParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(titleParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> UI_UPDATE_LINK_FUNCTIONAsync (System.Nullable<int> id, System.Nullable<int> section_id, string title, string stored_procedure, string description, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_UPDATE_LINK_FUNCTION";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter section_idParameter = cmd.CreateParameter();
                    section_idParameter.ParameterName = "section_id";
                    section_idParameter.Direction = ParameterDirection.Input;
                    section_idParameter.DbType = DbType.Int32;
                    section_idParameter.Precision = 10;
                    section_idParameter.Scale = 0;
                    if (section_id.HasValue)
                    {
                        section_idParameter.Value = section_id.Value;
                    }
                    else
                    {
                        section_idParameter.Size = -1;
                        section_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(section_idParameter);

                    DbParameter titleParameter = cmd.CreateParameter();
                    titleParameter.ParameterName = "title";
                    titleParameter.Direction = ParameterDirection.Input;
                    titleParameter.DbType = DbType.String;
                    if (title != null)
                    {
                        titleParameter.Value = title;
                    }
                    else
                    {
                        titleParameter.Size = -1;
                        titleParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(titleParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPHResult> MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPH ()
        {

            List<MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPHResult> result = new List<MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPHResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPH";
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPHResult row = new MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPHResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(string));
                            else
                                row.id = null;

                            if (fieldNames.Contains("parent") && !reader.IsDBNull(reader.GetOrdinal("parent")))
                                row.parent = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"parent")), typeof(string));
                            else
                                row.parent = null;

                            if (fieldNames.Contains("text") && !reader.IsDBNull(reader.GetOrdinal("text")))
                                row.text = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"text")), typeof(string));
                            else
                                row.text = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPHResult>> MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPHAsync ()
        {

            List<MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPHResult> result = new List<MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPHResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPH";
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPHResult row = new MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPHResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(string));
                            else
                                row.id = null;

                            if (fieldNames.Contains("parent") && !reader.IsDBNull(reader.GetOrdinal("parent")))
                                row.parent = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"parent")), typeof(string));
                            else
                                row.parent = null;

                            if (fieldNames.Contains("text") && !reader.IsDBNull(reader.GetOrdinal("text")))
                                row.text = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"text")), typeof(string));
                            else
                                row.text = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<PRC_SELECT_ORDER_ITEMS_GKIResult> PRC_SELECT_ORDER_ITEMS_GKI (System.Nullable<bool> show_classified, System.Nullable<bool> only_new, string ekk_guid_list, System.Nullable<int> user_id, System.Nullable<int> event_id)
        {

            List<PRC_SELECT_ORDER_ITEMS_GKIResult> result = new List<PRC_SELECT_ORDER_ITEMS_GKIResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.PRC_SELECT_ORDER_ITEMS_GKI";

                    DbParameter show_classifiedParameter = cmd.CreateParameter();
                    show_classifiedParameter.ParameterName = "show_classified";
                    show_classifiedParameter.Direction = ParameterDirection.Input;
                    show_classifiedParameter.DbType = DbType.Boolean;
                    if (show_classified.HasValue)
                    {
                        show_classifiedParameter.Value = show_classified.Value;
                    }
                    else
                    {
                        show_classifiedParameter.Size = -1;
                        show_classifiedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_classifiedParameter);

                    DbParameter only_newParameter = cmd.CreateParameter();
                    only_newParameter.ParameterName = "only_new";
                    only_newParameter.Direction = ParameterDirection.Input;
                    only_newParameter.DbType = DbType.Boolean;
                    if (only_new.HasValue)
                    {
                        only_newParameter.Value = only_new.Value;
                    }
                    else
                    {
                        only_newParameter.Size = -1;
                        only_newParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(only_newParameter);

                    DbParameter ekk_guid_listParameter = cmd.CreateParameter();
                    ekk_guid_listParameter.ParameterName = "ekk_guid_list";
                    ekk_guid_listParameter.Direction = ParameterDirection.Input;
                    ekk_guid_listParameter.DbType = DbType.String;
                    if (ekk_guid_list != null)
                    {
                        ekk_guid_listParameter.Value = ekk_guid_list;
                    }
                    else
                    {
                        ekk_guid_listParameter.Size = -1;
                        ekk_guid_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ekk_guid_listParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PRC_SELECT_ORDER_ITEMS_GKIResult row = new PRC_SELECT_ORDER_ITEMS_GKIResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("item_description") && !reader.IsDBNull(reader.GetOrdinal("item_description")))
                                row.item_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_description")), typeof(string));
                            else
                                row.item_description = null;

                            if (fieldNames.Contains("item_additional_properties") && !reader.IsDBNull(reader.GetOrdinal("item_additional_properties")))
                                row.item_additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_additional_properties")), typeof(string));
                            else
                                row.item_additional_properties = null;

                            if (fieldNames.Contains("order_code") && !reader.IsDBNull(reader.GetOrdinal("order_code")))
                                row.order_code = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_code")), typeof(int));

                            if (fieldNames.Contains("order_number") && !reader.IsDBNull(reader.GetOrdinal("order_number")))
                                row.order_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_number")), typeof(string));
                            else
                                row.order_number = null;

                            if (fieldNames.Contains("supply_manager") && !reader.IsDBNull(reader.GetOrdinal("supply_manager")))
                                row.supply_manager = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_manager")), typeof(string));
                            else
                                row.supply_manager = null;

                            if (fieldNames.Contains("order_item_note") && !reader.IsDBNull(reader.GetOrdinal("order_item_note")))
                                row.order_item_note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_item_note")), typeof(string));

                            if (fieldNames.Contains("order_item_modification_date") && !reader.IsDBNull(reader.GetOrdinal("order_item_modification_date")))
                                row.order_item_modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_item_modification_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("gki_code") && !reader.IsDBNull(reader.GetOrdinal("gki_code")))
                                row.gki_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_code")), typeof(string));
                            else
                                row.gki_code = null;

                            if (fieldNames.Contains("gki_code_date") && !reader.IsDBNull(reader.GetOrdinal("gki_code_date")))
                                row.gki_code_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_code_date")), typeof(System.DateTime));
                            else
                                row.gki_code_date = null;

                            if (fieldNames.Contains("gki_order_number") && !reader.IsDBNull(reader.GetOrdinal("gki_order_number")))
                                row.gki_order_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_order_number")), typeof(string));
                            else
                                row.gki_order_number = null;

                            if (fieldNames.Contains("gki_order_date") && !reader.IsDBNull(reader.GetOrdinal("gki_order_date")))
                                row.gki_order_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_order_date")), typeof(System.DateTime));
                            else
                                row.gki_order_date = null;

                            if (fieldNames.Contains("gki_state_id") && !reader.IsDBNull(reader.GetOrdinal("gki_state_id")))
                                row.gki_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state_id")), typeof(int));
                            else
                                row.gki_state_id = null;

                            if (fieldNames.Contains("gki_state") && !reader.IsDBNull(reader.GetOrdinal("gki_state")))
                                row.gki_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state")), typeof(string));
                            else
                                row.gki_state = null;

                            if (fieldNames.Contains("gki_state_date") && !reader.IsDBNull(reader.GetOrdinal("gki_state_date")))
                                row.gki_state_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state_date")), typeof(System.DateTime));
                            else
                                row.gki_state_date = null;

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal("note")))
                                row.note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.note = null;

                            if (fieldNames.Contains("gki_user") && !reader.IsDBNull(reader.GetOrdinal("gki_user")))
                                row.gki_user = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_user")), typeof(string));
                            else
                                row.gki_user = null;

                            if (fieldNames.Contains("color") && !reader.IsDBNull(reader.GetOrdinal("color")))
                                row.color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color")), typeof(string));
                            else
                                row.color = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<PRC_SELECT_ORDER_ITEMS_GKIResult>> PRC_SELECT_ORDER_ITEMS_GKIAsync (System.Nullable<bool> show_classified, System.Nullable<bool> only_new, string ekk_guid_list, System.Nullable<int> user_id, System.Nullable<int> event_id)
        {

            List<PRC_SELECT_ORDER_ITEMS_GKIResult> result = new List<PRC_SELECT_ORDER_ITEMS_GKIResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.PRC_SELECT_ORDER_ITEMS_GKI";

                    DbParameter show_classifiedParameter = cmd.CreateParameter();
                    show_classifiedParameter.ParameterName = "show_classified";
                    show_classifiedParameter.Direction = ParameterDirection.Input;
                    show_classifiedParameter.DbType = DbType.Boolean;
                    if (show_classified.HasValue)
                    {
                        show_classifiedParameter.Value = show_classified.Value;
                    }
                    else
                    {
                        show_classifiedParameter.Size = -1;
                        show_classifiedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_classifiedParameter);

                    DbParameter only_newParameter = cmd.CreateParameter();
                    only_newParameter.ParameterName = "only_new";
                    only_newParameter.Direction = ParameterDirection.Input;
                    only_newParameter.DbType = DbType.Boolean;
                    if (only_new.HasValue)
                    {
                        only_newParameter.Value = only_new.Value;
                    }
                    else
                    {
                        only_newParameter.Size = -1;
                        only_newParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(only_newParameter);

                    DbParameter ekk_guid_listParameter = cmd.CreateParameter();
                    ekk_guid_listParameter.ParameterName = "ekk_guid_list";
                    ekk_guid_listParameter.Direction = ParameterDirection.Input;
                    ekk_guid_listParameter.DbType = DbType.String;
                    if (ekk_guid_list != null)
                    {
                        ekk_guid_listParameter.Value = ekk_guid_list;
                    }
                    else
                    {
                        ekk_guid_listParameter.Size = -1;
                        ekk_guid_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ekk_guid_listParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PRC_SELECT_ORDER_ITEMS_GKIResult row = new PRC_SELECT_ORDER_ITEMS_GKIResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("item_description") && !reader.IsDBNull(reader.GetOrdinal("item_description")))
                                row.item_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_description")), typeof(string));
                            else
                                row.item_description = null;

                            if (fieldNames.Contains("item_additional_properties") && !reader.IsDBNull(reader.GetOrdinal("item_additional_properties")))
                                row.item_additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_additional_properties")), typeof(string));
                            else
                                row.item_additional_properties = null;

                            if (fieldNames.Contains("order_code") && !reader.IsDBNull(reader.GetOrdinal("order_code")))
                                row.order_code = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_code")), typeof(int));

                            if (fieldNames.Contains("order_number") && !reader.IsDBNull(reader.GetOrdinal("order_number")))
                                row.order_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_number")), typeof(string));
                            else
                                row.order_number = null;

                            if (fieldNames.Contains("supply_manager") && !reader.IsDBNull(reader.GetOrdinal("supply_manager")))
                                row.supply_manager = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_manager")), typeof(string));
                            else
                                row.supply_manager = null;

                            if (fieldNames.Contains("order_item_note") && !reader.IsDBNull(reader.GetOrdinal("order_item_note")))
                                row.order_item_note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_item_note")), typeof(string));

                            if (fieldNames.Contains("order_item_modification_date") && !reader.IsDBNull(reader.GetOrdinal("order_item_modification_date")))
                                row.order_item_modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_item_modification_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("gki_code") && !reader.IsDBNull(reader.GetOrdinal("gki_code")))
                                row.gki_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_code")), typeof(string));
                            else
                                row.gki_code = null;

                            if (fieldNames.Contains("gki_code_date") && !reader.IsDBNull(reader.GetOrdinal("gki_code_date")))
                                row.gki_code_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_code_date")), typeof(System.DateTime));
                            else
                                row.gki_code_date = null;

                            if (fieldNames.Contains("gki_order_number") && !reader.IsDBNull(reader.GetOrdinal("gki_order_number")))
                                row.gki_order_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_order_number")), typeof(string));
                            else
                                row.gki_order_number = null;

                            if (fieldNames.Contains("gki_order_date") && !reader.IsDBNull(reader.GetOrdinal("gki_order_date")))
                                row.gki_order_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_order_date")), typeof(System.DateTime));
                            else
                                row.gki_order_date = null;

                            if (fieldNames.Contains("gki_state_id") && !reader.IsDBNull(reader.GetOrdinal("gki_state_id")))
                                row.gki_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state_id")), typeof(int));
                            else
                                row.gki_state_id = null;

                            if (fieldNames.Contains("gki_state") && !reader.IsDBNull(reader.GetOrdinal("gki_state")))
                                row.gki_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state")), typeof(string));
                            else
                                row.gki_state = null;

                            if (fieldNames.Contains("gki_state_date") && !reader.IsDBNull(reader.GetOrdinal("gki_state_date")))
                                row.gki_state_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state_date")), typeof(System.DateTime));
                            else
                                row.gki_state_date = null;

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal("note")))
                                row.note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.note = null;

                            if (fieldNames.Contains("gki_user") && !reader.IsDBNull(reader.GetOrdinal("gki_user")))
                                row.gki_user = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_user")), typeof(string));
                            else
                                row.gki_user = null;

                            if (fieldNames.Contains("color") && !reader.IsDBNull(reader.GetOrdinal("color")))
                                row.color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color")), typeof(string));
                            else
                                row.color = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public void APL_INSERT_PROJECT_LOADING_ITEM (System.Nullable<int> loading_id, System.Nullable<int> object_id, string subobject_description, string start_description, string finish_description, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_INSERT_PROJECT_LOADING_ITEM";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter object_idParameter = cmd.CreateParameter();
                    object_idParameter.ParameterName = "object_id";
                    object_idParameter.Direction = ParameterDirection.Input;
                    object_idParameter.DbType = DbType.Int32;
                    object_idParameter.Precision = 10;
                    object_idParameter.Scale = 0;
                    if (object_id.HasValue)
                    {
                        object_idParameter.Value = object_id.Value;
                    }
                    else
                    {
                        object_idParameter.Size = -1;
                        object_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(object_idParameter);

                    DbParameter subobject_descriptionParameter = cmd.CreateParameter();
                    subobject_descriptionParameter.ParameterName = "subobject_description";
                    subobject_descriptionParameter.Direction = ParameterDirection.Input;
                    subobject_descriptionParameter.DbType = DbType.String;
                    if (subobject_description != null)
                    {
                        subobject_descriptionParameter.Value = subobject_description;
                    }
                    else
                    {
                        subobject_descriptionParameter.Size = -1;
                        subobject_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subobject_descriptionParameter);

                    DbParameter start_descriptionParameter = cmd.CreateParameter();
                    start_descriptionParameter.ParameterName = "start_description";
                    start_descriptionParameter.Direction = ParameterDirection.Input;
                    start_descriptionParameter.DbType = DbType.String;
                    if (start_description != null)
                    {
                        start_descriptionParameter.Value = start_description;
                    }
                    else
                    {
                        start_descriptionParameter.Size = -1;
                        start_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(start_descriptionParameter);

                    DbParameter finish_descriptionParameter = cmd.CreateParameter();
                    finish_descriptionParameter.ParameterName = "finish_description";
                    finish_descriptionParameter.Direction = ParameterDirection.Input;
                    finish_descriptionParameter.DbType = DbType.String;
                    if (finish_description != null)
                    {
                        finish_descriptionParameter.Value = finish_description;
                    }
                    else
                    {
                        finish_descriptionParameter.Size = -1;
                        finish_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finish_descriptionParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task APL_INSERT_PROJECT_LOADING_ITEMAsync (System.Nullable<int> loading_id, System.Nullable<int> object_id, string subobject_description, string start_description, string finish_description, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_INSERT_PROJECT_LOADING_ITEM";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter object_idParameter = cmd.CreateParameter();
                    object_idParameter.ParameterName = "object_id";
                    object_idParameter.Direction = ParameterDirection.Input;
                    object_idParameter.DbType = DbType.Int32;
                    object_idParameter.Precision = 10;
                    object_idParameter.Scale = 0;
                    if (object_id.HasValue)
                    {
                        object_idParameter.Value = object_id.Value;
                    }
                    else
                    {
                        object_idParameter.Size = -1;
                        object_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(object_idParameter);

                    DbParameter subobject_descriptionParameter = cmd.CreateParameter();
                    subobject_descriptionParameter.ParameterName = "subobject_description";
                    subobject_descriptionParameter.Direction = ParameterDirection.Input;
                    subobject_descriptionParameter.DbType = DbType.String;
                    if (subobject_description != null)
                    {
                        subobject_descriptionParameter.Value = subobject_description;
                    }
                    else
                    {
                        subobject_descriptionParameter.Size = -1;
                        subobject_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subobject_descriptionParameter);

                    DbParameter start_descriptionParameter = cmd.CreateParameter();
                    start_descriptionParameter.ParameterName = "start_description";
                    start_descriptionParameter.Direction = ParameterDirection.Input;
                    start_descriptionParameter.DbType = DbType.String;
                    if (start_description != null)
                    {
                        start_descriptionParameter.Value = start_description;
                    }
                    else
                    {
                        start_descriptionParameter.Size = -1;
                        start_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(start_descriptionParameter);

                    DbParameter finish_descriptionParameter = cmd.CreateParameter();
                    finish_descriptionParameter.ParameterName = "finish_description";
                    finish_descriptionParameter.Direction = ParameterDirection.Input;
                    finish_descriptionParameter.DbType = DbType.String;
                    if (finish_description != null)
                    {
                        finish_descriptionParameter.Value = finish_description;
                    }
                    else
                    {
                        finish_descriptionParameter.Size = -1;
                        finish_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finish_descriptionParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public List<APL_SELECT_PROJECT_LOADING_ITEMSResult> APL_SELECT_PROJECT_LOADING_ITEMS (System.Nullable<int> loading_id, System.Nullable<int> user_id)
        {

            List<APL_SELECT_PROJECT_LOADING_ITEMSResult> result = new List<APL_SELECT_PROJECT_LOADING_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_LOADING_ITEMS";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_LOADING_ITEMSResult row = new APL_SELECT_PROJECT_LOADING_ITEMSResult();
                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("start_description") && !reader.IsDBNull(reader.GetOrdinal("start_description")))
                                row.start_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start_description")), typeof(string));
                            else
                                row.start_description = null;

                            if (fieldNames.Contains("finish_description") && !reader.IsDBNull(reader.GetOrdinal("finish_description")))
                                row.finish_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish_description")), typeof(string));
                            else
                                row.finish_description = null;

                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            if (fieldNames.Contains("warning_description") && !reader.IsDBNull(reader.GetOrdinal("warning_description")))
                                row.warning_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warning_description")), typeof(string));
                            else
                                row.warning_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_LOADING_ITEMSResult>> APL_SELECT_PROJECT_LOADING_ITEMSAsync (System.Nullable<int> loading_id, System.Nullable<int> user_id)
        {

            List<APL_SELECT_PROJECT_LOADING_ITEMSResult> result = new List<APL_SELECT_PROJECT_LOADING_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_LOADING_ITEMS";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_LOADING_ITEMSResult row = new APL_SELECT_PROJECT_LOADING_ITEMSResult();
                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("start_description") && !reader.IsDBNull(reader.GetOrdinal("start_description")))
                                row.start_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start_description")), typeof(string));
                            else
                                row.start_description = null;

                            if (fieldNames.Contains("finish_description") && !reader.IsDBNull(reader.GetOrdinal("finish_description")))
                                row.finish_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish_description")), typeof(string));
                            else
                                row.finish_description = null;

                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            if (fieldNames.Contains("warning_description") && !reader.IsDBNull(reader.GetOrdinal("warning_description")))
                                row.warning_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warning_description")), typeof(string));
                            else
                                row.warning_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public void SYS_COMMIT_LOADING (System.Nullable<int> loading_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_COMMIT_LOADING";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task SYS_COMMIT_LOADINGAsync (System.Nullable<int> loading_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_COMMIT_LOADING";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public List<SYS_SELECT_LOADING_INFOResult> SYS_SELECT_LOADING_INFO (System.Nullable<int> loading_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<SYS_SELECT_LOADING_INFOResult> result = new List<SYS_SELECT_LOADING_INFOResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_LOADING_INFO";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_LOADING_INFOResult row = new SYS_SELECT_LOADING_INFOResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("loading_state_id") && !reader.IsDBNull(reader.GetOrdinal("loading_state_id")))
                                row.loading_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"loading_state_id")), typeof(int));
                            else
                                row.loading_state_id = null;

                            if (fieldNames.Contains("loading_state_description") && !reader.IsDBNull(reader.GetOrdinal("loading_state_description")))
                                row.loading_state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"loading_state_description")), typeof(string));
                            else
                                row.loading_state_description = null;

                            if (fieldNames.Contains("allow_commit") && !reader.IsDBNull(reader.GetOrdinal("allow_commit")))
                                row.allow_commit = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"allow_commit")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("total_cnt") && !reader.IsDBNull(reader.GetOrdinal("total_cnt")))
                                row.total_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_cnt")), typeof(int));
                            else
                                row.total_cnt = null;

                            if (fieldNames.Contains("error_cnt") && !reader.IsDBNull(reader.GetOrdinal("error_cnt")))
                                row.error_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_cnt")), typeof(int));
                            else
                                row.error_cnt = null;

                            if (fieldNames.Contains("warning_cnt") && !reader.IsDBNull(reader.GetOrdinal("warning_cnt")))
                                row.warning_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warning_cnt")), typeof(int));
                            else
                                row.warning_cnt = null;

                            if (fieldNames.Contains("info_html") && !reader.IsDBNull(reader.GetOrdinal("info_html")))
                                row.info_html = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"info_html")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SYS_SELECT_LOADING_INFOResult>> SYS_SELECT_LOADING_INFOAsync (System.Nullable<int> loading_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<SYS_SELECT_LOADING_INFOResult> result = new List<SYS_SELECT_LOADING_INFOResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_LOADING_INFO";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_LOADING_INFOResult row = new SYS_SELECT_LOADING_INFOResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("loading_state_id") && !reader.IsDBNull(reader.GetOrdinal("loading_state_id")))
                                row.loading_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"loading_state_id")), typeof(int));
                            else
                                row.loading_state_id = null;

                            if (fieldNames.Contains("loading_state_description") && !reader.IsDBNull(reader.GetOrdinal("loading_state_description")))
                                row.loading_state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"loading_state_description")), typeof(string));
                            else
                                row.loading_state_description = null;

                            if (fieldNames.Contains("allow_commit") && !reader.IsDBNull(reader.GetOrdinal("allow_commit")))
                                row.allow_commit = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"allow_commit")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("total_cnt") && !reader.IsDBNull(reader.GetOrdinal("total_cnt")))
                                row.total_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_cnt")), typeof(int));
                            else
                                row.total_cnt = null;

                            if (fieldNames.Contains("error_cnt") && !reader.IsDBNull(reader.GetOrdinal("error_cnt")))
                                row.error_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_cnt")), typeof(int));
                            else
                                row.error_cnt = null;

                            if (fieldNames.Contains("warning_cnt") && !reader.IsDBNull(reader.GetOrdinal("warning_cnt")))
                                row.warning_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warning_cnt")), typeof(int));
                            else
                                row.warning_cnt = null;

                            if (fieldNames.Contains("info_html") && !reader.IsDBNull(reader.GetOrdinal("info_html")))
                                row.info_html = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"info_html")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<SYS_INSERT_LOADING2Result> SYS_INSERT_LOADING2 (System.Nullable<int> loading_type_id, string description, string file_name, string summary, System.Nullable<int> user_id)
        {

            List<SYS_INSERT_LOADING2Result> result = new List<SYS_INSERT_LOADING2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_INSERT_LOADING2";

                    DbParameter loading_type_idParameter = cmd.CreateParameter();
                    loading_type_idParameter.ParameterName = "loading_type_id";
                    loading_type_idParameter.Direction = ParameterDirection.Input;
                    loading_type_idParameter.DbType = DbType.Int32;
                    loading_type_idParameter.Precision = 10;
                    loading_type_idParameter.Scale = 0;
                    if (loading_type_id.HasValue)
                    {
                        loading_type_idParameter.Value = loading_type_id.Value;
                    }
                    else
                    {
                        loading_type_idParameter.Size = -1;
                        loading_type_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_type_idParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter file_nameParameter = cmd.CreateParameter();
                    file_nameParameter.ParameterName = "file_name";
                    file_nameParameter.Direction = ParameterDirection.Input;
                    file_nameParameter.DbType = DbType.String;
                    if (file_name != null)
                    {
                        file_nameParameter.Value = file_name;
                    }
                    else
                    {
                        file_nameParameter.Size = -1;
                        file_nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(file_nameParameter);

                    DbParameter summaryParameter = cmd.CreateParameter();
                    summaryParameter.ParameterName = "summary";
                    summaryParameter.Direction = ParameterDirection.Input;
                    summaryParameter.DbType = DbType.String;
                    if (summary != null)
                    {
                        summaryParameter.Value = summary;
                    }
                    else
                    {
                        summaryParameter.Size = -1;
                        summaryParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(summaryParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_INSERT_LOADING2Result row = new SYS_INSERT_LOADING2Result();
                            if (fieldNames.Contains("loading_id") && !reader.IsDBNull(reader.GetOrdinal("loading_id")))
                                row.loading_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"loading_id")), typeof(int));
                            else
                                row.loading_id = null;

                            if (fieldNames.Contains("column_cnt") && !reader.IsDBNull(reader.GetOrdinal("column_cnt")))
                                row.column_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"column_cnt")), typeof(int));
                            else
                                row.column_cnt = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SYS_INSERT_LOADING2Result>> SYS_INSERT_LOADING2Async (System.Nullable<int> loading_type_id, string description, string file_name, string summary, System.Nullable<int> user_id)
        {

            List<SYS_INSERT_LOADING2Result> result = new List<SYS_INSERT_LOADING2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_INSERT_LOADING2";

                    DbParameter loading_type_idParameter = cmd.CreateParameter();
                    loading_type_idParameter.ParameterName = "loading_type_id";
                    loading_type_idParameter.Direction = ParameterDirection.Input;
                    loading_type_idParameter.DbType = DbType.Int32;
                    loading_type_idParameter.Precision = 10;
                    loading_type_idParameter.Scale = 0;
                    if (loading_type_id.HasValue)
                    {
                        loading_type_idParameter.Value = loading_type_id.Value;
                    }
                    else
                    {
                        loading_type_idParameter.Size = -1;
                        loading_type_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_type_idParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter file_nameParameter = cmd.CreateParameter();
                    file_nameParameter.ParameterName = "file_name";
                    file_nameParameter.Direction = ParameterDirection.Input;
                    file_nameParameter.DbType = DbType.String;
                    if (file_name != null)
                    {
                        file_nameParameter.Value = file_name;
                    }
                    else
                    {
                        file_nameParameter.Size = -1;
                        file_nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(file_nameParameter);

                    DbParameter summaryParameter = cmd.CreateParameter();
                    summaryParameter.ParameterName = "summary";
                    summaryParameter.Direction = ParameterDirection.Input;
                    summaryParameter.DbType = DbType.String;
                    if (summary != null)
                    {
                        summaryParameter.Value = summary;
                    }
                    else
                    {
                        summaryParameter.Size = -1;
                        summaryParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(summaryParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_INSERT_LOADING2Result row = new SYS_INSERT_LOADING2Result();
                            if (fieldNames.Contains("loading_id") && !reader.IsDBNull(reader.GetOrdinal("loading_id")))
                                row.loading_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"loading_id")), typeof(int));
                            else
                                row.loading_id = null;

                            if (fieldNames.Contains("column_cnt") && !reader.IsDBNull(reader.GetOrdinal("column_cnt")))
                                row.column_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"column_cnt")), typeof(int));
                            else
                                row.column_cnt = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public void UI_UPDATE_GRID_SETTING2 (System.Nullable<int> user_id, string stored_procedure, string field_description, System.Nullable<int> is_visible, System.Nullable<int> width, System.Nullable<int> number)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_UPDATE_GRID_SETTING2";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);

                    DbParameter field_descriptionParameter = cmd.CreateParameter();
                    field_descriptionParameter.ParameterName = "field_description";
                    field_descriptionParameter.Direction = ParameterDirection.Input;
                    field_descriptionParameter.DbType = DbType.String;
                    if (field_description != null)
                    {
                        field_descriptionParameter.Value = field_description;
                    }
                    else
                    {
                        field_descriptionParameter.Size = -1;
                        field_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(field_descriptionParameter);

                    DbParameter is_visibleParameter = cmd.CreateParameter();
                    is_visibleParameter.ParameterName = "is_visible";
                    is_visibleParameter.Direction = ParameterDirection.Input;
                    is_visibleParameter.DbType = DbType.Int32;
                    is_visibleParameter.Precision = 10;
                    is_visibleParameter.Scale = 0;
                    if (is_visible.HasValue)
                    {
                        is_visibleParameter.Value = is_visible.Value;
                    }
                    else
                    {
                        is_visibleParameter.Size = -1;
                        is_visibleParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_visibleParameter);

                    DbParameter widthParameter = cmd.CreateParameter();
                    widthParameter.ParameterName = "width";
                    widthParameter.Direction = ParameterDirection.Input;
                    widthParameter.DbType = DbType.Int32;
                    widthParameter.Precision = 10;
                    widthParameter.Scale = 0;
                    if (width.HasValue)
                    {
                        widthParameter.Value = width.Value;
                    }
                    else
                    {
                        widthParameter.Size = -1;
                        widthParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(widthParameter);

                    DbParameter numberParameter = cmd.CreateParameter();
                    numberParameter.ParameterName = "number";
                    numberParameter.Direction = ParameterDirection.Input;
                    numberParameter.DbType = DbType.Int32;
                    numberParameter.Precision = 10;
                    numberParameter.Scale = 0;
                    if (number.HasValue)
                    {
                        numberParameter.Value = number.Value;
                    }
                    else
                    {
                        numberParameter.Size = -1;
                        numberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(numberParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task UI_UPDATE_GRID_SETTING2Async (System.Nullable<int> user_id, string stored_procedure, string field_description, System.Nullable<int> is_visible, System.Nullable<int> width, System.Nullable<int> number)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_UPDATE_GRID_SETTING2";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);

                    DbParameter field_descriptionParameter = cmd.CreateParameter();
                    field_descriptionParameter.ParameterName = "field_description";
                    field_descriptionParameter.Direction = ParameterDirection.Input;
                    field_descriptionParameter.DbType = DbType.String;
                    if (field_description != null)
                    {
                        field_descriptionParameter.Value = field_description;
                    }
                    else
                    {
                        field_descriptionParameter.Size = -1;
                        field_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(field_descriptionParameter);

                    DbParameter is_visibleParameter = cmd.CreateParameter();
                    is_visibleParameter.ParameterName = "is_visible";
                    is_visibleParameter.Direction = ParameterDirection.Input;
                    is_visibleParameter.DbType = DbType.Int32;
                    is_visibleParameter.Precision = 10;
                    is_visibleParameter.Scale = 0;
                    if (is_visible.HasValue)
                    {
                        is_visibleParameter.Value = is_visible.Value;
                    }
                    else
                    {
                        is_visibleParameter.Size = -1;
                        is_visibleParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_visibleParameter);

                    DbParameter widthParameter = cmd.CreateParameter();
                    widthParameter.ParameterName = "width";
                    widthParameter.Direction = ParameterDirection.Input;
                    widthParameter.DbType = DbType.Int32;
                    widthParameter.Precision = 10;
                    widthParameter.Scale = 0;
                    if (width.HasValue)
                    {
                        widthParameter.Value = width.Value;
                    }
                    else
                    {
                        widthParameter.Size = -1;
                        widthParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(widthParameter);

                    DbParameter numberParameter = cmd.CreateParameter();
                    numberParameter.ParameterName = "number";
                    numberParameter.Direction = ParameterDirection.Input;
                    numberParameter.DbType = DbType.Int32;
                    numberParameter.Precision = 10;
                    numberParameter.Scale = 0;
                    if (number.HasValue)
                    {
                        numberParameter.Value = number.Value;
                    }
                    else
                    {
                        numberParameter.Size = -1;
                        numberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(numberParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public List<APL_SELECT_PROJECT_STATES_FOR_DDResult> UI_SELECT_DROPDOWN (string dropdown, string param, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_DROPDOWN";

                    DbParameter dropdownParameter = cmd.CreateParameter();
                    dropdownParameter.ParameterName = "dropdown";
                    dropdownParameter.Direction = ParameterDirection.Input;
                    dropdownParameter.DbType = DbType.String;
                    if (dropdown != null)
                    {
                        dropdownParameter.Value = dropdown;
                    }
                    else
                    {
                        dropdownParameter.Size = -1;
                        dropdownParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(dropdownParameter);

                    DbParameter paramParameter = cmd.CreateParameter();
                    paramParameter.ParameterName = "param";
                    paramParameter.Direction = ParameterDirection.Input;
                    paramParameter.DbType = DbType.String;
                    if (param != null)
                    {
                        paramParameter.Value = param;
                    }
                    else
                    {
                        paramParameter.Size = -1;
                        paramParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(paramParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_STATES_FOR_DDResult>> UI_SELECT_DROPDOWNAsync (string dropdown, string param, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_DROPDOWN";

                    DbParameter dropdownParameter = cmd.CreateParameter();
                    dropdownParameter.ParameterName = "dropdown";
                    dropdownParameter.Direction = ParameterDirection.Input;
                    dropdownParameter.DbType = DbType.String;
                    if (dropdown != null)
                    {
                        dropdownParameter.Value = dropdown;
                    }
                    else
                    {
                        dropdownParameter.Size = -1;
                        dropdownParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(dropdownParameter);

                    DbParameter paramParameter = cmd.CreateParameter();
                    paramParameter.ParameterName = "param";
                    paramParameter.Direction = ParameterDirection.Input;
                    paramParameter.DbType = DbType.String;
                    if (param != null)
                    {
                        paramParameter.Value = param;
                    }
                    else
                    {
                        paramParameter.Size = -1;
                        paramParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(paramParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_SELECT_GRID_SETTINGSResult> UI_SELECT_GRID_SETTINGS (System.Nullable<int> user_id, string stored_procedure, System.Nullable<int> param_id, System.Nullable<int> data_type_id)
        {

            List<UI_SELECT_GRID_SETTINGSResult> result = new List<UI_SELECT_GRID_SETTINGSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_GRID_SETTINGS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);

                    DbParameter param_idParameter = cmd.CreateParameter();
                    param_idParameter.ParameterName = "param_id";
                    param_idParameter.Direction = ParameterDirection.Input;
                    param_idParameter.DbType = DbType.Int32;
                    param_idParameter.Precision = 10;
                    param_idParameter.Scale = 0;
                    if (param_id.HasValue)
                    {
                        param_idParameter.Value = param_id.Value;
                    }
                    else
                    {
                        param_idParameter.Size = -1;
                        param_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(param_idParameter);

                    DbParameter data_type_idParameter = cmd.CreateParameter();
                    data_type_idParameter.ParameterName = "data_type_id";
                    data_type_idParameter.Direction = ParameterDirection.Input;
                    data_type_idParameter.DbType = DbType.Int32;
                    data_type_idParameter.Precision = 10;
                    data_type_idParameter.Scale = 0;
                    if (data_type_id.HasValue)
                    {
                        data_type_idParameter.Value = data_type_id.Value;
                    }
                    else
                    {
                        data_type_idParameter.Size = -1;
                        data_type_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(data_type_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_GRID_SETTINGSResult row = new UI_SELECT_GRID_SETTINGSResult();
                            if (fieldNames.Contains("global_visible") && !reader.IsDBNull(reader.GetOrdinal("global_visible")))
                                row.global_visible = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"global_visible")), typeof(bool));
                            else
                                row.global_visible = null;

                            if (fieldNames.Contains("global_editable") && !reader.IsDBNull(reader.GetOrdinal("global_editable")))
                                row.global_editable = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"global_editable")), typeof(bool));
                            else
                                row.global_editable = null;

                            if (fieldNames.Contains("field_description") && !reader.IsDBNull(reader.GetOrdinal("field_description")))
                                row.field_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"field_description")), typeof(string));
                            else
                                row.field_description = null;

                            if (fieldNames.Contains("russian_field_description") && !reader.IsDBNull(reader.GetOrdinal("russian_field_description")))
                                row.russian_field_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"russian_field_description")), typeof(string));
                            else
                                row.russian_field_description = null;

                            if (fieldNames.Contains("is_visible") && !reader.IsDBNull(reader.GetOrdinal("is_visible")))
                                row.is_visible = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_visible")), typeof(bool));
                            else
                                row.is_visible = null;

                            if (fieldNames.Contains("width") && !reader.IsDBNull(reader.GetOrdinal("width")))
                                row.width = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"width")), typeof(int));
                            else
                                row.width = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(int));
                            else
                                row.number = null;

                            if (fieldNames.Contains("is_required") && !reader.IsDBNull(reader.GetOrdinal("is_required")))
                                row.is_required = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_required")), typeof(bool));
                            else
                                row.is_required = null;

                            if (fieldNames.Contains("ui_type") && !reader.IsDBNull(reader.GetOrdinal("ui_type")))
                                row.ui_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ui_type")), typeof(string));
                            else
                                row.ui_type = null;

                            if (fieldNames.Contains("dropdown") && !reader.IsDBNull(reader.GetOrdinal("dropdown")))
                                row.dropdown = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dropdown")), typeof(string));
                            else
                                row.dropdown = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_SELECT_GRID_SETTINGSResult>> UI_SELECT_GRID_SETTINGSAsync (System.Nullable<int> user_id, string stored_procedure, System.Nullable<int> param_id, System.Nullable<int> data_type_id)
        {

            List<UI_SELECT_GRID_SETTINGSResult> result = new List<UI_SELECT_GRID_SETTINGSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_GRID_SETTINGS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);

                    DbParameter param_idParameter = cmd.CreateParameter();
                    param_idParameter.ParameterName = "param_id";
                    param_idParameter.Direction = ParameterDirection.Input;
                    param_idParameter.DbType = DbType.Int32;
                    param_idParameter.Precision = 10;
                    param_idParameter.Scale = 0;
                    if (param_id.HasValue)
                    {
                        param_idParameter.Value = param_id.Value;
                    }
                    else
                    {
                        param_idParameter.Size = -1;
                        param_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(param_idParameter);

                    DbParameter data_type_idParameter = cmd.CreateParameter();
                    data_type_idParameter.ParameterName = "data_type_id";
                    data_type_idParameter.Direction = ParameterDirection.Input;
                    data_type_idParameter.DbType = DbType.Int32;
                    data_type_idParameter.Precision = 10;
                    data_type_idParameter.Scale = 0;
                    if (data_type_id.HasValue)
                    {
                        data_type_idParameter.Value = data_type_id.Value;
                    }
                    else
                    {
                        data_type_idParameter.Size = -1;
                        data_type_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(data_type_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_GRID_SETTINGSResult row = new UI_SELECT_GRID_SETTINGSResult();
                            if (fieldNames.Contains("global_visible") && !reader.IsDBNull(reader.GetOrdinal("global_visible")))
                                row.global_visible = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"global_visible")), typeof(bool));
                            else
                                row.global_visible = null;

                            if (fieldNames.Contains("global_editable") && !reader.IsDBNull(reader.GetOrdinal("global_editable")))
                                row.global_editable = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"global_editable")), typeof(bool));
                            else
                                row.global_editable = null;

                            if (fieldNames.Contains("field_description") && !reader.IsDBNull(reader.GetOrdinal("field_description")))
                                row.field_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"field_description")), typeof(string));
                            else
                                row.field_description = null;

                            if (fieldNames.Contains("russian_field_description") && !reader.IsDBNull(reader.GetOrdinal("russian_field_description")))
                                row.russian_field_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"russian_field_description")), typeof(string));
                            else
                                row.russian_field_description = null;

                            if (fieldNames.Contains("is_visible") && !reader.IsDBNull(reader.GetOrdinal("is_visible")))
                                row.is_visible = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_visible")), typeof(bool));
                            else
                                row.is_visible = null;

                            if (fieldNames.Contains("width") && !reader.IsDBNull(reader.GetOrdinal("width")))
                                row.width = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"width")), typeof(int));
                            else
                                row.width = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(int));
                            else
                                row.number = null;

                            if (fieldNames.Contains("is_required") && !reader.IsDBNull(reader.GetOrdinal("is_required")))
                                row.is_required = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_required")), typeof(bool));
                            else
                                row.is_required = null;

                            if (fieldNames.Contains("ui_type") && !reader.IsDBNull(reader.GetOrdinal("ui_type")))
                                row.ui_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ui_type")), typeof(string));
                            else
                                row.ui_type = null;

                            if (fieldNames.Contains("dropdown") && !reader.IsDBNull(reader.GetOrdinal("dropdown")))
                                row.dropdown = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dropdown")), typeof(string));
                            else
                                row.dropdown = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECT_LIST_INFO2Result> APL_SELECT_PROJECT_LIST_INFO2 (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> id, System.Nullable<bool> hide_closed, System.Nullable<bool> show_mine)
        {

            List<APL_SELECT_PROJECT_LIST_INFO2Result> result = new List<APL_SELECT_PROJECT_LIST_INFO2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_LIST_INFO2";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter hide_closedParameter = cmd.CreateParameter();
                    hide_closedParameter.ParameterName = "hide_closed";
                    hide_closedParameter.Direction = ParameterDirection.Input;
                    hide_closedParameter.DbType = DbType.Boolean;
                    if (hide_closed.HasValue)
                    {
                        hide_closedParameter.Value = hide_closed.Value;
                    }
                    else
                    {
                        hide_closedParameter.Size = -1;
                        hide_closedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(hide_closedParameter);

                    DbParameter show_mineParameter = cmd.CreateParameter();
                    show_mineParameter.ParameterName = "show_mine";
                    show_mineParameter.Direction = ParameterDirection.Input;
                    show_mineParameter.DbType = DbType.Boolean;
                    if (show_mine.HasValue)
                    {
                        show_mineParameter.Value = show_mine.Value;
                    }
                    else
                    {
                        show_mineParameter.Size = -1;
                        show_mineParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_mineParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_LIST_INFO2Result row = new APL_SELECT_PROJECT_LIST_INFO2Result();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("project_short_description") && !reader.IsDBNull(reader.GetOrdinal("project_short_description")))
                                row.project_short_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_short_description")), typeof(string));
                            else
                                row.project_short_description = null;

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("project_type_id") && !reader.IsDBNull(reader.GetOrdinal("project_type_id")))
                                row.project_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_type_id")), typeof(int));

                            if (fieldNames.Contains("project_type") && !reader.IsDBNull(reader.GetOrdinal("project_type")))
                                row.project_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_type")), typeof(string));
                            else
                                row.project_type = null;

                            if (fieldNames.Contains("project_state_id") && !reader.IsDBNull(reader.GetOrdinal("project_state_id")))
                                row.project_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_state_id")), typeof(int));

                            if (fieldNames.Contains("project_state") && !reader.IsDBNull(reader.GetOrdinal("project_state")))
                                row.project_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_state")), typeof(string));
                            else
                                row.project_state = null;

                            if (fieldNames.Contains("logistical_network_objects") && !reader.IsDBNull(reader.GetOrdinal("logistical_network_objects")))
                                row.logistical_network_objects = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"logistical_network_objects")), typeof(string));
                            else
                                row.logistical_network_objects = null;

                            if (fieldNames.Contains("subcontractors") && !reader.IsDBNull(reader.GetOrdinal("subcontractors")))
                                row.subcontractors = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractors")), typeof(string));
                            else
                                row.subcontractors = null;

                            if (fieldNames.Contains("customer_id") && !reader.IsDBNull(reader.GetOrdinal("customer_id")))
                                row.customer_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customer_id")), typeof(int));
                            else
                                row.customer_id = null;

                            if (fieldNames.Contains("customer") && !reader.IsDBNull(reader.GetOrdinal("customer")))
                                row.customer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customer")), typeof(string));
                            else
                                row.customer = null;

                            if (fieldNames.Contains("designer_id") && !reader.IsDBNull(reader.GetOrdinal("designer_id")))
                                row.designer_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"designer_id")), typeof(int));
                            else
                                row.designer_id = null;

                            if (fieldNames.Contains("designer") && !reader.IsDBNull(reader.GetOrdinal("designer")))
                                row.designer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"designer")), typeof(string));
                            else
                                row.designer = null;

                            if (fieldNames.Contains("start") && !reader.IsDBNull(reader.GetOrdinal("start")))
                                row.start = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start")), typeof(double));
                            else
                                row.start = null;

                            if (fieldNames.Contains("finish") && !reader.IsDBNull(reader.GetOrdinal("finish")))
                                row.finish = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish")), typeof(double));
                            else
                                row.finish = null;

                            if (fieldNames.Contains("year1") && !reader.IsDBNull(reader.GetOrdinal("year1")))
                                row.year1 = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"year1")), typeof(int));
                            else
                                row.year1 = null;

                            if (fieldNames.Contains("year2") && !reader.IsDBNull(reader.GetOrdinal("year2")))
                                row.year2 = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"year2")), typeof(int));
                            else
                                row.year2 = null;

                            if (fieldNames.Contains("finish_date") && !reader.IsDBNull(reader.GetOrdinal("finish_date")))
                                row.finish_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish_date")), typeof(System.DateTime));
                            else
                                row.finish_date = null;

                            if (fieldNames.Contains("build_curator_id") && !reader.IsDBNull(reader.GetOrdinal("build_curator_id")))
                                row.build_curator_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_curator_id")), typeof(int));
                            else
                                row.build_curator_id = null;

                            if (fieldNames.Contains("build_curator") && !reader.IsDBNull(reader.GetOrdinal("build_curator")))
                                row.build_curator = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_curator")), typeof(string));
                            else
                                row.build_curator = null;

                            if (fieldNames.Contains("build_curator_list_id") && !reader.IsDBNull(reader.GetOrdinal("build_curator_list_id")))
                                row.build_curator_list_id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_curator_list_id")), typeof(string));
                            else
                                row.build_curator_list_id = null;

                            if (fieldNames.Contains("build_curator_list") && !reader.IsDBNull(reader.GetOrdinal("build_curator_list")))
                                row.build_curator_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_curator_list")), typeof(string));
                            else
                                row.build_curator_list = null;

                            if (fieldNames.Contains("package_curator_id") && !reader.IsDBNull(reader.GetOrdinal("package_curator_id")))
                                row.package_curator_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_curator_id")), typeof(int));
                            else
                                row.package_curator_id = null;

                            if (fieldNames.Contains("package_curator") && !reader.IsDBNull(reader.GetOrdinal("package_curator")))
                                row.package_curator = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_curator")), typeof(string));
                            else
                                row.package_curator = null;

                            if (fieldNames.Contains("supply_curator_id") && !reader.IsDBNull(reader.GetOrdinal("supply_curator_id")))
                                row.supply_curator_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_curator_id")), typeof(int));
                            else
                                row.supply_curator_id = null;

                            if (fieldNames.Contains("supply_curator") && !reader.IsDBNull(reader.GetOrdinal("supply_curator")))
                                row.supply_curator = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_curator")), typeof(string));
                            else
                                row.supply_curator = null;

                            if (fieldNames.Contains("supply_curator_list_id") && !reader.IsDBNull(reader.GetOrdinal("supply_curator_list_id")))
                                row.supply_curator_list_id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_curator_list_id")), typeof(string));
                            else
                                row.supply_curator_list_id = null;

                            if (fieldNames.Contains("supply_curator_list") && !reader.IsDBNull(reader.GetOrdinal("supply_curator_list")))
                                row.supply_curator_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_curator_list")), typeof(string));
                            else
                                row.supply_curator_list = null;

                            if (fieldNames.Contains("deliveryplan_curator_list_id") && !reader.IsDBNull(reader.GetOrdinal("deliveryplan_curator_list_id")))
                                row.deliveryplan_curator_list_id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"deliveryplan_curator_list_id")), typeof(string));
                            else
                                row.deliveryplan_curator_list_id = null;

                            if (fieldNames.Contains("deliveryplan_curator_list") && !reader.IsDBNull(reader.GetOrdinal("deliveryplan_curator_list")))
                                row.deliveryplan_curator_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"deliveryplan_curator_list")), typeof(string));
                            else
                                row.deliveryplan_curator_list = null;

                            if (fieldNames.Contains("project_curator_id") && !reader.IsDBNull(reader.GetOrdinal("project_curator_id")))
                                row.project_curator_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_curator_id")), typeof(int));
                            else
                                row.project_curator_id = null;

                            if (fieldNames.Contains("project_curator") && !reader.IsDBNull(reader.GetOrdinal("project_curator")))
                                row.project_curator = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_curator")), typeof(string));
                            else
                                row.project_curator = null;

                            if (fieldNames.Contains("stocks_curator_id") && !reader.IsDBNull(reader.GetOrdinal("stocks_curator_id")))
                                row.stocks_curator_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stocks_curator_id")), typeof(int));
                            else
                                row.stocks_curator_id = null;

                            if (fieldNames.Contains("stocks_curator") && !reader.IsDBNull(reader.GetOrdinal("stocks_curator")))
                                row.stocks_curator = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stocks_curator")), typeof(string));
                            else
                                row.stocks_curator = null;

                            if (fieldNames.Contains("normative_delivery_time") && !reader.IsDBNull(reader.GetOrdinal("normative_delivery_time")))
                                row.normative_delivery_time = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"normative_delivery_time")), typeof(int));
                            else
                                row.normative_delivery_time = null;

                            if (fieldNames.Contains("storage_contract") && !reader.IsDBNull(reader.GetOrdinal("storage_contract")))
                                row.storage_contract = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"storage_contract")), typeof(string));
                            else
                                row.storage_contract = null;

                            if (fieldNames.Contains("storage_contract_finish_date") && !reader.IsDBNull(reader.GetOrdinal("storage_contract_finish_date")))
                                row.storage_contract_finish_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"storage_contract_finish_date")), typeof(System.DateTime));
                            else
                                row.storage_contract_finish_date = null;

                            if (fieldNames.Contains("build_start_date") && !reader.IsDBNull(reader.GetOrdinal("build_start_date")))
                                row.build_start_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_start_date")), typeof(System.DateTime));
                            else
                                row.build_start_date = null;

                            if (fieldNames.Contains("build_finish_date") && !reader.IsDBNull(reader.GetOrdinal("build_finish_date")))
                                row.build_finish_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_finish_date")), typeof(System.DateTime));
                            else
                                row.build_finish_date = null;

                            if (fieldNames.Contains("non_project_supplier_approve_required") && !reader.IsDBNull(reader.GetOrdinal("non_project_supplier_approve_required")))
                                row.non_project_supplier_approve_required = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"non_project_supplier_approve_required")), typeof(bool));
                            else
                                row.non_project_supplier_approve_required = null;

                            if (fieldNames.Contains("rss_match_type_id") && !reader.IsDBNull(reader.GetOrdinal("rss_match_type_id")))
                                row.rss_match_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"rss_match_type_id")), typeof(int));
                            else
                                row.rss_match_type_id = null;

                            if (fieldNames.Contains("rss_match_type") && !reader.IsDBNull(reader.GetOrdinal("rss_match_type")))
                                row.rss_match_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"rss_match_type")), typeof(string));
                            else
                                row.rss_match_type = null;

                            if (fieldNames.Contains("tpsu_division_id") && !reader.IsDBNull(reader.GetOrdinal("tpsu_division_id")))
                                row.tpsu_division_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tpsu_division_id")), typeof(int));
                            else
                                row.tpsu_division_id = null;

                            if (fieldNames.Contains("tpsu_division") && !reader.IsDBNull(reader.GetOrdinal("tpsu_division")))
                                row.tpsu_division = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tpsu_division")), typeof(string));
                            else
                                row.tpsu_division = null;

                            if (fieldNames.Contains("subcontractor_info_list_id") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_info_list_id")))
                                row.subcontractor_info_list_id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_info_list_id")), typeof(string));
                            else
                                row.subcontractor_info_list_id = null;

                            if (fieldNames.Contains("subcontractor_info_list") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_info_list")))
                                row.subcontractor_info_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_info_list")), typeof(string));
                            else
                                row.subcontractor_info_list = null;

                            if (fieldNames.Contains("is_documentation_percent") && !reader.IsDBNull(reader.GetOrdinal("is_documentation_percent")))
                                row.is_documentation_percent = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_documentation_percent")), typeof(string));

                            if (fieldNames.Contains("is_documentation") && !reader.IsDBNull(reader.GetOrdinal("is_documentation")))
                                row.is_documentation = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_documentation")), typeof(string));

                            if (fieldNames.Contains("is_change_documentation_percent") && !reader.IsDBNull(reader.GetOrdinal("is_change_documentation_percent")))
                                row.is_change_documentation_percent = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_change_documentation_percent")), typeof(string));

                            if (fieldNames.Contains("is_change_documentation") && !reader.IsDBNull(reader.GetOrdinal("is_change_documentation")))
                                row.is_change_documentation = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_change_documentation")), typeof(string));

                            if (fieldNames.Contains("total_sum_gk") && !reader.IsDBNull(reader.GetOrdinal("total_sum_gk")))
                                row.total_sum_gk = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_sum_gk")), typeof(string));
                            else
                                row.total_sum_gk = null;

                            if (fieldNames.Contains("total_sum_direct") && !reader.IsDBNull(reader.GetOrdinal("total_sum_direct")))
                                row.total_sum_direct = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_sum_direct")), typeof(string));
                            else
                                row.total_sum_direct = null;

                            if (fieldNames.Contains("advance_info") && !reader.IsDBNull(reader.GetOrdinal("advance_info")))
                                row.advance_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"advance_info")), typeof(string));
                            else
                                row.advance_info = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_LIST_INFO2Result>> APL_SELECT_PROJECT_LIST_INFO2Async (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> id, System.Nullable<bool> hide_closed, System.Nullable<bool> show_mine)
        {

            List<APL_SELECT_PROJECT_LIST_INFO2Result> result = new List<APL_SELECT_PROJECT_LIST_INFO2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_LIST_INFO2";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter hide_closedParameter = cmd.CreateParameter();
                    hide_closedParameter.ParameterName = "hide_closed";
                    hide_closedParameter.Direction = ParameterDirection.Input;
                    hide_closedParameter.DbType = DbType.Boolean;
                    if (hide_closed.HasValue)
                    {
                        hide_closedParameter.Value = hide_closed.Value;
                    }
                    else
                    {
                        hide_closedParameter.Size = -1;
                        hide_closedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(hide_closedParameter);

                    DbParameter show_mineParameter = cmd.CreateParameter();
                    show_mineParameter.ParameterName = "show_mine";
                    show_mineParameter.Direction = ParameterDirection.Input;
                    show_mineParameter.DbType = DbType.Boolean;
                    if (show_mine.HasValue)
                    {
                        show_mineParameter.Value = show_mine.Value;
                    }
                    else
                    {
                        show_mineParameter.Size = -1;
                        show_mineParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_mineParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_LIST_INFO2Result row = new APL_SELECT_PROJECT_LIST_INFO2Result();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("project_short_description") && !reader.IsDBNull(reader.GetOrdinal("project_short_description")))
                                row.project_short_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_short_description")), typeof(string));
                            else
                                row.project_short_description = null;

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("project_type_id") && !reader.IsDBNull(reader.GetOrdinal("project_type_id")))
                                row.project_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_type_id")), typeof(int));

                            if (fieldNames.Contains("project_type") && !reader.IsDBNull(reader.GetOrdinal("project_type")))
                                row.project_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_type")), typeof(string));
                            else
                                row.project_type = null;

                            if (fieldNames.Contains("project_state_id") && !reader.IsDBNull(reader.GetOrdinal("project_state_id")))
                                row.project_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_state_id")), typeof(int));

                            if (fieldNames.Contains("project_state") && !reader.IsDBNull(reader.GetOrdinal("project_state")))
                                row.project_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_state")), typeof(string));
                            else
                                row.project_state = null;

                            if (fieldNames.Contains("logistical_network_objects") && !reader.IsDBNull(reader.GetOrdinal("logistical_network_objects")))
                                row.logistical_network_objects = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"logistical_network_objects")), typeof(string));
                            else
                                row.logistical_network_objects = null;

                            if (fieldNames.Contains("subcontractors") && !reader.IsDBNull(reader.GetOrdinal("subcontractors")))
                                row.subcontractors = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractors")), typeof(string));
                            else
                                row.subcontractors = null;

                            if (fieldNames.Contains("customer_id") && !reader.IsDBNull(reader.GetOrdinal("customer_id")))
                                row.customer_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customer_id")), typeof(int));
                            else
                                row.customer_id = null;

                            if (fieldNames.Contains("customer") && !reader.IsDBNull(reader.GetOrdinal("customer")))
                                row.customer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customer")), typeof(string));
                            else
                                row.customer = null;

                            if (fieldNames.Contains("designer_id") && !reader.IsDBNull(reader.GetOrdinal("designer_id")))
                                row.designer_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"designer_id")), typeof(int));
                            else
                                row.designer_id = null;

                            if (fieldNames.Contains("designer") && !reader.IsDBNull(reader.GetOrdinal("designer")))
                                row.designer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"designer")), typeof(string));
                            else
                                row.designer = null;

                            if (fieldNames.Contains("start") && !reader.IsDBNull(reader.GetOrdinal("start")))
                                row.start = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start")), typeof(double));
                            else
                                row.start = null;

                            if (fieldNames.Contains("finish") && !reader.IsDBNull(reader.GetOrdinal("finish")))
                                row.finish = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish")), typeof(double));
                            else
                                row.finish = null;

                            if (fieldNames.Contains("year1") && !reader.IsDBNull(reader.GetOrdinal("year1")))
                                row.year1 = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"year1")), typeof(int));
                            else
                                row.year1 = null;

                            if (fieldNames.Contains("year2") && !reader.IsDBNull(reader.GetOrdinal("year2")))
                                row.year2 = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"year2")), typeof(int));
                            else
                                row.year2 = null;

                            if (fieldNames.Contains("finish_date") && !reader.IsDBNull(reader.GetOrdinal("finish_date")))
                                row.finish_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish_date")), typeof(System.DateTime));
                            else
                                row.finish_date = null;

                            if (fieldNames.Contains("build_curator_id") && !reader.IsDBNull(reader.GetOrdinal("build_curator_id")))
                                row.build_curator_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_curator_id")), typeof(int));
                            else
                                row.build_curator_id = null;

                            if (fieldNames.Contains("build_curator") && !reader.IsDBNull(reader.GetOrdinal("build_curator")))
                                row.build_curator = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_curator")), typeof(string));
                            else
                                row.build_curator = null;

                            if (fieldNames.Contains("build_curator_list_id") && !reader.IsDBNull(reader.GetOrdinal("build_curator_list_id")))
                                row.build_curator_list_id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_curator_list_id")), typeof(string));
                            else
                                row.build_curator_list_id = null;

                            if (fieldNames.Contains("build_curator_list") && !reader.IsDBNull(reader.GetOrdinal("build_curator_list")))
                                row.build_curator_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_curator_list")), typeof(string));
                            else
                                row.build_curator_list = null;

                            if (fieldNames.Contains("package_curator_id") && !reader.IsDBNull(reader.GetOrdinal("package_curator_id")))
                                row.package_curator_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_curator_id")), typeof(int));
                            else
                                row.package_curator_id = null;

                            if (fieldNames.Contains("package_curator") && !reader.IsDBNull(reader.GetOrdinal("package_curator")))
                                row.package_curator = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_curator")), typeof(string));
                            else
                                row.package_curator = null;

                            if (fieldNames.Contains("supply_curator_id") && !reader.IsDBNull(reader.GetOrdinal("supply_curator_id")))
                                row.supply_curator_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_curator_id")), typeof(int));
                            else
                                row.supply_curator_id = null;

                            if (fieldNames.Contains("supply_curator") && !reader.IsDBNull(reader.GetOrdinal("supply_curator")))
                                row.supply_curator = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_curator")), typeof(string));
                            else
                                row.supply_curator = null;

                            if (fieldNames.Contains("supply_curator_list_id") && !reader.IsDBNull(reader.GetOrdinal("supply_curator_list_id")))
                                row.supply_curator_list_id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_curator_list_id")), typeof(string));
                            else
                                row.supply_curator_list_id = null;

                            if (fieldNames.Contains("supply_curator_list") && !reader.IsDBNull(reader.GetOrdinal("supply_curator_list")))
                                row.supply_curator_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_curator_list")), typeof(string));
                            else
                                row.supply_curator_list = null;

                            if (fieldNames.Contains("deliveryplan_curator_list_id") && !reader.IsDBNull(reader.GetOrdinal("deliveryplan_curator_list_id")))
                                row.deliveryplan_curator_list_id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"deliveryplan_curator_list_id")), typeof(string));
                            else
                                row.deliveryplan_curator_list_id = null;

                            if (fieldNames.Contains("deliveryplan_curator_list") && !reader.IsDBNull(reader.GetOrdinal("deliveryplan_curator_list")))
                                row.deliveryplan_curator_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"deliveryplan_curator_list")), typeof(string));
                            else
                                row.deliveryplan_curator_list = null;

                            if (fieldNames.Contains("project_curator_id") && !reader.IsDBNull(reader.GetOrdinal("project_curator_id")))
                                row.project_curator_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_curator_id")), typeof(int));
                            else
                                row.project_curator_id = null;

                            if (fieldNames.Contains("project_curator") && !reader.IsDBNull(reader.GetOrdinal("project_curator")))
                                row.project_curator = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_curator")), typeof(string));
                            else
                                row.project_curator = null;

                            if (fieldNames.Contains("stocks_curator_id") && !reader.IsDBNull(reader.GetOrdinal("stocks_curator_id")))
                                row.stocks_curator_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stocks_curator_id")), typeof(int));
                            else
                                row.stocks_curator_id = null;

                            if (fieldNames.Contains("stocks_curator") && !reader.IsDBNull(reader.GetOrdinal("stocks_curator")))
                                row.stocks_curator = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stocks_curator")), typeof(string));
                            else
                                row.stocks_curator = null;

                            if (fieldNames.Contains("normative_delivery_time") && !reader.IsDBNull(reader.GetOrdinal("normative_delivery_time")))
                                row.normative_delivery_time = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"normative_delivery_time")), typeof(int));
                            else
                                row.normative_delivery_time = null;

                            if (fieldNames.Contains("storage_contract") && !reader.IsDBNull(reader.GetOrdinal("storage_contract")))
                                row.storage_contract = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"storage_contract")), typeof(string));
                            else
                                row.storage_contract = null;

                            if (fieldNames.Contains("storage_contract_finish_date") && !reader.IsDBNull(reader.GetOrdinal("storage_contract_finish_date")))
                                row.storage_contract_finish_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"storage_contract_finish_date")), typeof(System.DateTime));
                            else
                                row.storage_contract_finish_date = null;

                            if (fieldNames.Contains("build_start_date") && !reader.IsDBNull(reader.GetOrdinal("build_start_date")))
                                row.build_start_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_start_date")), typeof(System.DateTime));
                            else
                                row.build_start_date = null;

                            if (fieldNames.Contains("build_finish_date") && !reader.IsDBNull(reader.GetOrdinal("build_finish_date")))
                                row.build_finish_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_finish_date")), typeof(System.DateTime));
                            else
                                row.build_finish_date = null;

                            if (fieldNames.Contains("non_project_supplier_approve_required") && !reader.IsDBNull(reader.GetOrdinal("non_project_supplier_approve_required")))
                                row.non_project_supplier_approve_required = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"non_project_supplier_approve_required")), typeof(bool));
                            else
                                row.non_project_supplier_approve_required = null;

                            if (fieldNames.Contains("rss_match_type_id") && !reader.IsDBNull(reader.GetOrdinal("rss_match_type_id")))
                                row.rss_match_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"rss_match_type_id")), typeof(int));
                            else
                                row.rss_match_type_id = null;

                            if (fieldNames.Contains("rss_match_type") && !reader.IsDBNull(reader.GetOrdinal("rss_match_type")))
                                row.rss_match_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"rss_match_type")), typeof(string));
                            else
                                row.rss_match_type = null;

                            if (fieldNames.Contains("tpsu_division_id") && !reader.IsDBNull(reader.GetOrdinal("tpsu_division_id")))
                                row.tpsu_division_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tpsu_division_id")), typeof(int));
                            else
                                row.tpsu_division_id = null;

                            if (fieldNames.Contains("tpsu_division") && !reader.IsDBNull(reader.GetOrdinal("tpsu_division")))
                                row.tpsu_division = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tpsu_division")), typeof(string));
                            else
                                row.tpsu_division = null;

                            if (fieldNames.Contains("subcontractor_info_list_id") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_info_list_id")))
                                row.subcontractor_info_list_id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_info_list_id")), typeof(string));
                            else
                                row.subcontractor_info_list_id = null;

                            if (fieldNames.Contains("subcontractor_info_list") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_info_list")))
                                row.subcontractor_info_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_info_list")), typeof(string));
                            else
                                row.subcontractor_info_list = null;

                            if (fieldNames.Contains("is_documentation_percent") && !reader.IsDBNull(reader.GetOrdinal("is_documentation_percent")))
                                row.is_documentation_percent = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_documentation_percent")), typeof(string));

                            if (fieldNames.Contains("is_documentation") && !reader.IsDBNull(reader.GetOrdinal("is_documentation")))
                                row.is_documentation = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_documentation")), typeof(string));

                            if (fieldNames.Contains("is_change_documentation_percent") && !reader.IsDBNull(reader.GetOrdinal("is_change_documentation_percent")))
                                row.is_change_documentation_percent = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_change_documentation_percent")), typeof(string));

                            if (fieldNames.Contains("is_change_documentation") && !reader.IsDBNull(reader.GetOrdinal("is_change_documentation")))
                                row.is_change_documentation = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_change_documentation")), typeof(string));

                            if (fieldNames.Contains("total_sum_gk") && !reader.IsDBNull(reader.GetOrdinal("total_sum_gk")))
                                row.total_sum_gk = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_sum_gk")), typeof(string));
                            else
                                row.total_sum_gk = null;

                            if (fieldNames.Contains("total_sum_direct") && !reader.IsDBNull(reader.GetOrdinal("total_sum_direct")))
                                row.total_sum_direct = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_sum_direct")), typeof(string));
                            else
                                row.total_sum_direct = null;

                            if (fieldNames.Contains("advance_info") && !reader.IsDBNull(reader.GetOrdinal("advance_info")))
                                row.advance_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"advance_info")), typeof(string));
                            else
                                row.advance_info = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_GET_ACTION_ROLEResult> UI_GET_ACTION_ROLE (string url, string action, System.Nullable<int> user_id, string param)
        {

            List<UI_GET_ACTION_ROLEResult> result = new List<UI_GET_ACTION_ROLEResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_GET_ACTION_ROLE";

                    DbParameter urlParameter = cmd.CreateParameter();
                    urlParameter.ParameterName = "url";
                    urlParameter.Direction = ParameterDirection.Input;
                    urlParameter.DbType = DbType.String;
                    urlParameter.Size = 510;
                    if (url != null)
                    {
                        urlParameter.Value = url;
                    }
                    else
                    {
                        urlParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(urlParameter);

                    DbParameter actionParameter = cmd.CreateParameter();
                    actionParameter.ParameterName = "action";
                    actionParameter.Direction = ParameterDirection.Input;
                    actionParameter.DbType = DbType.String;
                    actionParameter.Size = 510;
                    if (action != null)
                    {
                        actionParameter.Value = action;
                    }
                    else
                    {
                        actionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(actionParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter paramParameter = cmd.CreateParameter();
                    paramParameter.ParameterName = "param";
                    paramParameter.Direction = ParameterDirection.Input;
                    paramParameter.DbType = DbType.String;
                    if (param != null)
                    {
                        paramParameter.Value = param;
                    }
                    else
                    {
                        paramParameter.Size = -1;
                        paramParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(paramParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_GET_ACTION_ROLEResult row = new UI_GET_ACTION_ROLEResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.column0 = (bool)Convert.ChangeType(reader.GetValue(0), typeof(bool));
                            else
                            if (fieldNames.Contains("column0") && !reader.IsDBNull(reader.GetOrdinal("column0")))
                                row.column0 = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"column0")), typeof(bool));
                            else
                                row.column0 = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_GET_ACTION_ROLEResult>> UI_GET_ACTION_ROLEAsync (string url, string action, System.Nullable<int> user_id, string param)
        {

            List<UI_GET_ACTION_ROLEResult> result = new List<UI_GET_ACTION_ROLEResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_GET_ACTION_ROLE";

                    DbParameter urlParameter = cmd.CreateParameter();
                    urlParameter.ParameterName = "url";
                    urlParameter.Direction = ParameterDirection.Input;
                    urlParameter.DbType = DbType.String;
                    urlParameter.Size = 510;
                    if (url != null)
                    {
                        urlParameter.Value = url;
                    }
                    else
                    {
                        urlParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(urlParameter);

                    DbParameter actionParameter = cmd.CreateParameter();
                    actionParameter.ParameterName = "action";
                    actionParameter.Direction = ParameterDirection.Input;
                    actionParameter.DbType = DbType.String;
                    actionParameter.Size = 510;
                    if (action != null)
                    {
                        actionParameter.Value = action;
                    }
                    else
                    {
                        actionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(actionParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter paramParameter = cmd.CreateParameter();
                    paramParameter.ParameterName = "param";
                    paramParameter.Direction = ParameterDirection.Input;
                    paramParameter.DbType = DbType.String;
                    if (param != null)
                    {
                        paramParameter.Value = param;
                    }
                    else
                    {
                        paramParameter.Size = -1;
                        paramParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(paramParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_GET_ACTION_ROLEResult row = new UI_GET_ACTION_ROLEResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.column0 = (bool)Convert.ChangeType(reader.GetValue(0), typeof(bool));
                            else
                            if (fieldNames.Contains("column0") && !reader.IsDBNull(reader.GetOrdinal("column0")))
                                row.column0 = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"column0")), typeof(bool));
                            else
                                row.column0 = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> APL_UPDATE_PROJECT2 (System.Nullable<int> id, string project_description, string project_short_description, System.Nullable<int> project_type_id, System.Nullable<int> project_state_id, System.Nullable<int> customer_id, System.Nullable<int> designer_id, System.Nullable<int> normative_delivery_time, System.Nullable<double> start, System.Nullable<double> finish, System.Nullable<int> year1, System.Nullable<int> year2, System.Nullable<System.DateTime> finish_date, System.Nullable<int> build_curator_id, string build_curator_list_id, System.Nullable<int> package_curator_id, System.Nullable<int> supply_curator_id, string supply_curator_list_id, string deliveryplan_curator_list_id, System.Nullable<int> project_curator_id, System.Nullable<int> stocks_curator_id, string storage_contract, System.Nullable<System.DateTime> storage_contract_finish_date, System.Nullable<bool> non_project_supplier_approve_required, System.Nullable<int> rss_match_type_id, System.Nullable<int> tpsu_division_id, string subcontractor_info_list_id, string is_documentation_percent, string is_documentation, string is_change_documentation_percent, string is_change_documentation, System.Nullable<double> total_sum_gk, System.Nullable<double> total_sum_direct, System.Nullable<double> advance_info, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_PROJECT2";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter project_descriptionParameter = cmd.CreateParameter();
                    project_descriptionParameter.ParameterName = "project_description";
                    project_descriptionParameter.Direction = ParameterDirection.Input;
                    project_descriptionParameter.DbType = DbType.String;
                    if (project_description != null)
                    {
                        project_descriptionParameter.Value = project_description;
                    }
                    else
                    {
                        project_descriptionParameter.Size = -1;
                        project_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_descriptionParameter);

                    DbParameter project_short_descriptionParameter = cmd.CreateParameter();
                    project_short_descriptionParameter.ParameterName = "project_short_description";
                    project_short_descriptionParameter.Direction = ParameterDirection.Input;
                    project_short_descriptionParameter.DbType = DbType.String;
                    project_short_descriptionParameter.Size = 510;
                    if (project_short_description != null)
                    {
                        project_short_descriptionParameter.Value = project_short_description;
                    }
                    else
                    {
                        project_short_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_short_descriptionParameter);

                    DbParameter project_type_idParameter = cmd.CreateParameter();
                    project_type_idParameter.ParameterName = "project_type_id";
                    project_type_idParameter.Direction = ParameterDirection.Input;
                    project_type_idParameter.DbType = DbType.Int32;
                    project_type_idParameter.Precision = 10;
                    project_type_idParameter.Scale = 0;
                    if (project_type_id.HasValue)
                    {
                        project_type_idParameter.Value = project_type_id.Value;
                    }
                    else
                    {
                        project_type_idParameter.Size = -1;
                        project_type_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_type_idParameter);

                    DbParameter project_state_idParameter = cmd.CreateParameter();
                    project_state_idParameter.ParameterName = "project_state_id";
                    project_state_idParameter.Direction = ParameterDirection.Input;
                    project_state_idParameter.DbType = DbType.Int32;
                    project_state_idParameter.Precision = 10;
                    project_state_idParameter.Scale = 0;
                    if (project_state_id.HasValue)
                    {
                        project_state_idParameter.Value = project_state_id.Value;
                    }
                    else
                    {
                        project_state_idParameter.Size = -1;
                        project_state_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_state_idParameter);

                    DbParameter customer_idParameter = cmd.CreateParameter();
                    customer_idParameter.ParameterName = "customer_id";
                    customer_idParameter.Direction = ParameterDirection.Input;
                    customer_idParameter.DbType = DbType.Int32;
                    customer_idParameter.Precision = 10;
                    customer_idParameter.Scale = 0;
                    if (customer_id.HasValue)
                    {
                        customer_idParameter.Value = customer_id.Value;
                    }
                    else
                    {
                        customer_idParameter.Size = -1;
                        customer_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(customer_idParameter);

                    DbParameter designer_idParameter = cmd.CreateParameter();
                    designer_idParameter.ParameterName = "designer_id";
                    designer_idParameter.Direction = ParameterDirection.Input;
                    designer_idParameter.DbType = DbType.Int32;
                    designer_idParameter.Precision = 10;
                    designer_idParameter.Scale = 0;
                    if (designer_id.HasValue)
                    {
                        designer_idParameter.Value = designer_id.Value;
                    }
                    else
                    {
                        designer_idParameter.Size = -1;
                        designer_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(designer_idParameter);

                    DbParameter normative_delivery_timeParameter = cmd.CreateParameter();
                    normative_delivery_timeParameter.ParameterName = "normative_delivery_time";
                    normative_delivery_timeParameter.Direction = ParameterDirection.Input;
                    normative_delivery_timeParameter.DbType = DbType.Int32;
                    normative_delivery_timeParameter.Precision = 10;
                    normative_delivery_timeParameter.Scale = 0;
                    if (normative_delivery_time.HasValue)
                    {
                        normative_delivery_timeParameter.Value = normative_delivery_time.Value;
                    }
                    else
                    {
                        normative_delivery_timeParameter.Size = -1;
                        normative_delivery_timeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(normative_delivery_timeParameter);

                    DbParameter startParameter = cmd.CreateParameter();
                    startParameter.ParameterName = "start";
                    startParameter.Direction = ParameterDirection.Input;
                    startParameter.DbType = DbType.Double;
                    startParameter.Precision = 53;
                    if (start.HasValue)
                    {
                        startParameter.Value = start.Value;
                    }
                    else
                    {
                        startParameter.Size = -1;
                        startParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startParameter);

                    DbParameter finishParameter = cmd.CreateParameter();
                    finishParameter.ParameterName = "finish";
                    finishParameter.Direction = ParameterDirection.Input;
                    finishParameter.DbType = DbType.Double;
                    finishParameter.Precision = 53;
                    if (finish.HasValue)
                    {
                        finishParameter.Value = finish.Value;
                    }
                    else
                    {
                        finishParameter.Size = -1;
                        finishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finishParameter);

                    DbParameter year1Parameter = cmd.CreateParameter();
                    year1Parameter.ParameterName = "year1";
                    year1Parameter.Direction = ParameterDirection.Input;
                    year1Parameter.DbType = DbType.Int32;
                    year1Parameter.Precision = 10;
                    year1Parameter.Scale = 0;
                    if (year1.HasValue)
                    {
                        year1Parameter.Value = year1.Value;
                    }
                    else
                    {
                        year1Parameter.Size = -1;
                        year1Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(year1Parameter);

                    DbParameter year2Parameter = cmd.CreateParameter();
                    year2Parameter.ParameterName = "year2";
                    year2Parameter.Direction = ParameterDirection.Input;
                    year2Parameter.DbType = DbType.Int32;
                    year2Parameter.Precision = 10;
                    year2Parameter.Scale = 0;
                    if (year2.HasValue)
                    {
                        year2Parameter.Value = year2.Value;
                    }
                    else
                    {
                        year2Parameter.Size = -1;
                        year2Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(year2Parameter);

                    DbParameter finish_dateParameter = cmd.CreateParameter();
                    finish_dateParameter.ParameterName = "finish_date";
                    finish_dateParameter.Direction = ParameterDirection.Input;
                    finish_dateParameter.DbType = DbType.DateTime;
                    if (finish_date.HasValue)
                    {
                        finish_dateParameter.Value = finish_date.Value;
                    }
                    else
                    {
                        finish_dateParameter.Size = -1;
                        finish_dateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finish_dateParameter);

                    DbParameter build_curator_idParameter = cmd.CreateParameter();
                    build_curator_idParameter.ParameterName = "build_curator_id";
                    build_curator_idParameter.Direction = ParameterDirection.Input;
                    build_curator_idParameter.DbType = DbType.Int32;
                    build_curator_idParameter.Precision = 10;
                    build_curator_idParameter.Scale = 0;
                    if (build_curator_id.HasValue)
                    {
                        build_curator_idParameter.Value = build_curator_id.Value;
                    }
                    else
                    {
                        build_curator_idParameter.Size = -1;
                        build_curator_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(build_curator_idParameter);

                    DbParameter build_curator_list_idParameter = cmd.CreateParameter();
                    build_curator_list_idParameter.ParameterName = "build_curator_list_id";
                    build_curator_list_idParameter.Direction = ParameterDirection.Input;
                    build_curator_list_idParameter.DbType = DbType.String;
                    if (build_curator_list_id != null)
                    {
                        build_curator_list_idParameter.Value = build_curator_list_id;
                    }
                    else
                    {
                        build_curator_list_idParameter.Size = -1;
                        build_curator_list_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(build_curator_list_idParameter);

                    DbParameter package_curator_idParameter = cmd.CreateParameter();
                    package_curator_idParameter.ParameterName = "package_curator_id";
                    package_curator_idParameter.Direction = ParameterDirection.Input;
                    package_curator_idParameter.DbType = DbType.Int32;
                    package_curator_idParameter.Precision = 10;
                    package_curator_idParameter.Scale = 0;
                    if (package_curator_id.HasValue)
                    {
                        package_curator_idParameter.Value = package_curator_id.Value;
                    }
                    else
                    {
                        package_curator_idParameter.Size = -1;
                        package_curator_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(package_curator_idParameter);

                    DbParameter supply_curator_idParameter = cmd.CreateParameter();
                    supply_curator_idParameter.ParameterName = "supply_curator_id";
                    supply_curator_idParameter.Direction = ParameterDirection.Input;
                    supply_curator_idParameter.DbType = DbType.Int32;
                    supply_curator_idParameter.Precision = 10;
                    supply_curator_idParameter.Scale = 0;
                    if (supply_curator_id.HasValue)
                    {
                        supply_curator_idParameter.Value = supply_curator_id.Value;
                    }
                    else
                    {
                        supply_curator_idParameter.Size = -1;
                        supply_curator_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(supply_curator_idParameter);

                    DbParameter supply_curator_list_idParameter = cmd.CreateParameter();
                    supply_curator_list_idParameter.ParameterName = "supply_curator_list_id";
                    supply_curator_list_idParameter.Direction = ParameterDirection.Input;
                    supply_curator_list_idParameter.DbType = DbType.String;
                    if (supply_curator_list_id != null)
                    {
                        supply_curator_list_idParameter.Value = supply_curator_list_id;
                    }
                    else
                    {
                        supply_curator_list_idParameter.Size = -1;
                        supply_curator_list_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(supply_curator_list_idParameter);

                    DbParameter deliveryplan_curator_list_idParameter = cmd.CreateParameter();
                    deliveryplan_curator_list_idParameter.ParameterName = "deliveryplan_curator_list_id";
                    deliveryplan_curator_list_idParameter.Direction = ParameterDirection.Input;
                    deliveryplan_curator_list_idParameter.DbType = DbType.String;
                    if (deliveryplan_curator_list_id != null)
                    {
                        deliveryplan_curator_list_idParameter.Value = deliveryplan_curator_list_id;
                    }
                    else
                    {
                        deliveryplan_curator_list_idParameter.Size = -1;
                        deliveryplan_curator_list_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(deliveryplan_curator_list_idParameter);

                    DbParameter project_curator_idParameter = cmd.CreateParameter();
                    project_curator_idParameter.ParameterName = "project_curator_id";
                    project_curator_idParameter.Direction = ParameterDirection.Input;
                    project_curator_idParameter.DbType = DbType.Int32;
                    project_curator_idParameter.Precision = 10;
                    project_curator_idParameter.Scale = 0;
                    if (project_curator_id.HasValue)
                    {
                        project_curator_idParameter.Value = project_curator_id.Value;
                    }
                    else
                    {
                        project_curator_idParameter.Size = -1;
                        project_curator_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_curator_idParameter);

                    DbParameter stocks_curator_idParameter = cmd.CreateParameter();
                    stocks_curator_idParameter.ParameterName = "stocks_curator_id";
                    stocks_curator_idParameter.Direction = ParameterDirection.Input;
                    stocks_curator_idParameter.DbType = DbType.Int32;
                    stocks_curator_idParameter.Precision = 10;
                    stocks_curator_idParameter.Scale = 0;
                    if (stocks_curator_id.HasValue)
                    {
                        stocks_curator_idParameter.Value = stocks_curator_id.Value;
                    }
                    else
                    {
                        stocks_curator_idParameter.Size = -1;
                        stocks_curator_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stocks_curator_idParameter);

                    DbParameter storage_contractParameter = cmd.CreateParameter();
                    storage_contractParameter.ParameterName = "storage_contract";
                    storage_contractParameter.Direction = ParameterDirection.Input;
                    storage_contractParameter.DbType = DbType.String;
                    if (storage_contract != null)
                    {
                        storage_contractParameter.Value = storage_contract;
                    }
                    else
                    {
                        storage_contractParameter.Size = -1;
                        storage_contractParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(storage_contractParameter);

                    DbParameter storage_contract_finish_dateParameter = cmd.CreateParameter();
                    storage_contract_finish_dateParameter.ParameterName = "storage_contract_finish_date";
                    storage_contract_finish_dateParameter.Direction = ParameterDirection.Input;
                    storage_contract_finish_dateParameter.DbType = DbType.DateTime;
                    if (storage_contract_finish_date.HasValue)
                    {
                        storage_contract_finish_dateParameter.Value = storage_contract_finish_date.Value;
                    }
                    else
                    {
                        storage_contract_finish_dateParameter.Size = -1;
                        storage_contract_finish_dateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(storage_contract_finish_dateParameter);

                    DbParameter non_project_supplier_approve_requiredParameter = cmd.CreateParameter();
                    non_project_supplier_approve_requiredParameter.ParameterName = "non_project_supplier_approve_required";
                    non_project_supplier_approve_requiredParameter.Direction = ParameterDirection.Input;
                    non_project_supplier_approve_requiredParameter.DbType = DbType.Boolean;
                    if (non_project_supplier_approve_required.HasValue)
                    {
                        non_project_supplier_approve_requiredParameter.Value = non_project_supplier_approve_required.Value;
                    }
                    else
                    {
                        non_project_supplier_approve_requiredParameter.Size = -1;
                        non_project_supplier_approve_requiredParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(non_project_supplier_approve_requiredParameter);

                    DbParameter rss_match_type_idParameter = cmd.CreateParameter();
                    rss_match_type_idParameter.ParameterName = "rss_match_type_id";
                    rss_match_type_idParameter.Direction = ParameterDirection.Input;
                    rss_match_type_idParameter.DbType = DbType.Int32;
                    rss_match_type_idParameter.Precision = 10;
                    rss_match_type_idParameter.Scale = 0;
                    if (rss_match_type_id.HasValue)
                    {
                        rss_match_type_idParameter.Value = rss_match_type_id.Value;
                    }
                    else
                    {
                        rss_match_type_idParameter.Size = -1;
                        rss_match_type_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(rss_match_type_idParameter);

                    DbParameter tpsu_division_idParameter = cmd.CreateParameter();
                    tpsu_division_idParameter.ParameterName = "tpsu_division_id";
                    tpsu_division_idParameter.Direction = ParameterDirection.Input;
                    tpsu_division_idParameter.DbType = DbType.Int32;
                    tpsu_division_idParameter.Precision = 10;
                    tpsu_division_idParameter.Scale = 0;
                    if (tpsu_division_id.HasValue)
                    {
                        tpsu_division_idParameter.Value = tpsu_division_id.Value;
                    }
                    else
                    {
                        tpsu_division_idParameter.Size = -1;
                        tpsu_division_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(tpsu_division_idParameter);

                    DbParameter subcontractor_info_list_idParameter = cmd.CreateParameter();
                    subcontractor_info_list_idParameter.ParameterName = "subcontractor_info_list_id";
                    subcontractor_info_list_idParameter.Direction = ParameterDirection.Input;
                    subcontractor_info_list_idParameter.DbType = DbType.String;
                    if (subcontractor_info_list_id != null)
                    {
                        subcontractor_info_list_idParameter.Value = subcontractor_info_list_id;
                    }
                    else
                    {
                        subcontractor_info_list_idParameter.Size = -1;
                        subcontractor_info_list_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subcontractor_info_list_idParameter);

                    DbParameter is_documentation_percentParameter = cmd.CreateParameter();
                    is_documentation_percentParameter.ParameterName = "is_documentation_percent";
                    is_documentation_percentParameter.Direction = ParameterDirection.Input;
                    is_documentation_percentParameter.DbType = DbType.String;
                    if (is_documentation_percent != null)
                    {
                        is_documentation_percentParameter.Value = is_documentation_percent;
                    }
                    else
                    {
                        is_documentation_percentParameter.Size = -1;
                        is_documentation_percentParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_documentation_percentParameter);

                    DbParameter is_documentationParameter = cmd.CreateParameter();
                    is_documentationParameter.ParameterName = "is_documentation";
                    is_documentationParameter.Direction = ParameterDirection.Input;
                    is_documentationParameter.DbType = DbType.String;
                    if (is_documentation != null)
                    {
                        is_documentationParameter.Value = is_documentation;
                    }
                    else
                    {
                        is_documentationParameter.Size = -1;
                        is_documentationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_documentationParameter);

                    DbParameter is_change_documentation_percentParameter = cmd.CreateParameter();
                    is_change_documentation_percentParameter.ParameterName = "is_change_documentation_percent";
                    is_change_documentation_percentParameter.Direction = ParameterDirection.Input;
                    is_change_documentation_percentParameter.DbType = DbType.String;
                    if (is_change_documentation_percent != null)
                    {
                        is_change_documentation_percentParameter.Value = is_change_documentation_percent;
                    }
                    else
                    {
                        is_change_documentation_percentParameter.Size = -1;
                        is_change_documentation_percentParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_change_documentation_percentParameter);

                    DbParameter is_change_documentationParameter = cmd.CreateParameter();
                    is_change_documentationParameter.ParameterName = "is_change_documentation";
                    is_change_documentationParameter.Direction = ParameterDirection.Input;
                    is_change_documentationParameter.DbType = DbType.String;
                    if (is_change_documentation != null)
                    {
                        is_change_documentationParameter.Value = is_change_documentation;
                    }
                    else
                    {
                        is_change_documentationParameter.Size = -1;
                        is_change_documentationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_change_documentationParameter);

                    DbParameter total_sum_gkParameter = cmd.CreateParameter();
                    total_sum_gkParameter.ParameterName = "total_sum_gk";
                    total_sum_gkParameter.Direction = ParameterDirection.Input;
                    total_sum_gkParameter.DbType = DbType.Double;
                    total_sum_gkParameter.Precision = 53;
                    if (total_sum_gk.HasValue)
                    {
                        total_sum_gkParameter.Value = total_sum_gk.Value;
                    }
                    else
                    {
                        total_sum_gkParameter.Size = -1;
                        total_sum_gkParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(total_sum_gkParameter);

                    DbParameter total_sum_directParameter = cmd.CreateParameter();
                    total_sum_directParameter.ParameterName = "total_sum_direct";
                    total_sum_directParameter.Direction = ParameterDirection.Input;
                    total_sum_directParameter.DbType = DbType.Double;
                    total_sum_directParameter.Precision = 53;
                    if (total_sum_direct.HasValue)
                    {
                        total_sum_directParameter.Value = total_sum_direct.Value;
                    }
                    else
                    {
                        total_sum_directParameter.Size = -1;
                        total_sum_directParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(total_sum_directParameter);

                    DbParameter advance_infoParameter = cmd.CreateParameter();
                    advance_infoParameter.ParameterName = "advance_info";
                    advance_infoParameter.Direction = ParameterDirection.Input;
                    advance_infoParameter.DbType = DbType.Double;
                    advance_infoParameter.Precision = 53;
                    if (advance_info.HasValue)
                    {
                        advance_infoParameter.Value = advance_info.Value;
                    }
                    else
                    {
                        advance_infoParameter.Size = -1;
                        advance_infoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(advance_infoParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> APL_UPDATE_PROJECT2Async (System.Nullable<int> id, string project_description, string project_short_description, System.Nullable<int> project_type_id, System.Nullable<int> project_state_id, System.Nullable<int> customer_id, System.Nullable<int> designer_id, System.Nullable<int> normative_delivery_time, System.Nullable<double> start, System.Nullable<double> finish, System.Nullable<int> year1, System.Nullable<int> year2, System.Nullable<System.DateTime> finish_date, System.Nullable<int> build_curator_id, string build_curator_list_id, System.Nullable<int> package_curator_id, System.Nullable<int> supply_curator_id, string supply_curator_list_id, string deliveryplan_curator_list_id, System.Nullable<int> project_curator_id, System.Nullable<int> stocks_curator_id, string storage_contract, System.Nullable<System.DateTime> storage_contract_finish_date, System.Nullable<bool> non_project_supplier_approve_required, System.Nullable<int> rss_match_type_id, System.Nullable<int> tpsu_division_id, string subcontractor_info_list_id, string is_documentation_percent, string is_documentation, string is_change_documentation_percent, string is_change_documentation, System.Nullable<double> total_sum_gk, System.Nullable<double> total_sum_direct, System.Nullable<double> advance_info, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_PROJECT2";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter project_descriptionParameter = cmd.CreateParameter();
                    project_descriptionParameter.ParameterName = "project_description";
                    project_descriptionParameter.Direction = ParameterDirection.Input;
                    project_descriptionParameter.DbType = DbType.String;
                    if (project_description != null)
                    {
                        project_descriptionParameter.Value = project_description;
                    }
                    else
                    {
                        project_descriptionParameter.Size = -1;
                        project_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_descriptionParameter);

                    DbParameter project_short_descriptionParameter = cmd.CreateParameter();
                    project_short_descriptionParameter.ParameterName = "project_short_description";
                    project_short_descriptionParameter.Direction = ParameterDirection.Input;
                    project_short_descriptionParameter.DbType = DbType.String;
                    project_short_descriptionParameter.Size = 510;
                    if (project_short_description != null)
                    {
                        project_short_descriptionParameter.Value = project_short_description;
                    }
                    else
                    {
                        project_short_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_short_descriptionParameter);

                    DbParameter project_type_idParameter = cmd.CreateParameter();
                    project_type_idParameter.ParameterName = "project_type_id";
                    project_type_idParameter.Direction = ParameterDirection.Input;
                    project_type_idParameter.DbType = DbType.Int32;
                    project_type_idParameter.Precision = 10;
                    project_type_idParameter.Scale = 0;
                    if (project_type_id.HasValue)
                    {
                        project_type_idParameter.Value = project_type_id.Value;
                    }
                    else
                    {
                        project_type_idParameter.Size = -1;
                        project_type_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_type_idParameter);

                    DbParameter project_state_idParameter = cmd.CreateParameter();
                    project_state_idParameter.ParameterName = "project_state_id";
                    project_state_idParameter.Direction = ParameterDirection.Input;
                    project_state_idParameter.DbType = DbType.Int32;
                    project_state_idParameter.Precision = 10;
                    project_state_idParameter.Scale = 0;
                    if (project_state_id.HasValue)
                    {
                        project_state_idParameter.Value = project_state_id.Value;
                    }
                    else
                    {
                        project_state_idParameter.Size = -1;
                        project_state_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_state_idParameter);

                    DbParameter customer_idParameter = cmd.CreateParameter();
                    customer_idParameter.ParameterName = "customer_id";
                    customer_idParameter.Direction = ParameterDirection.Input;
                    customer_idParameter.DbType = DbType.Int32;
                    customer_idParameter.Precision = 10;
                    customer_idParameter.Scale = 0;
                    if (customer_id.HasValue)
                    {
                        customer_idParameter.Value = customer_id.Value;
                    }
                    else
                    {
                        customer_idParameter.Size = -1;
                        customer_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(customer_idParameter);

                    DbParameter designer_idParameter = cmd.CreateParameter();
                    designer_idParameter.ParameterName = "designer_id";
                    designer_idParameter.Direction = ParameterDirection.Input;
                    designer_idParameter.DbType = DbType.Int32;
                    designer_idParameter.Precision = 10;
                    designer_idParameter.Scale = 0;
                    if (designer_id.HasValue)
                    {
                        designer_idParameter.Value = designer_id.Value;
                    }
                    else
                    {
                        designer_idParameter.Size = -1;
                        designer_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(designer_idParameter);

                    DbParameter normative_delivery_timeParameter = cmd.CreateParameter();
                    normative_delivery_timeParameter.ParameterName = "normative_delivery_time";
                    normative_delivery_timeParameter.Direction = ParameterDirection.Input;
                    normative_delivery_timeParameter.DbType = DbType.Int32;
                    normative_delivery_timeParameter.Precision = 10;
                    normative_delivery_timeParameter.Scale = 0;
                    if (normative_delivery_time.HasValue)
                    {
                        normative_delivery_timeParameter.Value = normative_delivery_time.Value;
                    }
                    else
                    {
                        normative_delivery_timeParameter.Size = -1;
                        normative_delivery_timeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(normative_delivery_timeParameter);

                    DbParameter startParameter = cmd.CreateParameter();
                    startParameter.ParameterName = "start";
                    startParameter.Direction = ParameterDirection.Input;
                    startParameter.DbType = DbType.Double;
                    startParameter.Precision = 53;
                    if (start.HasValue)
                    {
                        startParameter.Value = start.Value;
                    }
                    else
                    {
                        startParameter.Size = -1;
                        startParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startParameter);

                    DbParameter finishParameter = cmd.CreateParameter();
                    finishParameter.ParameterName = "finish";
                    finishParameter.Direction = ParameterDirection.Input;
                    finishParameter.DbType = DbType.Double;
                    finishParameter.Precision = 53;
                    if (finish.HasValue)
                    {
                        finishParameter.Value = finish.Value;
                    }
                    else
                    {
                        finishParameter.Size = -1;
                        finishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finishParameter);

                    DbParameter year1Parameter = cmd.CreateParameter();
                    year1Parameter.ParameterName = "year1";
                    year1Parameter.Direction = ParameterDirection.Input;
                    year1Parameter.DbType = DbType.Int32;
                    year1Parameter.Precision = 10;
                    year1Parameter.Scale = 0;
                    if (year1.HasValue)
                    {
                        year1Parameter.Value = year1.Value;
                    }
                    else
                    {
                        year1Parameter.Size = -1;
                        year1Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(year1Parameter);

                    DbParameter year2Parameter = cmd.CreateParameter();
                    year2Parameter.ParameterName = "year2";
                    year2Parameter.Direction = ParameterDirection.Input;
                    year2Parameter.DbType = DbType.Int32;
                    year2Parameter.Precision = 10;
                    year2Parameter.Scale = 0;
                    if (year2.HasValue)
                    {
                        year2Parameter.Value = year2.Value;
                    }
                    else
                    {
                        year2Parameter.Size = -1;
                        year2Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(year2Parameter);

                    DbParameter finish_dateParameter = cmd.CreateParameter();
                    finish_dateParameter.ParameterName = "finish_date";
                    finish_dateParameter.Direction = ParameterDirection.Input;
                    finish_dateParameter.DbType = DbType.DateTime;
                    if (finish_date.HasValue)
                    {
                        finish_dateParameter.Value = finish_date.Value;
                    }
                    else
                    {
                        finish_dateParameter.Size = -1;
                        finish_dateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finish_dateParameter);

                    DbParameter build_curator_idParameter = cmd.CreateParameter();
                    build_curator_idParameter.ParameterName = "build_curator_id";
                    build_curator_idParameter.Direction = ParameterDirection.Input;
                    build_curator_idParameter.DbType = DbType.Int32;
                    build_curator_idParameter.Precision = 10;
                    build_curator_idParameter.Scale = 0;
                    if (build_curator_id.HasValue)
                    {
                        build_curator_idParameter.Value = build_curator_id.Value;
                    }
                    else
                    {
                        build_curator_idParameter.Size = -1;
                        build_curator_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(build_curator_idParameter);

                    DbParameter build_curator_list_idParameter = cmd.CreateParameter();
                    build_curator_list_idParameter.ParameterName = "build_curator_list_id";
                    build_curator_list_idParameter.Direction = ParameterDirection.Input;
                    build_curator_list_idParameter.DbType = DbType.String;
                    if (build_curator_list_id != null)
                    {
                        build_curator_list_idParameter.Value = build_curator_list_id;
                    }
                    else
                    {
                        build_curator_list_idParameter.Size = -1;
                        build_curator_list_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(build_curator_list_idParameter);

                    DbParameter package_curator_idParameter = cmd.CreateParameter();
                    package_curator_idParameter.ParameterName = "package_curator_id";
                    package_curator_idParameter.Direction = ParameterDirection.Input;
                    package_curator_idParameter.DbType = DbType.Int32;
                    package_curator_idParameter.Precision = 10;
                    package_curator_idParameter.Scale = 0;
                    if (package_curator_id.HasValue)
                    {
                        package_curator_idParameter.Value = package_curator_id.Value;
                    }
                    else
                    {
                        package_curator_idParameter.Size = -1;
                        package_curator_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(package_curator_idParameter);

                    DbParameter supply_curator_idParameter = cmd.CreateParameter();
                    supply_curator_idParameter.ParameterName = "supply_curator_id";
                    supply_curator_idParameter.Direction = ParameterDirection.Input;
                    supply_curator_idParameter.DbType = DbType.Int32;
                    supply_curator_idParameter.Precision = 10;
                    supply_curator_idParameter.Scale = 0;
                    if (supply_curator_id.HasValue)
                    {
                        supply_curator_idParameter.Value = supply_curator_id.Value;
                    }
                    else
                    {
                        supply_curator_idParameter.Size = -1;
                        supply_curator_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(supply_curator_idParameter);

                    DbParameter supply_curator_list_idParameter = cmd.CreateParameter();
                    supply_curator_list_idParameter.ParameterName = "supply_curator_list_id";
                    supply_curator_list_idParameter.Direction = ParameterDirection.Input;
                    supply_curator_list_idParameter.DbType = DbType.String;
                    if (supply_curator_list_id != null)
                    {
                        supply_curator_list_idParameter.Value = supply_curator_list_id;
                    }
                    else
                    {
                        supply_curator_list_idParameter.Size = -1;
                        supply_curator_list_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(supply_curator_list_idParameter);

                    DbParameter deliveryplan_curator_list_idParameter = cmd.CreateParameter();
                    deliveryplan_curator_list_idParameter.ParameterName = "deliveryplan_curator_list_id";
                    deliveryplan_curator_list_idParameter.Direction = ParameterDirection.Input;
                    deliveryplan_curator_list_idParameter.DbType = DbType.String;
                    if (deliveryplan_curator_list_id != null)
                    {
                        deliveryplan_curator_list_idParameter.Value = deliveryplan_curator_list_id;
                    }
                    else
                    {
                        deliveryplan_curator_list_idParameter.Size = -1;
                        deliveryplan_curator_list_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(deliveryplan_curator_list_idParameter);

                    DbParameter project_curator_idParameter = cmd.CreateParameter();
                    project_curator_idParameter.ParameterName = "project_curator_id";
                    project_curator_idParameter.Direction = ParameterDirection.Input;
                    project_curator_idParameter.DbType = DbType.Int32;
                    project_curator_idParameter.Precision = 10;
                    project_curator_idParameter.Scale = 0;
                    if (project_curator_id.HasValue)
                    {
                        project_curator_idParameter.Value = project_curator_id.Value;
                    }
                    else
                    {
                        project_curator_idParameter.Size = -1;
                        project_curator_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_curator_idParameter);

                    DbParameter stocks_curator_idParameter = cmd.CreateParameter();
                    stocks_curator_idParameter.ParameterName = "stocks_curator_id";
                    stocks_curator_idParameter.Direction = ParameterDirection.Input;
                    stocks_curator_idParameter.DbType = DbType.Int32;
                    stocks_curator_idParameter.Precision = 10;
                    stocks_curator_idParameter.Scale = 0;
                    if (stocks_curator_id.HasValue)
                    {
                        stocks_curator_idParameter.Value = stocks_curator_id.Value;
                    }
                    else
                    {
                        stocks_curator_idParameter.Size = -1;
                        stocks_curator_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stocks_curator_idParameter);

                    DbParameter storage_contractParameter = cmd.CreateParameter();
                    storage_contractParameter.ParameterName = "storage_contract";
                    storage_contractParameter.Direction = ParameterDirection.Input;
                    storage_contractParameter.DbType = DbType.String;
                    if (storage_contract != null)
                    {
                        storage_contractParameter.Value = storage_contract;
                    }
                    else
                    {
                        storage_contractParameter.Size = -1;
                        storage_contractParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(storage_contractParameter);

                    DbParameter storage_contract_finish_dateParameter = cmd.CreateParameter();
                    storage_contract_finish_dateParameter.ParameterName = "storage_contract_finish_date";
                    storage_contract_finish_dateParameter.Direction = ParameterDirection.Input;
                    storage_contract_finish_dateParameter.DbType = DbType.DateTime;
                    if (storage_contract_finish_date.HasValue)
                    {
                        storage_contract_finish_dateParameter.Value = storage_contract_finish_date.Value;
                    }
                    else
                    {
                        storage_contract_finish_dateParameter.Size = -1;
                        storage_contract_finish_dateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(storage_contract_finish_dateParameter);

                    DbParameter non_project_supplier_approve_requiredParameter = cmd.CreateParameter();
                    non_project_supplier_approve_requiredParameter.ParameterName = "non_project_supplier_approve_required";
                    non_project_supplier_approve_requiredParameter.Direction = ParameterDirection.Input;
                    non_project_supplier_approve_requiredParameter.DbType = DbType.Boolean;
                    if (non_project_supplier_approve_required.HasValue)
                    {
                        non_project_supplier_approve_requiredParameter.Value = non_project_supplier_approve_required.Value;
                    }
                    else
                    {
                        non_project_supplier_approve_requiredParameter.Size = -1;
                        non_project_supplier_approve_requiredParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(non_project_supplier_approve_requiredParameter);

                    DbParameter rss_match_type_idParameter = cmd.CreateParameter();
                    rss_match_type_idParameter.ParameterName = "rss_match_type_id";
                    rss_match_type_idParameter.Direction = ParameterDirection.Input;
                    rss_match_type_idParameter.DbType = DbType.Int32;
                    rss_match_type_idParameter.Precision = 10;
                    rss_match_type_idParameter.Scale = 0;
                    if (rss_match_type_id.HasValue)
                    {
                        rss_match_type_idParameter.Value = rss_match_type_id.Value;
                    }
                    else
                    {
                        rss_match_type_idParameter.Size = -1;
                        rss_match_type_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(rss_match_type_idParameter);

                    DbParameter tpsu_division_idParameter = cmd.CreateParameter();
                    tpsu_division_idParameter.ParameterName = "tpsu_division_id";
                    tpsu_division_idParameter.Direction = ParameterDirection.Input;
                    tpsu_division_idParameter.DbType = DbType.Int32;
                    tpsu_division_idParameter.Precision = 10;
                    tpsu_division_idParameter.Scale = 0;
                    if (tpsu_division_id.HasValue)
                    {
                        tpsu_division_idParameter.Value = tpsu_division_id.Value;
                    }
                    else
                    {
                        tpsu_division_idParameter.Size = -1;
                        tpsu_division_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(tpsu_division_idParameter);

                    DbParameter subcontractor_info_list_idParameter = cmd.CreateParameter();
                    subcontractor_info_list_idParameter.ParameterName = "subcontractor_info_list_id";
                    subcontractor_info_list_idParameter.Direction = ParameterDirection.Input;
                    subcontractor_info_list_idParameter.DbType = DbType.String;
                    if (subcontractor_info_list_id != null)
                    {
                        subcontractor_info_list_idParameter.Value = subcontractor_info_list_id;
                    }
                    else
                    {
                        subcontractor_info_list_idParameter.Size = -1;
                        subcontractor_info_list_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subcontractor_info_list_idParameter);

                    DbParameter is_documentation_percentParameter = cmd.CreateParameter();
                    is_documentation_percentParameter.ParameterName = "is_documentation_percent";
                    is_documentation_percentParameter.Direction = ParameterDirection.Input;
                    is_documentation_percentParameter.DbType = DbType.String;
                    if (is_documentation_percent != null)
                    {
                        is_documentation_percentParameter.Value = is_documentation_percent;
                    }
                    else
                    {
                        is_documentation_percentParameter.Size = -1;
                        is_documentation_percentParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_documentation_percentParameter);

                    DbParameter is_documentationParameter = cmd.CreateParameter();
                    is_documentationParameter.ParameterName = "is_documentation";
                    is_documentationParameter.Direction = ParameterDirection.Input;
                    is_documentationParameter.DbType = DbType.String;
                    if (is_documentation != null)
                    {
                        is_documentationParameter.Value = is_documentation;
                    }
                    else
                    {
                        is_documentationParameter.Size = -1;
                        is_documentationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_documentationParameter);

                    DbParameter is_change_documentation_percentParameter = cmd.CreateParameter();
                    is_change_documentation_percentParameter.ParameterName = "is_change_documentation_percent";
                    is_change_documentation_percentParameter.Direction = ParameterDirection.Input;
                    is_change_documentation_percentParameter.DbType = DbType.String;
                    if (is_change_documentation_percent != null)
                    {
                        is_change_documentation_percentParameter.Value = is_change_documentation_percent;
                    }
                    else
                    {
                        is_change_documentation_percentParameter.Size = -1;
                        is_change_documentation_percentParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_change_documentation_percentParameter);

                    DbParameter is_change_documentationParameter = cmd.CreateParameter();
                    is_change_documentationParameter.ParameterName = "is_change_documentation";
                    is_change_documentationParameter.Direction = ParameterDirection.Input;
                    is_change_documentationParameter.DbType = DbType.String;
                    if (is_change_documentation != null)
                    {
                        is_change_documentationParameter.Value = is_change_documentation;
                    }
                    else
                    {
                        is_change_documentationParameter.Size = -1;
                        is_change_documentationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_change_documentationParameter);

                    DbParameter total_sum_gkParameter = cmd.CreateParameter();
                    total_sum_gkParameter.ParameterName = "total_sum_gk";
                    total_sum_gkParameter.Direction = ParameterDirection.Input;
                    total_sum_gkParameter.DbType = DbType.Double;
                    total_sum_gkParameter.Precision = 53;
                    if (total_sum_gk.HasValue)
                    {
                        total_sum_gkParameter.Value = total_sum_gk.Value;
                    }
                    else
                    {
                        total_sum_gkParameter.Size = -1;
                        total_sum_gkParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(total_sum_gkParameter);

                    DbParameter total_sum_directParameter = cmd.CreateParameter();
                    total_sum_directParameter.ParameterName = "total_sum_direct";
                    total_sum_directParameter.Direction = ParameterDirection.Input;
                    total_sum_directParameter.DbType = DbType.Double;
                    total_sum_directParameter.Precision = 53;
                    if (total_sum_direct.HasValue)
                    {
                        total_sum_directParameter.Value = total_sum_direct.Value;
                    }
                    else
                    {
                        total_sum_directParameter.Size = -1;
                        total_sum_directParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(total_sum_directParameter);

                    DbParameter advance_infoParameter = cmd.CreateParameter();
                    advance_infoParameter.ParameterName = "advance_info";
                    advance_infoParameter.Direction = ParameterDirection.Input;
                    advance_infoParameter.DbType = DbType.Double;
                    advance_infoParameter.Precision = 53;
                    if (advance_info.HasValue)
                    {
                        advance_infoParameter.Value = advance_info.Value;
                    }
                    else
                    {
                        advance_infoParameter.Size = -1;
                        advance_infoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(advance_infoParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_OBJECTS_AND_SUBOBJECTSResult> APL_SELECT_OBJECTS_AND_SUBOBJECTS (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> id, System.Nullable<int> project_id)
        {

            List<APL_SELECT_OBJECTS_AND_SUBOBJECTSResult> result = new List<APL_SELECT_OBJECTS_AND_SUBOBJECTSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_OBJECTS_AND_SUBOBJECTS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_OBJECTS_AND_SUBOBJECTSResult row = new APL_SELECT_OBJECTS_AND_SUBOBJECTSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("parent_id") && !reader.IsDBNull(reader.GetOrdinal("parent_id")))
                                row.parent_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"parent_id")), typeof(int));
                            else
                                row.parent_id = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("start") && !reader.IsDBNull(reader.GetOrdinal("start")))
                                row.start = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start")), typeof(double));
                            else
                                row.start = null;

                            if (fieldNames.Contains("finish") && !reader.IsDBNull(reader.GetOrdinal("finish")))
                                row.finish = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish")), typeof(double));
                            else
                                row.finish = null;

                            if (fieldNames.Contains("tree_errors") && !reader.IsDBNull(reader.GetOrdinal("tree_errors")))
                                row.tree_errors = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tree_errors")), typeof(string));
                            else
                                row.tree_errors = null;

                            if (fieldNames.Contains("subcontractor_list") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_list")))
                                row.subcontractor_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_list")), typeof(string));
                            else
                                row.subcontractor_list = null;

                            if (fieldNames.Contains("project_1c_guid") && !reader.IsDBNull(reader.GetOrdinal("project_1c_guid")))
                                row.project_1c_guid = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_1c_guid")), typeof(string));
                            else
                                row.project_1c_guid = null;

                            if (fieldNames.Contains("project_1c") && !reader.IsDBNull(reader.GetOrdinal("project_1c")))
                                row.project_1c = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_1c")), typeof(string));
                            else
                                row.project_1c = null;

                            if (fieldNames.Contains("is_parent") && !reader.IsDBNull(reader.GetOrdinal("is_parent")))
                                row.is_parent = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_parent")), typeof(int));

                            if (fieldNames.Contains("object_id") && !reader.IsDBNull(reader.GetOrdinal("object_id")))
                                row.object_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_id")), typeof(int));

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_OBJECTS_AND_SUBOBJECTSResult>> APL_SELECT_OBJECTS_AND_SUBOBJECTSAsync (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> id, System.Nullable<int> project_id)
        {

            List<APL_SELECT_OBJECTS_AND_SUBOBJECTSResult> result = new List<APL_SELECT_OBJECTS_AND_SUBOBJECTSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_OBJECTS_AND_SUBOBJECTS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_OBJECTS_AND_SUBOBJECTSResult row = new APL_SELECT_OBJECTS_AND_SUBOBJECTSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("parent_id") && !reader.IsDBNull(reader.GetOrdinal("parent_id")))
                                row.parent_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"parent_id")), typeof(int));
                            else
                                row.parent_id = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("start") && !reader.IsDBNull(reader.GetOrdinal("start")))
                                row.start = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start")), typeof(double));
                            else
                                row.start = null;

                            if (fieldNames.Contains("finish") && !reader.IsDBNull(reader.GetOrdinal("finish")))
                                row.finish = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish")), typeof(double));
                            else
                                row.finish = null;

                            if (fieldNames.Contains("tree_errors") && !reader.IsDBNull(reader.GetOrdinal("tree_errors")))
                                row.tree_errors = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tree_errors")), typeof(string));
                            else
                                row.tree_errors = null;

                            if (fieldNames.Contains("subcontractor_list") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_list")))
                                row.subcontractor_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_list")), typeof(string));
                            else
                                row.subcontractor_list = null;

                            if (fieldNames.Contains("project_1c_guid") && !reader.IsDBNull(reader.GetOrdinal("project_1c_guid")))
                                row.project_1c_guid = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_1c_guid")), typeof(string));
                            else
                                row.project_1c_guid = null;

                            if (fieldNames.Contains("project_1c") && !reader.IsDBNull(reader.GetOrdinal("project_1c")))
                                row.project_1c = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_1c")), typeof(string));
                            else
                                row.project_1c = null;

                            if (fieldNames.Contains("is_parent") && !reader.IsDBNull(reader.GetOrdinal("is_parent")))
                                row.is_parent = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_parent")), typeof(int));

                            if (fieldNames.Contains("object_id") && !reader.IsDBNull(reader.GetOrdinal("object_id")))
                                row.object_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_id")), typeof(int));

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public void OMC_INSERT_SVR_LOADING_ITEM (System.Nullable<int> loading_id, System.Nullable<int> project_id, string number, string resource_code, string description, string unit_description, string quantity_description, string price_description, string summa_description, string local_estimate_number, string project_documentation_code, string turnover, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_INSERT_SVR_LOADING_ITEM";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);

                    DbParameter numberParameter = cmd.CreateParameter();
                    numberParameter.ParameterName = "number";
                    numberParameter.Direction = ParameterDirection.Input;
                    numberParameter.DbType = DbType.String;
                    if (number != null)
                    {
                        numberParameter.Value = number;
                    }
                    else
                    {
                        numberParameter.Size = -1;
                        numberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(numberParameter);

                    DbParameter resource_codeParameter = cmd.CreateParameter();
                    resource_codeParameter.ParameterName = "resource_code";
                    resource_codeParameter.Direction = ParameterDirection.Input;
                    resource_codeParameter.DbType = DbType.String;
                    if (resource_code != null)
                    {
                        resource_codeParameter.Value = resource_code;
                    }
                    else
                    {
                        resource_codeParameter.Size = -1;
                        resource_codeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(resource_codeParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter unit_descriptionParameter = cmd.CreateParameter();
                    unit_descriptionParameter.ParameterName = "unit_description";
                    unit_descriptionParameter.Direction = ParameterDirection.Input;
                    unit_descriptionParameter.DbType = DbType.String;
                    if (unit_description != null)
                    {
                        unit_descriptionParameter.Value = unit_description;
                    }
                    else
                    {
                        unit_descriptionParameter.Size = -1;
                        unit_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(unit_descriptionParameter);

                    DbParameter quantity_descriptionParameter = cmd.CreateParameter();
                    quantity_descriptionParameter.ParameterName = "quantity_description";
                    quantity_descriptionParameter.Direction = ParameterDirection.Input;
                    quantity_descriptionParameter.DbType = DbType.String;
                    if (quantity_description != null)
                    {
                        quantity_descriptionParameter.Value = quantity_description;
                    }
                    else
                    {
                        quantity_descriptionParameter.Size = -1;
                        quantity_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(quantity_descriptionParameter);

                    DbParameter price_descriptionParameter = cmd.CreateParameter();
                    price_descriptionParameter.ParameterName = "price_description";
                    price_descriptionParameter.Direction = ParameterDirection.Input;
                    price_descriptionParameter.DbType = DbType.String;
                    if (price_description != null)
                    {
                        price_descriptionParameter.Value = price_description;
                    }
                    else
                    {
                        price_descriptionParameter.Size = -1;
                        price_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(price_descriptionParameter);

                    DbParameter summa_descriptionParameter = cmd.CreateParameter();
                    summa_descriptionParameter.ParameterName = "summa_description";
                    summa_descriptionParameter.Direction = ParameterDirection.Input;
                    summa_descriptionParameter.DbType = DbType.String;
                    if (summa_description != null)
                    {
                        summa_descriptionParameter.Value = summa_description;
                    }
                    else
                    {
                        summa_descriptionParameter.Size = -1;
                        summa_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(summa_descriptionParameter);

                    DbParameter local_estimate_numberParameter = cmd.CreateParameter();
                    local_estimate_numberParameter.ParameterName = "local_estimate_number";
                    local_estimate_numberParameter.Direction = ParameterDirection.Input;
                    local_estimate_numberParameter.DbType = DbType.String;
                    if (local_estimate_number != null)
                    {
                        local_estimate_numberParameter.Value = local_estimate_number;
                    }
                    else
                    {
                        local_estimate_numberParameter.Size = -1;
                        local_estimate_numberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(local_estimate_numberParameter);

                    DbParameter project_documentation_codeParameter = cmd.CreateParameter();
                    project_documentation_codeParameter.ParameterName = "project_documentation_code";
                    project_documentation_codeParameter.Direction = ParameterDirection.Input;
                    project_documentation_codeParameter.DbType = DbType.String;
                    if (project_documentation_code != null)
                    {
                        project_documentation_codeParameter.Value = project_documentation_code;
                    }
                    else
                    {
                        project_documentation_codeParameter.Size = -1;
                        project_documentation_codeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_documentation_codeParameter);

                    DbParameter turnoverParameter = cmd.CreateParameter();
                    turnoverParameter.ParameterName = "turnover";
                    turnoverParameter.Direction = ParameterDirection.Input;
                    turnoverParameter.DbType = DbType.String;
                    if (turnover != null)
                    {
                        turnoverParameter.Value = turnover;
                    }
                    else
                    {
                        turnoverParameter.Size = -1;
                        turnoverParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(turnoverParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task OMC_INSERT_SVR_LOADING_ITEMAsync (System.Nullable<int> loading_id, System.Nullable<int> project_id, string number, string resource_code, string description, string unit_description, string quantity_description, string price_description, string summa_description, string local_estimate_number, string project_documentation_code, string turnover, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_INSERT_SVR_LOADING_ITEM";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);

                    DbParameter numberParameter = cmd.CreateParameter();
                    numberParameter.ParameterName = "number";
                    numberParameter.Direction = ParameterDirection.Input;
                    numberParameter.DbType = DbType.String;
                    if (number != null)
                    {
                        numberParameter.Value = number;
                    }
                    else
                    {
                        numberParameter.Size = -1;
                        numberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(numberParameter);

                    DbParameter resource_codeParameter = cmd.CreateParameter();
                    resource_codeParameter.ParameterName = "resource_code";
                    resource_codeParameter.Direction = ParameterDirection.Input;
                    resource_codeParameter.DbType = DbType.String;
                    if (resource_code != null)
                    {
                        resource_codeParameter.Value = resource_code;
                    }
                    else
                    {
                        resource_codeParameter.Size = -1;
                        resource_codeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(resource_codeParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter unit_descriptionParameter = cmd.CreateParameter();
                    unit_descriptionParameter.ParameterName = "unit_description";
                    unit_descriptionParameter.Direction = ParameterDirection.Input;
                    unit_descriptionParameter.DbType = DbType.String;
                    if (unit_description != null)
                    {
                        unit_descriptionParameter.Value = unit_description;
                    }
                    else
                    {
                        unit_descriptionParameter.Size = -1;
                        unit_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(unit_descriptionParameter);

                    DbParameter quantity_descriptionParameter = cmd.CreateParameter();
                    quantity_descriptionParameter.ParameterName = "quantity_description";
                    quantity_descriptionParameter.Direction = ParameterDirection.Input;
                    quantity_descriptionParameter.DbType = DbType.String;
                    if (quantity_description != null)
                    {
                        quantity_descriptionParameter.Value = quantity_description;
                    }
                    else
                    {
                        quantity_descriptionParameter.Size = -1;
                        quantity_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(quantity_descriptionParameter);

                    DbParameter price_descriptionParameter = cmd.CreateParameter();
                    price_descriptionParameter.ParameterName = "price_description";
                    price_descriptionParameter.Direction = ParameterDirection.Input;
                    price_descriptionParameter.DbType = DbType.String;
                    if (price_description != null)
                    {
                        price_descriptionParameter.Value = price_description;
                    }
                    else
                    {
                        price_descriptionParameter.Size = -1;
                        price_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(price_descriptionParameter);

                    DbParameter summa_descriptionParameter = cmd.CreateParameter();
                    summa_descriptionParameter.ParameterName = "summa_description";
                    summa_descriptionParameter.Direction = ParameterDirection.Input;
                    summa_descriptionParameter.DbType = DbType.String;
                    if (summa_description != null)
                    {
                        summa_descriptionParameter.Value = summa_description;
                    }
                    else
                    {
                        summa_descriptionParameter.Size = -1;
                        summa_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(summa_descriptionParameter);

                    DbParameter local_estimate_numberParameter = cmd.CreateParameter();
                    local_estimate_numberParameter.ParameterName = "local_estimate_number";
                    local_estimate_numberParameter.Direction = ParameterDirection.Input;
                    local_estimate_numberParameter.DbType = DbType.String;
                    if (local_estimate_number != null)
                    {
                        local_estimate_numberParameter.Value = local_estimate_number;
                    }
                    else
                    {
                        local_estimate_numberParameter.Size = -1;
                        local_estimate_numberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(local_estimate_numberParameter);

                    DbParameter project_documentation_codeParameter = cmd.CreateParameter();
                    project_documentation_codeParameter.ParameterName = "project_documentation_code";
                    project_documentation_codeParameter.Direction = ParameterDirection.Input;
                    project_documentation_codeParameter.DbType = DbType.String;
                    if (project_documentation_code != null)
                    {
                        project_documentation_codeParameter.Value = project_documentation_code;
                    }
                    else
                    {
                        project_documentation_codeParameter.Size = -1;
                        project_documentation_codeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_documentation_codeParameter);

                    DbParameter turnoverParameter = cmd.CreateParameter();
                    turnoverParameter.ParameterName = "turnover";
                    turnoverParameter.Direction = ParameterDirection.Input;
                    turnoverParameter.DbType = DbType.String;
                    if (turnover != null)
                    {
                        turnoverParameter.Value = turnover;
                    }
                    else
                    {
                        turnoverParameter.Size = -1;
                        turnoverParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(turnoverParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public List<OMC_SELECT_FORM_SVR_ITEMS_DIFFResult> OMC_SELECT_FORM_SVR_ITEMS_DIFF (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id)
        {

            List<OMC_SELECT_FORM_SVR_ITEMS_DIFFResult> result = new List<OMC_SELECT_FORM_SVR_ITEMS_DIFFResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_SVR_ITEMS_DIFF";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_SVR_ITEMS_DIFFResult row = new OMC_SELECT_FORM_SVR_ITEMS_DIFFResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(string));
                            else
                                row.id = null;

                            if (fieldNames.Contains("fi_id") && !reader.IsDBNull(reader.GetOrdinal("fi_id")))
                                row.fi_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"fi_id")), typeof(int));
                            else
                                row.fi_id = null;

                            if (fieldNames.Contains("si_id") && !reader.IsDBNull(reader.GetOrdinal("si_id")))
                                row.si_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"si_id")), typeof(int));
                            else
                                row.si_id = null;

                            if (fieldNames.Contains("form_id") && !reader.IsDBNull(reader.GetOrdinal("form_id")))
                                row.form_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_id")), typeof(int));
                            else
                                row.form_id = null;

                            if (fieldNames.Contains("svr_id") && !reader.IsDBNull(reader.GetOrdinal("svr_id")))
                                row.svr_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"svr_id")), typeof(int));
                            else
                                row.svr_id = null;

                            if (fieldNames.Contains("diff_type") && !reader.IsDBNull(reader.GetOrdinal("diff_type")))
                                row.diff_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"diff_type")), typeof(string));

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("last_unit_description") && !reader.IsDBNull(reader.GetOrdinal("last_unit_description")))
                                row.last_unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_unit_description")), typeof(string));
                            else
                                row.last_unit_description = null;

                            if (fieldNames.Contains("new_unit_description") && !reader.IsDBNull(reader.GetOrdinal("new_unit_description")))
                                row.new_unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_unit_description")), typeof(string));
                            else
                                row.new_unit_description = null;

                            if (fieldNames.Contains("last_quantity") && !reader.IsDBNull(reader.GetOrdinal("last_quantity")))
                                row.last_quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_quantity")), typeof(double));
                            else
                                row.last_quantity = null;

                            if (fieldNames.Contains("new_quantity") && !reader.IsDBNull(reader.GetOrdinal("new_quantity")))
                                row.new_quantity = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_quantity")), typeof(string));
                            else
                                row.new_quantity = null;

                            if (fieldNames.Contains("last_price") && !reader.IsDBNull(reader.GetOrdinal("last_price")))
                                row.last_price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_price")), typeof(double));
                            else
                                row.last_price = null;

                            if (fieldNames.Contains("new_price") && !reader.IsDBNull(reader.GetOrdinal("new_price")))
                                row.new_price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_price")), typeof(double));
                            else
                                row.new_price = null;

                            if (fieldNames.Contains("last_summa") && !reader.IsDBNull(reader.GetOrdinal("last_summa")))
                                row.last_summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_summa")), typeof(double));
                            else
                                row.last_summa = null;

                            if (fieldNames.Contains("new_summa") && !reader.IsDBNull(reader.GetOrdinal("new_summa")))
                                row.new_summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_summa")), typeof(double));
                            else
                                row.new_summa = null;

                            if (fieldNames.Contains("last_turnover") && !reader.IsDBNull(reader.GetOrdinal("last_turnover")))
                                row.last_turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_turnover")), typeof(string));
                            else
                                row.last_turnover = null;

                            if (fieldNames.Contains("new_turnover") && !reader.IsDBNull(reader.GetOrdinal("new_turnover")))
                                row.new_turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_turnover")), typeof(string));
                            else
                                row.new_turnover = null;

                            if (fieldNames.Contains("last_svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("last_svr_delivery_type")))
                                row.last_svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_svr_delivery_type")), typeof(string));
                            else
                                row.last_svr_delivery_type = null;

                            if (fieldNames.Contains("new_svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("new_svr_delivery_type")))
                                row.new_svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_svr_delivery_type")), typeof(string));
                            else
                                row.new_svr_delivery_type = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_SELECT_FORM_SVR_ITEMS_DIFFResult>> OMC_SELECT_FORM_SVR_ITEMS_DIFFAsync (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id)
        {

            List<OMC_SELECT_FORM_SVR_ITEMS_DIFFResult> result = new List<OMC_SELECT_FORM_SVR_ITEMS_DIFFResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_SVR_ITEMS_DIFF";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_SVR_ITEMS_DIFFResult row = new OMC_SELECT_FORM_SVR_ITEMS_DIFFResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(string));
                            else
                                row.id = null;

                            if (fieldNames.Contains("fi_id") && !reader.IsDBNull(reader.GetOrdinal("fi_id")))
                                row.fi_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"fi_id")), typeof(int));
                            else
                                row.fi_id = null;

                            if (fieldNames.Contains("si_id") && !reader.IsDBNull(reader.GetOrdinal("si_id")))
                                row.si_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"si_id")), typeof(int));
                            else
                                row.si_id = null;

                            if (fieldNames.Contains("form_id") && !reader.IsDBNull(reader.GetOrdinal("form_id")))
                                row.form_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_id")), typeof(int));
                            else
                                row.form_id = null;

                            if (fieldNames.Contains("svr_id") && !reader.IsDBNull(reader.GetOrdinal("svr_id")))
                                row.svr_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"svr_id")), typeof(int));
                            else
                                row.svr_id = null;

                            if (fieldNames.Contains("diff_type") && !reader.IsDBNull(reader.GetOrdinal("diff_type")))
                                row.diff_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"diff_type")), typeof(string));

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("last_unit_description") && !reader.IsDBNull(reader.GetOrdinal("last_unit_description")))
                                row.last_unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_unit_description")), typeof(string));
                            else
                                row.last_unit_description = null;

                            if (fieldNames.Contains("new_unit_description") && !reader.IsDBNull(reader.GetOrdinal("new_unit_description")))
                                row.new_unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_unit_description")), typeof(string));
                            else
                                row.new_unit_description = null;

                            if (fieldNames.Contains("last_quantity") && !reader.IsDBNull(reader.GetOrdinal("last_quantity")))
                                row.last_quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_quantity")), typeof(double));
                            else
                                row.last_quantity = null;

                            if (fieldNames.Contains("new_quantity") && !reader.IsDBNull(reader.GetOrdinal("new_quantity")))
                                row.new_quantity = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_quantity")), typeof(string));
                            else
                                row.new_quantity = null;

                            if (fieldNames.Contains("last_price") && !reader.IsDBNull(reader.GetOrdinal("last_price")))
                                row.last_price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_price")), typeof(double));
                            else
                                row.last_price = null;

                            if (fieldNames.Contains("new_price") && !reader.IsDBNull(reader.GetOrdinal("new_price")))
                                row.new_price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_price")), typeof(double));
                            else
                                row.new_price = null;

                            if (fieldNames.Contains("last_summa") && !reader.IsDBNull(reader.GetOrdinal("last_summa")))
                                row.last_summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_summa")), typeof(double));
                            else
                                row.last_summa = null;

                            if (fieldNames.Contains("new_summa") && !reader.IsDBNull(reader.GetOrdinal("new_summa")))
                                row.new_summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_summa")), typeof(double));
                            else
                                row.new_summa = null;

                            if (fieldNames.Contains("last_turnover") && !reader.IsDBNull(reader.GetOrdinal("last_turnover")))
                                row.last_turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_turnover")), typeof(string));
                            else
                                row.last_turnover = null;

                            if (fieldNames.Contains("new_turnover") && !reader.IsDBNull(reader.GetOrdinal("new_turnover")))
                                row.new_turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_turnover")), typeof(string));
                            else
                                row.new_turnover = null;

                            if (fieldNames.Contains("last_svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("last_svr_delivery_type")))
                                row.last_svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_svr_delivery_type")), typeof(string));
                            else
                                row.last_svr_delivery_type = null;

                            if (fieldNames.Contains("new_svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("new_svr_delivery_type")))
                                row.new_svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_svr_delivery_type")), typeof(string));
                            else
                                row.new_svr_delivery_type = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_SELECT_SVRResult> OMC_SELECT_SVR (System.Nullable<int> event_id, System.Nullable<int> id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<OMC_SELECT_SVRResult> result = new List<OMC_SELECT_SVRResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_SVR";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_SVRResult row = new OMC_SELECT_SVRResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("creation_date") && !reader.IsDBNull(reader.GetOrdinal("creation_date")))
                                row.creation_date = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"creation_date")), typeof(string));
                            else
                                row.creation_date = null;

                            if (fieldNames.Contains("user_description") && !reader.IsDBNull(reader.GetOrdinal("user_description")))
                                row.user_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"user_description")), typeof(string));
                            else
                                row.user_description = null;

                            if (fieldNames.Contains("total_cnt") && !reader.IsDBNull(reader.GetOrdinal("total_cnt")))
                                row.total_cnt = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_cnt")), typeof(string));
                            else
                                row.total_cnt = null;

                            if (fieldNames.Contains("total_sum") && !reader.IsDBNull(reader.GetOrdinal("total_sum")))
                                row.total_sum = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_sum")), typeof(string));
                            else
                                row.total_sum = null;

                            if (fieldNames.Contains("error_cnt") && !reader.IsDBNull(reader.GetOrdinal("error_cnt")))
                                row.error_cnt = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_cnt")), typeof(string));

                            if (fieldNames.Contains("last_version") && !reader.IsDBNull(reader.GetOrdinal("last_version")))
                                row.last_version = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_version")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_SELECT_SVRResult>> OMC_SELECT_SVRAsync (System.Nullable<int> event_id, System.Nullable<int> id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<OMC_SELECT_SVRResult> result = new List<OMC_SELECT_SVRResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_SVR";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_SVRResult row = new OMC_SELECT_SVRResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("creation_date") && !reader.IsDBNull(reader.GetOrdinal("creation_date")))
                                row.creation_date = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"creation_date")), typeof(string));
                            else
                                row.creation_date = null;

                            if (fieldNames.Contains("user_description") && !reader.IsDBNull(reader.GetOrdinal("user_description")))
                                row.user_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"user_description")), typeof(string));
                            else
                                row.user_description = null;

                            if (fieldNames.Contains("total_cnt") && !reader.IsDBNull(reader.GetOrdinal("total_cnt")))
                                row.total_cnt = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_cnt")), typeof(string));
                            else
                                row.total_cnt = null;

                            if (fieldNames.Contains("total_sum") && !reader.IsDBNull(reader.GetOrdinal("total_sum")))
                                row.total_sum = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_sum")), typeof(string));
                            else
                                row.total_sum = null;

                            if (fieldNames.Contains("error_cnt") && !reader.IsDBNull(reader.GetOrdinal("error_cnt")))
                                row.error_cnt = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_cnt")), typeof(string));

                            if (fieldNames.Contains("last_version") && !reader.IsDBNull(reader.GetOrdinal("last_version")))
                                row.last_version = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_version")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_SELECT_SVR_ITEMSResult> OMC_SELECT_SVR_ITEMS (System.Nullable<int> event_id, System.Nullable<int> SVR_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<OMC_SELECT_SVR_ITEMSResult> result = new List<OMC_SELECT_SVR_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_SVR_ITEMS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter SVR_idParameter = cmd.CreateParameter();
                    SVR_idParameter.ParameterName = "SVR_id";
                    SVR_idParameter.Direction = ParameterDirection.Input;
                    SVR_idParameter.DbType = DbType.Int32;
                    SVR_idParameter.Precision = 10;
                    SVR_idParameter.Scale = 0;
                    if (SVR_id.HasValue)
                    {
                        SVR_idParameter.Value = SVR_id.Value;
                    }
                    else
                    {
                        SVR_idParameter.Size = -1;
                        SVR_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SVR_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_SVR_ITEMSResult row = new OMC_SELECT_SVR_ITEMSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(string));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal("price")))
                                row.price = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(string));
                            else
                                row.price = null;

                            if (fieldNames.Contains("summa") && !reader.IsDBNull(reader.GetOrdinal("summa")))
                                row.summa = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summa")), typeof(string));
                            else
                                row.summa = null;

                            if (fieldNames.Contains("turnover") && !reader.IsDBNull(reader.GetOrdinal("turnover")))
                                row.turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"turnover")), typeof(string));
                            else
                                row.turnover = null;

                            if (fieldNames.Contains("delivery_type") && !reader.IsDBNull(reader.GetOrdinal("delivery_type")))
                                row.delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type")), typeof(string));
                            else
                                row.delivery_type = null;

                            if (fieldNames.Contains("error_dmtos") && !reader.IsDBNull(reader.GetOrdinal("error_dmtos")))
                                row.error_dmtos = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_dmtos")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_SELECT_SVR_ITEMSResult>> OMC_SELECT_SVR_ITEMSAsync (System.Nullable<int> event_id, System.Nullable<int> SVR_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<OMC_SELECT_SVR_ITEMSResult> result = new List<OMC_SELECT_SVR_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_SVR_ITEMS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter SVR_idParameter = cmd.CreateParameter();
                    SVR_idParameter.ParameterName = "SVR_id";
                    SVR_idParameter.Direction = ParameterDirection.Input;
                    SVR_idParameter.DbType = DbType.Int32;
                    SVR_idParameter.Precision = 10;
                    SVR_idParameter.Scale = 0;
                    if (SVR_id.HasValue)
                    {
                        SVR_idParameter.Value = SVR_id.Value;
                    }
                    else
                    {
                        SVR_idParameter.Size = -1;
                        SVR_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SVR_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_SVR_ITEMSResult row = new OMC_SELECT_SVR_ITEMSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(string));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal("price")))
                                row.price = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(string));
                            else
                                row.price = null;

                            if (fieldNames.Contains("summa") && !reader.IsDBNull(reader.GetOrdinal("summa")))
                                row.summa = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summa")), typeof(string));
                            else
                                row.summa = null;

                            if (fieldNames.Contains("turnover") && !reader.IsDBNull(reader.GetOrdinal("turnover")))
                                row.turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"turnover")), typeof(string));
                            else
                                row.turnover = null;

                            if (fieldNames.Contains("delivery_type") && !reader.IsDBNull(reader.GetOrdinal("delivery_type")))
                                row.delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type")), typeof(string));
                            else
                                row.delivery_type = null;

                            if (fieldNames.Contains("error_dmtos") && !reader.IsDBNull(reader.GetOrdinal("error_dmtos")))
                                row.error_dmtos = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_dmtos")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_SELECT_SVR_LOADING_ITEMResult> OMC_SELECT_SVR_LOADING_ITEM (System.Nullable<int> loading_id, System.Nullable<int> user_id)
        {

            List<OMC_SELECT_SVR_LOADING_ITEMResult> result = new List<OMC_SELECT_SVR_LOADING_ITEMResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_SVR_LOADING_ITEM";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_SVR_LOADING_ITEMResult row = new OMC_SELECT_SVR_LOADING_ITEMResult();
                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity_description") && !reader.IsDBNull(reader.GetOrdinal("quantity_description")))
                                row.quantity_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity_description")), typeof(string));
                            else
                                row.quantity_description = null;

                            if (fieldNames.Contains("price_description") && !reader.IsDBNull(reader.GetOrdinal("price_description")))
                                row.price_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_description")), typeof(string));
                            else
                                row.price_description = null;

                            if (fieldNames.Contains("summa_description") && !reader.IsDBNull(reader.GetOrdinal("summa_description")))
                                row.summa_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summa_description")), typeof(string));
                            else
                                row.summa_description = null;

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("turnover") && !reader.IsDBNull(reader.GetOrdinal("turnover")))
                                row.turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"turnover")), typeof(string));
                            else
                                row.turnover = null;

                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            if (fieldNames.Contains("warning_description") && !reader.IsDBNull(reader.GetOrdinal("warning_description")))
                                row.warning_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warning_description")), typeof(string));
                            else
                                row.warning_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_SELECT_SVR_LOADING_ITEMResult>> OMC_SELECT_SVR_LOADING_ITEMAsync (System.Nullable<int> loading_id, System.Nullable<int> user_id)
        {

            List<OMC_SELECT_SVR_LOADING_ITEMResult> result = new List<OMC_SELECT_SVR_LOADING_ITEMResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_SVR_LOADING_ITEM";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_SVR_LOADING_ITEMResult row = new OMC_SELECT_SVR_LOADING_ITEMResult();
                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity_description") && !reader.IsDBNull(reader.GetOrdinal("quantity_description")))
                                row.quantity_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity_description")), typeof(string));
                            else
                                row.quantity_description = null;

                            if (fieldNames.Contains("price_description") && !reader.IsDBNull(reader.GetOrdinal("price_description")))
                                row.price_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_description")), typeof(string));
                            else
                                row.price_description = null;

                            if (fieldNames.Contains("summa_description") && !reader.IsDBNull(reader.GetOrdinal("summa_description")))
                                row.summa_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summa_description")), typeof(string));
                            else
                                row.summa_description = null;

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("turnover") && !reader.IsDBNull(reader.GetOrdinal("turnover")))
                                row.turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"turnover")), typeof(string));
                            else
                                row.turnover = null;

                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            if (fieldNames.Contains("warning_description") && !reader.IsDBNull(reader.GetOrdinal("warning_description")))
                                row.warning_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warning_description")), typeof(string));
                            else
                                row.warning_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_SELECT_FORMSResult> OMC_SELECT_FORMS (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> id, System.Nullable<bool> hide_archive)
        {

            List<OMC_SELECT_FORMSResult> result = new List<OMC_SELECT_FORMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORMS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter hide_archiveParameter = cmd.CreateParameter();
                    hide_archiveParameter.ParameterName = "hide_archive";
                    hide_archiveParameter.Direction = ParameterDirection.Input;
                    hide_archiveParameter.DbType = DbType.Boolean;
                    if (hide_archive.HasValue)
                    {
                        hide_archiveParameter.Value = hide_archive.Value;
                    }
                    else
                    {
                        hide_archiveParameter.Size = -1;
                        hide_archiveParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(hide_archiveParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORMSResult row = new OMC_SELECT_FORMSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("form_id") && !reader.IsDBNull(reader.GetOrdinal("form_id")))
                                row.form_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_id")), typeof(int));

                            if (fieldNames.Contains("form_description") && !reader.IsDBNull(reader.GetOrdinal("form_description")))
                                row.form_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_description")), typeof(string));
                            else
                                row.form_description = null;

                            if (fieldNames.Contains("project_id") && !reader.IsDBNull(reader.GetOrdinal("project_id")))
                                row.project_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_id")), typeof(int));

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("modification_date") && !reader.IsDBNull(reader.GetOrdinal("modification_date")))
                                row.modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("owner_description") && !reader.IsDBNull(reader.GetOrdinal("owner_description")))
                                row.owner_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"owner_description")), typeof(string));
                            else
                                row.owner_description = null;

                            if (fieldNames.Contains("total_cnt") && !reader.IsDBNull(reader.GetOrdinal("total_cnt")))
                                row.total_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_cnt")), typeof(int));

                            if (fieldNames.Contains("total_diff") && !reader.IsDBNull(reader.GetOrdinal("total_diff")))
                                row.total_diff = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_diff")), typeof(int));

                            if (fieldNames.Contains("unsi_declined") && !reader.IsDBNull(reader.GetOrdinal("unsi_declined")))
                                row.unsi_declined = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unsi_declined")), typeof(int));

                            if (fieldNames.Contains("dmtos_declined") && !reader.IsDBNull(reader.GetOrdinal("dmtos_declined")))
                                row.dmtos_declined = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dmtos_declined")), typeof(int));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_SELECT_FORMSResult>> OMC_SELECT_FORMSAsync (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> id, System.Nullable<bool> hide_archive)
        {

            List<OMC_SELECT_FORMSResult> result = new List<OMC_SELECT_FORMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORMS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter hide_archiveParameter = cmd.CreateParameter();
                    hide_archiveParameter.ParameterName = "hide_archive";
                    hide_archiveParameter.Direction = ParameterDirection.Input;
                    hide_archiveParameter.DbType = DbType.Boolean;
                    if (hide_archive.HasValue)
                    {
                        hide_archiveParameter.Value = hide_archive.Value;
                    }
                    else
                    {
                        hide_archiveParameter.Size = -1;
                        hide_archiveParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(hide_archiveParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORMSResult row = new OMC_SELECT_FORMSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("form_id") && !reader.IsDBNull(reader.GetOrdinal("form_id")))
                                row.form_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_id")), typeof(int));

                            if (fieldNames.Contains("form_description") && !reader.IsDBNull(reader.GetOrdinal("form_description")))
                                row.form_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_description")), typeof(string));
                            else
                                row.form_description = null;

                            if (fieldNames.Contains("project_id") && !reader.IsDBNull(reader.GetOrdinal("project_id")))
                                row.project_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_id")), typeof(int));

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("modification_date") && !reader.IsDBNull(reader.GetOrdinal("modification_date")))
                                row.modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("owner_description") && !reader.IsDBNull(reader.GetOrdinal("owner_description")))
                                row.owner_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"owner_description")), typeof(string));
                            else
                                row.owner_description = null;

                            if (fieldNames.Contains("total_cnt") && !reader.IsDBNull(reader.GetOrdinal("total_cnt")))
                                row.total_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_cnt")), typeof(int));

                            if (fieldNames.Contains("total_diff") && !reader.IsDBNull(reader.GetOrdinal("total_diff")))
                                row.total_diff = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_diff")), typeof(int));

                            if (fieldNames.Contains("unsi_declined") && !reader.IsDBNull(reader.GetOrdinal("unsi_declined")))
                                row.unsi_declined = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unsi_declined")), typeof(int));

                            if (fieldNames.Contains("dmtos_declined") && !reader.IsDBNull(reader.GetOrdinal("dmtos_declined")))
                                row.dmtos_declined = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dmtos_declined")), typeof(int));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_SELECT_FORM_RSS_ITEMSResult> OMC_SELECT_FORM_RSS_ITEMS (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id, System.Nullable<int> id, System.Nullable<bool> show_only_for_pricing)
        {

            List<OMC_SELECT_FORM_RSS_ITEMSResult> result = new List<OMC_SELECT_FORM_RSS_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_RSS_ITEMS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter show_only_for_pricingParameter = cmd.CreateParameter();
                    show_only_for_pricingParameter.ParameterName = "show_only_for_pricing";
                    show_only_for_pricingParameter.Direction = ParameterDirection.Input;
                    show_only_for_pricingParameter.DbType = DbType.Boolean;
                    if (show_only_for_pricing.HasValue)
                    {
                        show_only_for_pricingParameter.Value = show_only_for_pricing.Value;
                    }
                    else
                    {
                        show_only_for_pricingParameter.Size = -1;
                        show_only_for_pricingParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_only_for_pricingParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_RSS_ITEMSResult row = new OMC_SELECT_FORM_RSS_ITEMSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("form_id") && !reader.IsDBNull(reader.GetOrdinal("form_id")))
                                row.form_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_id")), typeof(int));
                            else
                                row.form_id = null;

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("subcontractor_id") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_id")))
                                row.subcontractor_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_id")), typeof(int));

                            if (fieldNames.Contains("subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_description")))
                                row.subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_description")), typeof(string));
                            else
                                row.subcontractor_description = null;

                            if (fieldNames.Contains("lno_id") && !reader.IsDBNull(reader.GetOrdinal("lno_id")))
                                row.lno_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_id")), typeof(int));

                            if (fieldNames.Contains("lno_description") && !reader.IsDBNull(reader.GetOrdinal("lno_description")))
                                row.lno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_description")), typeof(string));
                            else
                                row.lno_description = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("revision_number") && !reader.IsDBNull(reader.GetOrdinal("revision_number")))
                                row.revision_number = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_number")), typeof(int));
                            else
                                row.revision_number = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));

                            if (fieldNames.Contains("price_manager_id") && !reader.IsDBNull(reader.GetOrdinal("price_manager_id")))
                                row.price_manager_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_id")), typeof(int));
                            else
                                row.price_manager_id = null;

                            if (fieldNames.Contains("price_manager_description") && !reader.IsDBNull(reader.GetOrdinal("price_manager_description")))
                                row.price_manager_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_description")), typeof(string));
                            else
                                row.price_manager_description = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("additional_properties") && !reader.IsDBNull(reader.GetOrdinal("additional_properties")))
                                row.additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_properties")), typeof(string));
                            else
                                row.additional_properties = null;

                            if (fieldNames.Contains("package_contents") && !reader.IsDBNull(reader.GetOrdinal("package_contents")))
                                row.package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_contents")), typeof(string));
                            else
                                row.package_contents = null;

                            if (fieldNames.Contains("manufacturer") && !reader.IsDBNull(reader.GetOrdinal("manufacturer")))
                                row.manufacturer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"manufacturer")), typeof(string));
                            else
                                row.manufacturer = null;

                            if (fieldNames.Contains("unit_id") && !reader.IsDBNull(reader.GetOrdinal("unit_id")))
                                row.unit_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_id")), typeof(int));

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("mass_per_unit") && !reader.IsDBNull(reader.GetOrdinal("mass_per_unit")))
                                row.mass_per_unit = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_per_unit")), typeof(double));
                            else
                                row.mass_per_unit = null;

                            if (fieldNames.Contains("mass_size") && !reader.IsDBNull(reader.GetOrdinal("mass_size")))
                                row.mass_size = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_size")), typeof(string));
                            else
                                row.mass_size = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("summary2") && !reader.IsDBNull(reader.GetOrdinal("summary2")))
                                row.summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary2")), typeof(string));
                            else
                                row.summary2 = null;

                            if (fieldNames.Contains("project_requirement_source") && !reader.IsDBNull(reader.GetOrdinal("project_requirement_source")))
                                row.project_requirement_source = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_requirement_source")), typeof(string));
                            else
                                row.project_requirement_source = null;

                            if (fieldNames.Contains("delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_description")))
                                row.delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_description")), typeof(string));
                            else
                                row.delivery_type_description = null;

                            if (fieldNames.Contains("suggested_delivery_type_id") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_id")))
                                row.suggested_delivery_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_id")), typeof(int));
                            else
                                row.suggested_delivery_type_id = null;

                            if (fieldNames.Contains("suggested_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_description")))
                                row.suggested_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_description")), typeof(string));
                            else
                                row.suggested_delivery_type_description = null;

                            if (fieldNames.Contains("delivery_type_id") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_id")))
                                row.delivery_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_id")), typeof(int));
                            else
                                row.delivery_type_id = null;

                            if (fieldNames.Contains("delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_description")))
                                row.delivery_type_description1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_description")), typeof(string));
                            else
                                row.delivery_type_description1 = null;

                            if (fieldNames.Contains("unsi_comment") && !reader.IsDBNull(reader.GetOrdinal("unsi_comment")))
                                row.unsi_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unsi_comment")), typeof(string));

                            if (fieldNames.Contains("dmtos_comment") && !reader.IsDBNull(reader.GetOrdinal("dmtos_comment")))
                                row.dmtos_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dmtos_comment")), typeof(string));

                            if (fieldNames.Contains("chanhes_info") && !reader.IsDBNull(reader.GetOrdinal("chanhes_info")))
                                row.chanhes_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"chanhes_info")), typeof(string));

                            if (fieldNames.Contains("commit_changes_date") && !reader.IsDBNull(reader.GetOrdinal("commit_changes_date")))
                                row.commit_changes_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"commit_changes_date")), typeof(System.DateTime));
                            else
                                row.commit_changes_date = null;

                            if (fieldNames.Contains("project_requirement_state_id") && !reader.IsDBNull(reader.GetOrdinal("project_requirement_state_id")))
                                row.project_requirement_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_requirement_state_id")), typeof(int));

                            if (fieldNames.Contains("project_requirement_state_description") && !reader.IsDBNull(reader.GetOrdinal("project_requirement_state_description")))
                                row.project_requirement_state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_requirement_state_description")), typeof(string));
                            else
                                row.project_requirement_state_description = null;

                            if (fieldNames.Contains("for_pricing") && !reader.IsDBNull(reader.GetOrdinal("for_pricing")))
                                row.for_pricing = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"for_pricing")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_SELECT_FORM_RSS_ITEMSResult>> OMC_SELECT_FORM_RSS_ITEMSAsync (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id, System.Nullable<int> id, System.Nullable<bool> show_only_for_pricing)
        {

            List<OMC_SELECT_FORM_RSS_ITEMSResult> result = new List<OMC_SELECT_FORM_RSS_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_RSS_ITEMS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter show_only_for_pricingParameter = cmd.CreateParameter();
                    show_only_for_pricingParameter.ParameterName = "show_only_for_pricing";
                    show_only_for_pricingParameter.Direction = ParameterDirection.Input;
                    show_only_for_pricingParameter.DbType = DbType.Boolean;
                    if (show_only_for_pricing.HasValue)
                    {
                        show_only_for_pricingParameter.Value = show_only_for_pricing.Value;
                    }
                    else
                    {
                        show_only_for_pricingParameter.Size = -1;
                        show_only_for_pricingParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_only_for_pricingParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_RSS_ITEMSResult row = new OMC_SELECT_FORM_RSS_ITEMSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("form_id") && !reader.IsDBNull(reader.GetOrdinal("form_id")))
                                row.form_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_id")), typeof(int));
                            else
                                row.form_id = null;

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("subcontractor_id") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_id")))
                                row.subcontractor_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_id")), typeof(int));

                            if (fieldNames.Contains("subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_description")))
                                row.subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_description")), typeof(string));
                            else
                                row.subcontractor_description = null;

                            if (fieldNames.Contains("lno_id") && !reader.IsDBNull(reader.GetOrdinal("lno_id")))
                                row.lno_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_id")), typeof(int));

                            if (fieldNames.Contains("lno_description") && !reader.IsDBNull(reader.GetOrdinal("lno_description")))
                                row.lno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_description")), typeof(string));
                            else
                                row.lno_description = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("revision_number") && !reader.IsDBNull(reader.GetOrdinal("revision_number")))
                                row.revision_number = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_number")), typeof(int));
                            else
                                row.revision_number = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));

                            if (fieldNames.Contains("price_manager_id") && !reader.IsDBNull(reader.GetOrdinal("price_manager_id")))
                                row.price_manager_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_id")), typeof(int));
                            else
                                row.price_manager_id = null;

                            if (fieldNames.Contains("price_manager_description") && !reader.IsDBNull(reader.GetOrdinal("price_manager_description")))
                                row.price_manager_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_description")), typeof(string));
                            else
                                row.price_manager_description = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("additional_properties") && !reader.IsDBNull(reader.GetOrdinal("additional_properties")))
                                row.additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_properties")), typeof(string));
                            else
                                row.additional_properties = null;

                            if (fieldNames.Contains("package_contents") && !reader.IsDBNull(reader.GetOrdinal("package_contents")))
                                row.package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_contents")), typeof(string));
                            else
                                row.package_contents = null;

                            if (fieldNames.Contains("manufacturer") && !reader.IsDBNull(reader.GetOrdinal("manufacturer")))
                                row.manufacturer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"manufacturer")), typeof(string));
                            else
                                row.manufacturer = null;

                            if (fieldNames.Contains("unit_id") && !reader.IsDBNull(reader.GetOrdinal("unit_id")))
                                row.unit_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_id")), typeof(int));

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("mass_per_unit") && !reader.IsDBNull(reader.GetOrdinal("mass_per_unit")))
                                row.mass_per_unit = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_per_unit")), typeof(double));
                            else
                                row.mass_per_unit = null;

                            if (fieldNames.Contains("mass_size") && !reader.IsDBNull(reader.GetOrdinal("mass_size")))
                                row.mass_size = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_size")), typeof(string));
                            else
                                row.mass_size = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("summary2") && !reader.IsDBNull(reader.GetOrdinal("summary2")))
                                row.summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary2")), typeof(string));
                            else
                                row.summary2 = null;

                            if (fieldNames.Contains("project_requirement_source") && !reader.IsDBNull(reader.GetOrdinal("project_requirement_source")))
                                row.project_requirement_source = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_requirement_source")), typeof(string));
                            else
                                row.project_requirement_source = null;

                            if (fieldNames.Contains("delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_description")))
                                row.delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_description")), typeof(string));
                            else
                                row.delivery_type_description = null;

                            if (fieldNames.Contains("suggested_delivery_type_id") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_id")))
                                row.suggested_delivery_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_id")), typeof(int));
                            else
                                row.suggested_delivery_type_id = null;

                            if (fieldNames.Contains("suggested_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_description")))
                                row.suggested_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_description")), typeof(string));
                            else
                                row.suggested_delivery_type_description = null;

                            if (fieldNames.Contains("delivery_type_id") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_id")))
                                row.delivery_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_id")), typeof(int));
                            else
                                row.delivery_type_id = null;

                            if (fieldNames.Contains("delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_description")))
                                row.delivery_type_description1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_description")), typeof(string));
                            else
                                row.delivery_type_description1 = null;

                            if (fieldNames.Contains("unsi_comment") && !reader.IsDBNull(reader.GetOrdinal("unsi_comment")))
                                row.unsi_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unsi_comment")), typeof(string));

                            if (fieldNames.Contains("dmtos_comment") && !reader.IsDBNull(reader.GetOrdinal("dmtos_comment")))
                                row.dmtos_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dmtos_comment")), typeof(string));

                            if (fieldNames.Contains("chanhes_info") && !reader.IsDBNull(reader.GetOrdinal("chanhes_info")))
                                row.chanhes_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"chanhes_info")), typeof(string));

                            if (fieldNames.Contains("commit_changes_date") && !reader.IsDBNull(reader.GetOrdinal("commit_changes_date")))
                                row.commit_changes_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"commit_changes_date")), typeof(System.DateTime));
                            else
                                row.commit_changes_date = null;

                            if (fieldNames.Contains("project_requirement_state_id") && !reader.IsDBNull(reader.GetOrdinal("project_requirement_state_id")))
                                row.project_requirement_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_requirement_state_id")), typeof(int));

                            if (fieldNames.Contains("project_requirement_state_description") && !reader.IsDBNull(reader.GetOrdinal("project_requirement_state_description")))
                                row.project_requirement_state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_requirement_state_description")), typeof(string));
                            else
                                row.project_requirement_state_description = null;

                            if (fieldNames.Contains("for_pricing") && !reader.IsDBNull(reader.GetOrdinal("for_pricing")))
                                row.for_pricing = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"for_pricing")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_SELECT_FORM_SVR_ITEMSResult> OMC_SELECT_FORM_SVR_ITEMS (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id, System.Nullable<int> id, System.Nullable<bool> show_only_for_pricing)
        {

            List<OMC_SELECT_FORM_SVR_ITEMSResult> result = new List<OMC_SELECT_FORM_SVR_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_SVR_ITEMS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter show_only_for_pricingParameter = cmd.CreateParameter();
                    show_only_for_pricingParameter.ParameterName = "show_only_for_pricing";
                    show_only_for_pricingParameter.Direction = ParameterDirection.Input;
                    show_only_for_pricingParameter.DbType = DbType.Boolean;
                    if (show_only_for_pricing.HasValue)
                    {
                        show_only_for_pricingParameter.Value = show_only_for_pricing.Value;
                    }
                    else
                    {
                        show_only_for_pricingParameter.Size = -1;
                        show_only_for_pricingParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_only_for_pricingParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_SVR_ITEMSResult row = new OMC_SELECT_FORM_SVR_ITEMSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("form_id") && !reader.IsDBNull(reader.GetOrdinal("form_id")))
                                row.form_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_id")), typeof(int));
                            else
                                row.form_id = null;

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));

                            if (fieldNames.Contains("price_manager_id") && !reader.IsDBNull(reader.GetOrdinal("price_manager_id")))
                                row.price_manager_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_id")), typeof(int));
                            else
                                row.price_manager_id = null;

                            if (fieldNames.Contains("price_manager_description") && !reader.IsDBNull(reader.GetOrdinal("price_manager_description")))
                                row.price_manager_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_description")), typeof(string));
                            else
                                row.price_manager_description = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_id") && !reader.IsDBNull(reader.GetOrdinal("unit_id")))
                                row.unit_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_id")), typeof(int));

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal("price")))
                                row.price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(double));
                            else
                                row.price = null;

                            if (fieldNames.Contains("summa") && !reader.IsDBNull(reader.GetOrdinal("summa")))
                                row.summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summa")), typeof(double));
                            else
                                row.summa = null;

                            if (fieldNames.Contains("turnover") && !reader.IsDBNull(reader.GetOrdinal("turnover")))
                                row.turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"turnover")), typeof(string));
                            else
                                row.turnover = null;

                            if (fieldNames.Contains("svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("svr_delivery_type")))
                                row.svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"svr_delivery_type")), typeof(string));
                            else
                                row.svr_delivery_type = null;

                            if (fieldNames.Contains("add_info") && !reader.IsDBNull(reader.GetOrdinal("add_info")))
                                row.add_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"add_info")), typeof(string));
                            else
                                row.add_info = null;

                            if (fieldNames.Contains("suggested_delivery_type_id") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_id")))
                                row.suggested_delivery_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_id")), typeof(int));
                            else
                                row.suggested_delivery_type_id = null;

                            if (fieldNames.Contains("suggested_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_description")))
                                row.suggested_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_description")), typeof(string));
                            else
                                row.suggested_delivery_type_description = null;

                            if (fieldNames.Contains("delivery_type_id") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_id")))
                                row.delivery_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_id")), typeof(int));
                            else
                                row.delivery_type_id = null;

                            if (fieldNames.Contains("delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_description")))
                                row.delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_description")), typeof(string));
                            else
                                row.delivery_type_description = null;

                            if (fieldNames.Contains("unsi_comment") && !reader.IsDBNull(reader.GetOrdinal("unsi_comment")))
                                row.unsi_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unsi_comment")), typeof(string));

                            if (fieldNames.Contains("dmtos_comment") && !reader.IsDBNull(reader.GetOrdinal("dmtos_comment")))
                                row.dmtos_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dmtos_comment")), typeof(string));

                            if (fieldNames.Contains("changes_info") && !reader.IsDBNull(reader.GetOrdinal("changes_info")))
                                row.changes_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"changes_info")), typeof(string));

                            if (fieldNames.Contains("commit_changes_date") && !reader.IsDBNull(reader.GetOrdinal("commit_changes_date")))
                                row.commit_changes_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"commit_changes_date")), typeof(System.DateTime));
                            else
                                row.commit_changes_date = null;

                            if (fieldNames.Contains("for_pricing") && !reader.IsDBNull(reader.GetOrdinal("for_pricing")))
                                row.for_pricing = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"for_pricing")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_SELECT_FORM_SVR_ITEMSResult>> OMC_SELECT_FORM_SVR_ITEMSAsync (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id, System.Nullable<int> id, System.Nullable<bool> show_only_for_pricing)
        {

            List<OMC_SELECT_FORM_SVR_ITEMSResult> result = new List<OMC_SELECT_FORM_SVR_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_SVR_ITEMS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter show_only_for_pricingParameter = cmd.CreateParameter();
                    show_only_for_pricingParameter.ParameterName = "show_only_for_pricing";
                    show_only_for_pricingParameter.Direction = ParameterDirection.Input;
                    show_only_for_pricingParameter.DbType = DbType.Boolean;
                    if (show_only_for_pricing.HasValue)
                    {
                        show_only_for_pricingParameter.Value = show_only_for_pricing.Value;
                    }
                    else
                    {
                        show_only_for_pricingParameter.Size = -1;
                        show_only_for_pricingParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_only_for_pricingParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_SVR_ITEMSResult row = new OMC_SELECT_FORM_SVR_ITEMSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("form_id") && !reader.IsDBNull(reader.GetOrdinal("form_id")))
                                row.form_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_id")), typeof(int));
                            else
                                row.form_id = null;

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));

                            if (fieldNames.Contains("price_manager_id") && !reader.IsDBNull(reader.GetOrdinal("price_manager_id")))
                                row.price_manager_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_id")), typeof(int));
                            else
                                row.price_manager_id = null;

                            if (fieldNames.Contains("price_manager_description") && !reader.IsDBNull(reader.GetOrdinal("price_manager_description")))
                                row.price_manager_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_description")), typeof(string));
                            else
                                row.price_manager_description = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_id") && !reader.IsDBNull(reader.GetOrdinal("unit_id")))
                                row.unit_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_id")), typeof(int));

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal("price")))
                                row.price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(double));
                            else
                                row.price = null;

                            if (fieldNames.Contains("summa") && !reader.IsDBNull(reader.GetOrdinal("summa")))
                                row.summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summa")), typeof(double));
                            else
                                row.summa = null;

                            if (fieldNames.Contains("turnover") && !reader.IsDBNull(reader.GetOrdinal("turnover")))
                                row.turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"turnover")), typeof(string));
                            else
                                row.turnover = null;

                            if (fieldNames.Contains("svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("svr_delivery_type")))
                                row.svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"svr_delivery_type")), typeof(string));
                            else
                                row.svr_delivery_type = null;

                            if (fieldNames.Contains("add_info") && !reader.IsDBNull(reader.GetOrdinal("add_info")))
                                row.add_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"add_info")), typeof(string));
                            else
                                row.add_info = null;

                            if (fieldNames.Contains("suggested_delivery_type_id") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_id")))
                                row.suggested_delivery_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_id")), typeof(int));
                            else
                                row.suggested_delivery_type_id = null;

                            if (fieldNames.Contains("suggested_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_description")))
                                row.suggested_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_description")), typeof(string));
                            else
                                row.suggested_delivery_type_description = null;

                            if (fieldNames.Contains("delivery_type_id") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_id")))
                                row.delivery_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_id")), typeof(int));
                            else
                                row.delivery_type_id = null;

                            if (fieldNames.Contains("delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_description")))
                                row.delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_description")), typeof(string));
                            else
                                row.delivery_type_description = null;

                            if (fieldNames.Contains("unsi_comment") && !reader.IsDBNull(reader.GetOrdinal("unsi_comment")))
                                row.unsi_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unsi_comment")), typeof(string));

                            if (fieldNames.Contains("dmtos_comment") && !reader.IsDBNull(reader.GetOrdinal("dmtos_comment")))
                                row.dmtos_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dmtos_comment")), typeof(string));

                            if (fieldNames.Contains("changes_info") && !reader.IsDBNull(reader.GetOrdinal("changes_info")))
                                row.changes_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"changes_info")), typeof(string));

                            if (fieldNames.Contains("commit_changes_date") && !reader.IsDBNull(reader.GetOrdinal("commit_changes_date")))
                                row.commit_changes_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"commit_changes_date")), typeof(System.DateTime));
                            else
                                row.commit_changes_date = null;

                            if (fieldNames.Contains("for_pricing") && !reader.IsDBNull(reader.GetOrdinal("for_pricing")))
                                row.for_pricing = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"for_pricing")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_SELECT_LINKResult> UI_SELECT_LINK (string action, string controller, string param)
        {

            List<UI_SELECT_LINKResult> result = new List<UI_SELECT_LINKResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK";

                    DbParameter actionParameter = cmd.CreateParameter();
                    actionParameter.ParameterName = "action";
                    actionParameter.Direction = ParameterDirection.Input;
                    actionParameter.DbType = DbType.String;
                    if (action != null)
                    {
                        actionParameter.Value = action;
                    }
                    else
                    {
                        actionParameter.Size = -1;
                        actionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(actionParameter);

                    DbParameter controllerParameter = cmd.CreateParameter();
                    controllerParameter.ParameterName = "controller";
                    controllerParameter.Direction = ParameterDirection.Input;
                    controllerParameter.DbType = DbType.String;
                    if (controller != null)
                    {
                        controllerParameter.Value = controller;
                    }
                    else
                    {
                        controllerParameter.Size = -1;
                        controllerParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(controllerParameter);

                    DbParameter paramParameter = cmd.CreateParameter();
                    paramParameter.ParameterName = "param";
                    paramParameter.Direction = ParameterDirection.Input;
                    paramParameter.DbType = DbType.String;
                    if (param != null)
                    {
                        paramParameter.Value = param;
                    }
                    else
                    {
                        paramParameter.Size = -1;
                        paramParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(paramParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINKResult row = new UI_SELECT_LINKResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("legend") && !reader.IsDBNull(reader.GetOrdinal("legend")))
                                row.legend = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legend")), typeof(string));
                            else
                                row.legend = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_SELECT_LINKResult>> UI_SELECT_LINKAsync (string action, string controller, string param)
        {

            List<UI_SELECT_LINKResult> result = new List<UI_SELECT_LINKResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK";

                    DbParameter actionParameter = cmd.CreateParameter();
                    actionParameter.ParameterName = "action";
                    actionParameter.Direction = ParameterDirection.Input;
                    actionParameter.DbType = DbType.String;
                    if (action != null)
                    {
                        actionParameter.Value = action;
                    }
                    else
                    {
                        actionParameter.Size = -1;
                        actionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(actionParameter);

                    DbParameter controllerParameter = cmd.CreateParameter();
                    controllerParameter.ParameterName = "controller";
                    controllerParameter.Direction = ParameterDirection.Input;
                    controllerParameter.DbType = DbType.String;
                    if (controller != null)
                    {
                        controllerParameter.Value = controller;
                    }
                    else
                    {
                        controllerParameter.Size = -1;
                        controllerParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(controllerParameter);

                    DbParameter paramParameter = cmd.CreateParameter();
                    paramParameter.ParameterName = "param";
                    paramParameter.Direction = ParameterDirection.Input;
                    paramParameter.DbType = DbType.String;
                    if (param != null)
                    {
                        paramParameter.Value = param;
                    }
                    else
                    {
                        paramParameter.Size = -1;
                        paramParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(paramParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINKResult row = new UI_SELECT_LINKResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("legend") && !reader.IsDBNull(reader.GetOrdinal("legend")))
                                row.legend = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legend")), typeof(string));
                            else
                                row.legend = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_SELECT_DROPDOWN_TXTResult> UI_SELECT_DROPDOWN_TXT (string dropdown, string param, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_SELECT_DROPDOWN_TXTResult> result = new List<UI_SELECT_DROPDOWN_TXTResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_DROPDOWN_TXT";

                    DbParameter dropdownParameter = cmd.CreateParameter();
                    dropdownParameter.ParameterName = "dropdown";
                    dropdownParameter.Direction = ParameterDirection.Input;
                    dropdownParameter.DbType = DbType.String;
                    if (dropdown != null)
                    {
                        dropdownParameter.Value = dropdown;
                    }
                    else
                    {
                        dropdownParameter.Size = -1;
                        dropdownParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(dropdownParameter);

                    DbParameter paramParameter = cmd.CreateParameter();
                    paramParameter.ParameterName = "param";
                    paramParameter.Direction = ParameterDirection.Input;
                    paramParameter.DbType = DbType.String;
                    if (param != null)
                    {
                        paramParameter.Value = param;
                    }
                    else
                    {
                        paramParameter.Size = -1;
                        paramParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(paramParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_DROPDOWN_TXTResult row = new UI_SELECT_DROPDOWN_TXTResult();
                            if (fieldNames.Contains("guid") && !reader.IsDBNull(reader.GetOrdinal("guid")))
                                row.guid = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"guid")), typeof(string));
                            else
                                row.guid = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_SELECT_DROPDOWN_TXTResult>> UI_SELECT_DROPDOWN_TXTAsync (string dropdown, string param, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_SELECT_DROPDOWN_TXTResult> result = new List<UI_SELECT_DROPDOWN_TXTResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_DROPDOWN_TXT";

                    DbParameter dropdownParameter = cmd.CreateParameter();
                    dropdownParameter.ParameterName = "dropdown";
                    dropdownParameter.Direction = ParameterDirection.Input;
                    dropdownParameter.DbType = DbType.String;
                    if (dropdown != null)
                    {
                        dropdownParameter.Value = dropdown;
                    }
                    else
                    {
                        dropdownParameter.Size = -1;
                        dropdownParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(dropdownParameter);

                    DbParameter paramParameter = cmd.CreateParameter();
                    paramParameter.ParameterName = "param";
                    paramParameter.Direction = ParameterDirection.Input;
                    paramParameter.DbType = DbType.String;
                    if (param != null)
                    {
                        paramParameter.Value = param;
                    }
                    else
                    {
                        paramParameter.Size = -1;
                        paramParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(paramParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_DROPDOWN_TXTResult row = new UI_SELECT_DROPDOWN_TXTResult();
                            if (fieldNames.Contains("guid") && !reader.IsDBNull(reader.GetOrdinal("guid")))
                                row.guid = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"guid")), typeof(string));
                            else
                                row.guid = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> APL_UPDATE_OBJECT2 (System.Nullable<int> id, string description, System.Nullable<double> start, System.Nullable<double> finish, string project_1c_guid, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_OBJECT2";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter startParameter = cmd.CreateParameter();
                    startParameter.ParameterName = "start";
                    startParameter.Direction = ParameterDirection.Input;
                    startParameter.DbType = DbType.Double;
                    startParameter.Precision = 53;
                    if (start.HasValue)
                    {
                        startParameter.Value = start.Value;
                    }
                    else
                    {
                        startParameter.Size = -1;
                        startParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startParameter);

                    DbParameter finishParameter = cmd.CreateParameter();
                    finishParameter.ParameterName = "finish";
                    finishParameter.Direction = ParameterDirection.Input;
                    finishParameter.DbType = DbType.Double;
                    finishParameter.Precision = 53;
                    if (finish.HasValue)
                    {
                        finishParameter.Value = finish.Value;
                    }
                    else
                    {
                        finishParameter.Size = -1;
                        finishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finishParameter);

                    DbParameter project_1c_guidParameter = cmd.CreateParameter();
                    project_1c_guidParameter.ParameterName = "project_1c_guid";
                    project_1c_guidParameter.Direction = ParameterDirection.Input;
                    project_1c_guidParameter.DbType = DbType.String;
                    if (project_1c_guid != null)
                    {
                        project_1c_guidParameter.Value = project_1c_guid;
                    }
                    else
                    {
                        project_1c_guidParameter.Size = -1;
                        project_1c_guidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_1c_guidParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> APL_UPDATE_OBJECT2Async (System.Nullable<int> id, string description, System.Nullable<double> start, System.Nullable<double> finish, string project_1c_guid, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_OBJECT2";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter startParameter = cmd.CreateParameter();
                    startParameter.ParameterName = "start";
                    startParameter.Direction = ParameterDirection.Input;
                    startParameter.DbType = DbType.Double;
                    startParameter.Precision = 53;
                    if (start.HasValue)
                    {
                        startParameter.Value = start.Value;
                    }
                    else
                    {
                        startParameter.Size = -1;
                        startParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startParameter);

                    DbParameter finishParameter = cmd.CreateParameter();
                    finishParameter.ParameterName = "finish";
                    finishParameter.Direction = ParameterDirection.Input;
                    finishParameter.DbType = DbType.Double;
                    finishParameter.Precision = 53;
                    if (finish.HasValue)
                    {
                        finishParameter.Value = finish.Value;
                    }
                    else
                    {
                        finishParameter.Size = -1;
                        finishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finishParameter);

                    DbParameter project_1c_guidParameter = cmd.CreateParameter();
                    project_1c_guidParameter.ParameterName = "project_1c_guid";
                    project_1c_guidParameter.Direction = ParameterDirection.Input;
                    project_1c_guidParameter.DbType = DbType.String;
                    if (project_1c_guid != null)
                    {
                        project_1c_guidParameter.Value = project_1c_guid;
                    }
                    else
                    {
                        project_1c_guidParameter.Size = -1;
                        project_1c_guidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_1c_guidParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> APL_UPDATE_SUBOBJECT2 (System.Nullable<int> id, System.Nullable<int> object_id, string description, System.Nullable<double> start, System.Nullable<double> finish, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_SUBOBJECT2";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter object_idParameter = cmd.CreateParameter();
                    object_idParameter.ParameterName = "object_id";
                    object_idParameter.Direction = ParameterDirection.Input;
                    object_idParameter.DbType = DbType.Int32;
                    object_idParameter.Precision = 10;
                    object_idParameter.Scale = 0;
                    if (object_id.HasValue)
                    {
                        object_idParameter.Value = object_id.Value;
                    }
                    else
                    {
                        object_idParameter.Size = -1;
                        object_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(object_idParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter startParameter = cmd.CreateParameter();
                    startParameter.ParameterName = "start";
                    startParameter.Direction = ParameterDirection.Input;
                    startParameter.DbType = DbType.Double;
                    startParameter.Precision = 53;
                    if (start.HasValue)
                    {
                        startParameter.Value = start.Value;
                    }
                    else
                    {
                        startParameter.Size = -1;
                        startParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startParameter);

                    DbParameter finishParameter = cmd.CreateParameter();
                    finishParameter.ParameterName = "finish";
                    finishParameter.Direction = ParameterDirection.Input;
                    finishParameter.DbType = DbType.Double;
                    finishParameter.Precision = 53;
                    if (finish.HasValue)
                    {
                        finishParameter.Value = finish.Value;
                    }
                    else
                    {
                        finishParameter.Size = -1;
                        finishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finishParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> APL_UPDATE_SUBOBJECT2Async (System.Nullable<int> id, System.Nullable<int> object_id, string description, System.Nullable<double> start, System.Nullable<double> finish, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_SUBOBJECT2";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter object_idParameter = cmd.CreateParameter();
                    object_idParameter.ParameterName = "object_id";
                    object_idParameter.Direction = ParameterDirection.Input;
                    object_idParameter.DbType = DbType.Int32;
                    object_idParameter.Precision = 10;
                    object_idParameter.Scale = 0;
                    if (object_id.HasValue)
                    {
                        object_idParameter.Value = object_id.Value;
                    }
                    else
                    {
                        object_idParameter.Size = -1;
                        object_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(object_idParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter startParameter = cmd.CreateParameter();
                    startParameter.ParameterName = "start";
                    startParameter.Direction = ParameterDirection.Input;
                    startParameter.DbType = DbType.Double;
                    startParameter.Precision = 53;
                    if (start.HasValue)
                    {
                        startParameter.Value = start.Value;
                    }
                    else
                    {
                        startParameter.Size = -1;
                        startParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startParameter);

                    DbParameter finishParameter = cmd.CreateParameter();
                    finishParameter.ParameterName = "finish";
                    finishParameter.Direction = ParameterDirection.Input;
                    finishParameter.DbType = DbType.Double;
                    finishParameter.Precision = 53;
                    if (finish.HasValue)
                    {
                        finishParameter.Value = finish.Value;
                    }
                    else
                    {
                        finishParameter.Size = -1;
                        finishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finishParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSResult> APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTS (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> id)
        {

            List<APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSResult> result = new List<APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSResult row = new APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("lno_id") && !reader.IsDBNull(reader.GetOrdinal("lno_id")))
                                row.lno_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_id")), typeof(int));

                            if (fieldNames.Contains("lno_description") && !reader.IsDBNull(reader.GetOrdinal("lno_description")))
                                row.lno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_description")), typeof(string));
                            else
                                row.lno_description = null;

                            if (fieldNames.Contains("start") && !reader.IsDBNull(reader.GetOrdinal("start")))
                                row.start = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start")), typeof(double));

                            if (fieldNames.Contains("finish") && !reader.IsDBNull(reader.GetOrdinal("finish")))
                                row.finish = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish")), typeof(double));
                            else
                                row.finish = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSResult>> APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSAsync (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> id)
        {

            List<APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSResult> result = new List<APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSResult row = new APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("lno_id") && !reader.IsDBNull(reader.GetOrdinal("lno_id")))
                                row.lno_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_id")), typeof(int));

                            if (fieldNames.Contains("lno_description") && !reader.IsDBNull(reader.GetOrdinal("lno_description")))
                                row.lno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_description")), typeof(string));
                            else
                                row.lno_description = null;

                            if (fieldNames.Contains("start") && !reader.IsDBNull(reader.GetOrdinal("start")))
                                row.start = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start")), typeof(double));

                            if (fieldNames.Contains("finish") && !reader.IsDBNull(reader.GetOrdinal("finish")))
                                row.finish = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish")), typeof(double));
                            else
                                row.finish = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        #endregion

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
