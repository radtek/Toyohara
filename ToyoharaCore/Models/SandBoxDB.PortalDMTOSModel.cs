//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 29.11.2018 17:43:28
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace ToyoharaCore
{

    public partial class PortalDMTOSModel : DbContext
    {

        public PortalDMTOSModel() :
            base()
        {
            OnCreated();
        }

        public PortalDMTOSModel(DbContextOptions<PortalDMTOSModel> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                if (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null))
                  optionsBuilder.UseSqlServer(@"Data Source=sql061;Initial Catalog=PortalDMTOS;Integrated Security=False;Persist Security Info=True;User ID=sendbox;Password=Sendbox01;Connect Timeout=5000");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        #region Methods

        public List<SYS_AUTHORIZE_USER2Result> SYS_AUTHORIZE_USER2 (string login, System.Nullable<int> user_id, string browser, string server_name)
        {

            List<SYS_AUTHORIZE_USER2Result> result = new List<SYS_AUTHORIZE_USER2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_AUTHORIZE_USER2";

                    DbParameter loginParameter = cmd.CreateParameter();
                    loginParameter.ParameterName = "login";
                    loginParameter.Direction = ParameterDirection.Input;
                    loginParameter.DbType = DbType.String;
                    if (login != null)
                    {
                        loginParameter.Value = login;
                    }
                    else
                    {
                        loginParameter.Size = -1;
                        loginParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loginParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter browserParameter = cmd.CreateParameter();
                    browserParameter.ParameterName = "browser";
                    browserParameter.Direction = ParameterDirection.Input;
                    browserParameter.DbType = DbType.String;
                    if (browser != null)
                    {
                        browserParameter.Value = browser;
                    }
                    else
                    {
                        browserParameter.Size = -1;
                        browserParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(browserParameter);

                    DbParameter server_nameParameter = cmd.CreateParameter();
                    server_nameParameter.ParameterName = "server_name";
                    server_nameParameter.Direction = ParameterDirection.Input;
                    server_nameParameter.DbType = DbType.String;
                    server_nameParameter.Size = 510;
                    if (server_name != null)
                    {
                        server_nameParameter.Value = server_name;
                    }
                    else
                    {
                        server_nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(server_nameParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_AUTHORIZE_USER2Result row = new SYS_AUTHORIZE_USER2Result();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("short_description") && !reader.IsDBNull(reader.GetOrdinal("short_description")))
                                row.short_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"short_description")), typeof(string));
                            else
                                row.short_description = null;

                            if (fieldNames.Contains("login") && !reader.IsDBNull(reader.GetOrdinal("login")))
                                row.login = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"login")), typeof(string));
                            else
                                row.login = null;

                            if (fieldNames.Contains("1C_code") && !reader.IsDBNull(reader.GetOrdinal("1C_code")))
                                row.C_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"1C_code")), typeof(string));
                            else
                                row.C_code = null;

                            if (fieldNames.Contains("division_id") && !reader.IsDBNull(reader.GetOrdinal("division_id")))
                                row.division_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"division_id")), typeof(int));
                            else
                                row.division_id = null;

                            if (fieldNames.Contains("position") && !reader.IsDBNull(reader.GetOrdinal("position")))
                                row.position = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"position")), typeof(string));
                            else
                                row.position = null;

                            if (fieldNames.Contains("mail") && !reader.IsDBNull(reader.GetOrdinal("mail")))
                                row.mail = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mail")), typeof(string));
                            else
                                row.mail = null;

                            if (fieldNames.Contains("phone") && !reader.IsDBNull(reader.GetOrdinal("phone")))
                                row.phone = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phone")), typeof(string));
                            else
                                row.phone = null;

                            if (fieldNames.Contains("short_description_reverse") && !reader.IsDBNull(reader.GetOrdinal("short_description_reverse")))
                                row.short_description_reverse = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"short_description_reverse")), typeof(string));
                            else
                                row.short_description_reverse = null;

                            if (fieldNames.Contains("is_locked") && !reader.IsDBNull(reader.GetOrdinal("is_locked")))
                                row.is_locked = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_locked")), typeof(bool));

                            if (fieldNames.Contains("creation_date") && !reader.IsDBNull(reader.GetOrdinal("creation_date")))
                                row.creation_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"creation_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("modification_date") && !reader.IsDBNull(reader.GetOrdinal("modification_date")))
                                row.modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("not_in_SGM") && !reader.IsDBNull(reader.GetOrdinal("not_in_SGM")))
                                row.not_in_SGM = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"not_in_SGM")), typeof(bool));
                            else
                                row.not_in_SGM = null;

                            if (fieldNames.Contains("site_map") && !reader.IsDBNull(reader.GetOrdinal("site_map")))
                                row.site_map = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"site_map")), typeof(string));
                            else
                                row.site_map = null;

                            if (fieldNames.Contains("site_map_subcontractor") && !reader.IsDBNull(reader.GetOrdinal("site_map_subcontractor")))
                                row.site_map_subcontractor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"site_map_subcontractor")), typeof(string));

                            if (fieldNames.Contains("delegating_user_id") && !reader.IsDBNull(reader.GetOrdinal("delegating_user_id")))
                                row.delegating_user_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delegating_user_id")), typeof(int));

                            if (fieldNames.Contains("delegating_user_description") && !reader.IsDBNull(reader.GetOrdinal("delegating_user_description")))
                                row.delegating_user_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delegating_user_description")), typeof(string));
                            else
                                row.delegating_user_description = null;

                            if (fieldNames.Contains("is_administrator") && !reader.IsDBNull(reader.GetOrdinal("is_administrator")))
                                row.is_administrator = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_administrator")), typeof(int));

                            if (fieldNames.Contains("department_id") && !reader.IsDBNull(reader.GetOrdinal("department_id")))
                                row.department_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"department_id")), typeof(int));
                            else
                                row.department_id = null;

                            if (fieldNames.Contains("system_message") && !reader.IsDBNull(reader.GetOrdinal("system_message")))
                                row.system_message = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"system_message")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SYS_AUTHORIZE_USER2Result>> SYS_AUTHORIZE_USER2Async (string login, System.Nullable<int> user_id, string browser, string server_name)
        {

            List<SYS_AUTHORIZE_USER2Result> result = new List<SYS_AUTHORIZE_USER2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_AUTHORIZE_USER2";

                    DbParameter loginParameter = cmd.CreateParameter();
                    loginParameter.ParameterName = "login";
                    loginParameter.Direction = ParameterDirection.Input;
                    loginParameter.DbType = DbType.String;
                    if (login != null)
                    {
                        loginParameter.Value = login;
                    }
                    else
                    {
                        loginParameter.Size = -1;
                        loginParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loginParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter browserParameter = cmd.CreateParameter();
                    browserParameter.ParameterName = "browser";
                    browserParameter.Direction = ParameterDirection.Input;
                    browserParameter.DbType = DbType.String;
                    if (browser != null)
                    {
                        browserParameter.Value = browser;
                    }
                    else
                    {
                        browserParameter.Size = -1;
                        browserParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(browserParameter);

                    DbParameter server_nameParameter = cmd.CreateParameter();
                    server_nameParameter.ParameterName = "server_name";
                    server_nameParameter.Direction = ParameterDirection.Input;
                    server_nameParameter.DbType = DbType.String;
                    server_nameParameter.Size = 510;
                    if (server_name != null)
                    {
                        server_nameParameter.Value = server_name;
                    }
                    else
                    {
                        server_nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(server_nameParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_AUTHORIZE_USER2Result row = new SYS_AUTHORIZE_USER2Result();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("short_description") && !reader.IsDBNull(reader.GetOrdinal("short_description")))
                                row.short_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"short_description")), typeof(string));
                            else
                                row.short_description = null;

                            if (fieldNames.Contains("login") && !reader.IsDBNull(reader.GetOrdinal("login")))
                                row.login = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"login")), typeof(string));
                            else
                                row.login = null;

                            if (fieldNames.Contains("1C_code") && !reader.IsDBNull(reader.GetOrdinal("1C_code")))
                                row.C_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"1C_code")), typeof(string));
                            else
                                row.C_code = null;

                            if (fieldNames.Contains("division_id") && !reader.IsDBNull(reader.GetOrdinal("division_id")))
                                row.division_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"division_id")), typeof(int));
                            else
                                row.division_id = null;

                            if (fieldNames.Contains("position") && !reader.IsDBNull(reader.GetOrdinal("position")))
                                row.position = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"position")), typeof(string));
                            else
                                row.position = null;

                            if (fieldNames.Contains("mail") && !reader.IsDBNull(reader.GetOrdinal("mail")))
                                row.mail = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mail")), typeof(string));
                            else
                                row.mail = null;

                            if (fieldNames.Contains("phone") && !reader.IsDBNull(reader.GetOrdinal("phone")))
                                row.phone = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phone")), typeof(string));
                            else
                                row.phone = null;

                            if (fieldNames.Contains("short_description_reverse") && !reader.IsDBNull(reader.GetOrdinal("short_description_reverse")))
                                row.short_description_reverse = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"short_description_reverse")), typeof(string));
                            else
                                row.short_description_reverse = null;

                            if (fieldNames.Contains("is_locked") && !reader.IsDBNull(reader.GetOrdinal("is_locked")))
                                row.is_locked = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_locked")), typeof(bool));

                            if (fieldNames.Contains("creation_date") && !reader.IsDBNull(reader.GetOrdinal("creation_date")))
                                row.creation_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"creation_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("modification_date") && !reader.IsDBNull(reader.GetOrdinal("modification_date")))
                                row.modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("not_in_SGM") && !reader.IsDBNull(reader.GetOrdinal("not_in_SGM")))
                                row.not_in_SGM = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"not_in_SGM")), typeof(bool));
                            else
                                row.not_in_SGM = null;

                            if (fieldNames.Contains("site_map") && !reader.IsDBNull(reader.GetOrdinal("site_map")))
                                row.site_map = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"site_map")), typeof(string));
                            else
                                row.site_map = null;

                            if (fieldNames.Contains("site_map_subcontractor") && !reader.IsDBNull(reader.GetOrdinal("site_map_subcontractor")))
                                row.site_map_subcontractor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"site_map_subcontractor")), typeof(string));

                            if (fieldNames.Contains("delegating_user_id") && !reader.IsDBNull(reader.GetOrdinal("delegating_user_id")))
                                row.delegating_user_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delegating_user_id")), typeof(int));

                            if (fieldNames.Contains("delegating_user_description") && !reader.IsDBNull(reader.GetOrdinal("delegating_user_description")))
                                row.delegating_user_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delegating_user_description")), typeof(string));
                            else
                                row.delegating_user_description = null;

                            if (fieldNames.Contains("is_administrator") && !reader.IsDBNull(reader.GetOrdinal("is_administrator")))
                                row.is_administrator = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_administrator")), typeof(int));

                            if (fieldNames.Contains("department_id") && !reader.IsDBNull(reader.GetOrdinal("department_id")))
                                row.department_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"department_id")), typeof(int));
                            else
                                row.department_id = null;

                            if (fieldNames.Contains("system_message") && !reader.IsDBNull(reader.GetOrdinal("system_message")))
                                row.system_message = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"system_message")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECT_STATES_FOR_DDResult> APL_SELECT_PROJECT_STATES_FOR_DD ()
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_STATES_FOR_DD";
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_STATES_FOR_DDResult>> APL_SELECT_PROJECT_STATES_FOR_DDAsync ()
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_STATES_FOR_DD";
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<SYS_SELECT_MESSAGESResult> SYS_SELECT_MESSAGES (System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<SYS_SELECT_MESSAGESResult> result = new List<SYS_SELECT_MESSAGESResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_MESSAGES";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_MESSAGESResult row = new SYS_SELECT_MESSAGESResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SYS_SELECT_MESSAGESResult>> SYS_SELECT_MESSAGESAsync (System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<SYS_SELECT_MESSAGESResult> result = new List<SYS_SELECT_MESSAGESResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_MESSAGES";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_MESSAGESResult row = new SYS_SELECT_MESSAGESResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<SYS_SELECT_DELEGATING_USERSResult> SYS_SELECT_DELEGATING_USERS (System.Nullable<int> user_id, System.Nullable<int> delegating_user_id)
        {

            List<SYS_SELECT_DELEGATING_USERSResult> result = new List<SYS_SELECT_DELEGATING_USERSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_DELEGATING_USERS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter delegating_user_idParameter = cmd.CreateParameter();
                    delegating_user_idParameter.ParameterName = "delegating_user_id";
                    delegating_user_idParameter.Direction = ParameterDirection.Input;
                    delegating_user_idParameter.DbType = DbType.Int32;
                    delegating_user_idParameter.Precision = 10;
                    delegating_user_idParameter.Scale = 0;
                    if (delegating_user_id.HasValue)
                    {
                        delegating_user_idParameter.Value = delegating_user_id.Value;
                    }
                    else
                    {
                        delegating_user_idParameter.Size = -1;
                        delegating_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delegating_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_DELEGATING_USERSResult row = new SYS_SELECT_DELEGATING_USERSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("short_description") && !reader.IsDBNull(reader.GetOrdinal("short_description")))
                                row.short_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"short_description")), typeof(string));
                            else
                                row.short_description = null;

                            if (fieldNames.Contains("login") && !reader.IsDBNull(reader.GetOrdinal("login")))
                                row.login = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"login")), typeof(string));
                            else
                                row.login = null;

                            if (fieldNames.Contains("1C_code") && !reader.IsDBNull(reader.GetOrdinal("1C_code")))
                                row.C_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"1C_code")), typeof(string));
                            else
                                row.C_code = null;

                            if (fieldNames.Contains("division_id") && !reader.IsDBNull(reader.GetOrdinal("division_id")))
                                row.division_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"division_id")), typeof(int));
                            else
                                row.division_id = null;

                            if (fieldNames.Contains("position") && !reader.IsDBNull(reader.GetOrdinal("position")))
                                row.position = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"position")), typeof(string));
                            else
                                row.position = null;

                            if (fieldNames.Contains("mail") && !reader.IsDBNull(reader.GetOrdinal("mail")))
                                row.mail = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mail")), typeof(string));
                            else
                                row.mail = null;

                            if (fieldNames.Contains("phone") && !reader.IsDBNull(reader.GetOrdinal("phone")))
                                row.phone = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phone")), typeof(string));
                            else
                                row.phone = null;

                            if (fieldNames.Contains("short_description_reverse") && !reader.IsDBNull(reader.GetOrdinal("short_description_reverse")))
                                row.short_description_reverse = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"short_description_reverse")), typeof(string));
                            else
                                row.short_description_reverse = null;

                            if (fieldNames.Contains("is_locked") && !reader.IsDBNull(reader.GetOrdinal("is_locked")))
                                row.is_locked = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_locked")), typeof(bool));

                            if (fieldNames.Contains("creation_date") && !reader.IsDBNull(reader.GetOrdinal("creation_date")))
                                row.creation_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"creation_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("modification_date") && !reader.IsDBNull(reader.GetOrdinal("modification_date")))
                                row.modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("not_in_SGM") && !reader.IsDBNull(reader.GetOrdinal("not_in_SGM")))
                                row.not_in_SGM = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"not_in_SGM")), typeof(bool));
                            else
                                row.not_in_SGM = null;

                            if (fieldNames.Contains("type") && !reader.IsDBNull(reader.GetOrdinal("type")))
                                row.type = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"type")), typeof(int));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SYS_SELECT_DELEGATING_USERSResult>> SYS_SELECT_DELEGATING_USERSAsync (System.Nullable<int> user_id, System.Nullable<int> delegating_user_id)
        {

            List<SYS_SELECT_DELEGATING_USERSResult> result = new List<SYS_SELECT_DELEGATING_USERSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_DELEGATING_USERS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter delegating_user_idParameter = cmd.CreateParameter();
                    delegating_user_idParameter.ParameterName = "delegating_user_id";
                    delegating_user_idParameter.Direction = ParameterDirection.Input;
                    delegating_user_idParameter.DbType = DbType.Int32;
                    delegating_user_idParameter.Precision = 10;
                    delegating_user_idParameter.Scale = 0;
                    if (delegating_user_id.HasValue)
                    {
                        delegating_user_idParameter.Value = delegating_user_id.Value;
                    }
                    else
                    {
                        delegating_user_idParameter.Size = -1;
                        delegating_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delegating_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_DELEGATING_USERSResult row = new SYS_SELECT_DELEGATING_USERSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("short_description") && !reader.IsDBNull(reader.GetOrdinal("short_description")))
                                row.short_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"short_description")), typeof(string));
                            else
                                row.short_description = null;

                            if (fieldNames.Contains("login") && !reader.IsDBNull(reader.GetOrdinal("login")))
                                row.login = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"login")), typeof(string));
                            else
                                row.login = null;

                            if (fieldNames.Contains("1C_code") && !reader.IsDBNull(reader.GetOrdinal("1C_code")))
                                row.C_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"1C_code")), typeof(string));
                            else
                                row.C_code = null;

                            if (fieldNames.Contains("division_id") && !reader.IsDBNull(reader.GetOrdinal("division_id")))
                                row.division_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"division_id")), typeof(int));
                            else
                                row.division_id = null;

                            if (fieldNames.Contains("position") && !reader.IsDBNull(reader.GetOrdinal("position")))
                                row.position = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"position")), typeof(string));
                            else
                                row.position = null;

                            if (fieldNames.Contains("mail") && !reader.IsDBNull(reader.GetOrdinal("mail")))
                                row.mail = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mail")), typeof(string));
                            else
                                row.mail = null;

                            if (fieldNames.Contains("phone") && !reader.IsDBNull(reader.GetOrdinal("phone")))
                                row.phone = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phone")), typeof(string));
                            else
                                row.phone = null;

                            if (fieldNames.Contains("short_description_reverse") && !reader.IsDBNull(reader.GetOrdinal("short_description_reverse")))
                                row.short_description_reverse = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"short_description_reverse")), typeof(string));
                            else
                                row.short_description_reverse = null;

                            if (fieldNames.Contains("is_locked") && !reader.IsDBNull(reader.GetOrdinal("is_locked")))
                                row.is_locked = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_locked")), typeof(bool));

                            if (fieldNames.Contains("creation_date") && !reader.IsDBNull(reader.GetOrdinal("creation_date")))
                                row.creation_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"creation_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("modification_date") && !reader.IsDBNull(reader.GetOrdinal("modification_date")))
                                row.modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("not_in_SGM") && !reader.IsDBNull(reader.GetOrdinal("not_in_SGM")))
                                row.not_in_SGM = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"not_in_SGM")), typeof(bool));
                            else
                                row.not_in_SGM = null;

                            if (fieldNames.Contains("type") && !reader.IsDBNull(reader.GetOrdinal("type")))
                                row.type = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"type")), typeof(int));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECT_STATES_FOR_DDResult> PRC_SELECT_ORDER_ITEMS_GKI_STATES_FOR_DD ()
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.PRC_SELECT_ORDER_ITEMS_GKI_STATES_FOR_DD";
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_STATES_FOR_DDResult>> PRC_SELECT_ORDER_ITEMS_GKI_STATES_FOR_DDAsync ()
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.PRC_SELECT_ORDER_ITEMS_GKI_STATES_FOR_DD";
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> PRC_UPDATE_ORDER_ITEM_GKI (System.Nullable<int> id, string gki_code, System.Nullable<int> gki_state_id, string gki_order_number, string note, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.PRC_UPDATE_ORDER_ITEM_GKI";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter gki_codeParameter = cmd.CreateParameter();
                    gki_codeParameter.ParameterName = "gki_code";
                    gki_codeParameter.Direction = ParameterDirection.Input;
                    gki_codeParameter.DbType = DbType.String;
                    if (gki_code != null)
                    {
                        gki_codeParameter.Value = gki_code;
                    }
                    else
                    {
                        gki_codeParameter.Size = -1;
                        gki_codeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(gki_codeParameter);

                    DbParameter gki_state_idParameter = cmd.CreateParameter();
                    gki_state_idParameter.ParameterName = "gki_state_id";
                    gki_state_idParameter.Direction = ParameterDirection.Input;
                    gki_state_idParameter.DbType = DbType.Int32;
                    gki_state_idParameter.Precision = 10;
                    gki_state_idParameter.Scale = 0;
                    if (gki_state_id.HasValue)
                    {
                        gki_state_idParameter.Value = gki_state_id.Value;
                    }
                    else
                    {
                        gki_state_idParameter.Size = -1;
                        gki_state_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(gki_state_idParameter);

                    DbParameter gki_order_numberParameter = cmd.CreateParameter();
                    gki_order_numberParameter.ParameterName = "gki_order_number";
                    gki_order_numberParameter.Direction = ParameterDirection.Input;
                    gki_order_numberParameter.DbType = DbType.String;
                    if (gki_order_number != null)
                    {
                        gki_order_numberParameter.Value = gki_order_number;
                    }
                    else
                    {
                        gki_order_numberParameter.Size = -1;
                        gki_order_numberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(gki_order_numberParameter);

                    DbParameter noteParameter = cmd.CreateParameter();
                    noteParameter.ParameterName = "note";
                    noteParameter.Direction = ParameterDirection.Input;
                    noteParameter.DbType = DbType.String;
                    if (note != null)
                    {
                        noteParameter.Value = note;
                    }
                    else
                    {
                        noteParameter.Size = -1;
                        noteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(noteParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> PRC_UPDATE_ORDER_ITEM_GKIAsync (System.Nullable<int> id, string gki_code, System.Nullable<int> gki_state_id, string gki_order_number, string note, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.PRC_UPDATE_ORDER_ITEM_GKI";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter gki_codeParameter = cmd.CreateParameter();
                    gki_codeParameter.ParameterName = "gki_code";
                    gki_codeParameter.Direction = ParameterDirection.Input;
                    gki_codeParameter.DbType = DbType.String;
                    if (gki_code != null)
                    {
                        gki_codeParameter.Value = gki_code;
                    }
                    else
                    {
                        gki_codeParameter.Size = -1;
                        gki_codeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(gki_codeParameter);

                    DbParameter gki_state_idParameter = cmd.CreateParameter();
                    gki_state_idParameter.ParameterName = "gki_state_id";
                    gki_state_idParameter.Direction = ParameterDirection.Input;
                    gki_state_idParameter.DbType = DbType.Int32;
                    gki_state_idParameter.Precision = 10;
                    gki_state_idParameter.Scale = 0;
                    if (gki_state_id.HasValue)
                    {
                        gki_state_idParameter.Value = gki_state_id.Value;
                    }
                    else
                    {
                        gki_state_idParameter.Size = -1;
                        gki_state_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(gki_state_idParameter);

                    DbParameter gki_order_numberParameter = cmd.CreateParameter();
                    gki_order_numberParameter.ParameterName = "gki_order_number";
                    gki_order_numberParameter.Direction = ParameterDirection.Input;
                    gki_order_numberParameter.DbType = DbType.String;
                    if (gki_order_number != null)
                    {
                        gki_order_numberParameter.Value = gki_order_number;
                    }
                    else
                    {
                        gki_order_numberParameter.Size = -1;
                        gki_order_numberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(gki_order_numberParameter);

                    DbParameter noteParameter = cmd.CreateParameter();
                    noteParameter.ParameterName = "note";
                    noteParameter.Direction = ParameterDirection.Input;
                    noteParameter.DbType = DbType.String;
                    if (note != null)
                    {
                        noteParameter.Value = note;
                    }
                    else
                    {
                        noteParameter.Size = -1;
                        noteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(noteParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<PRC_SELECT_ORDER_ITEMS_GKI_with_pagingResult> PRC_SELECT_ORDER_ITEMS_GKI_with_paging (ref System.Nullable<int> page, System.Nullable<int> page_size, string sort_member, string selected_records, string filter, System.Nullable<bool> show_classified, System.Nullable<bool> only_new, System.Nullable<int> user_id)
        {

            List<PRC_SELECT_ORDER_ITEMS_GKI_with_pagingResult> result = new List<PRC_SELECT_ORDER_ITEMS_GKI_with_pagingResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.PRC_SELECT_ORDER_ITEMS_GKI_with_paging";

                    DbParameter pageParameter = cmd.CreateParameter();
                    pageParameter.ParameterName = "page";
                    pageParameter.Direction = ParameterDirection.InputOutput;
                    pageParameter.DbType = DbType.Int32;
                    pageParameter.Precision = 10;
                    pageParameter.Scale = 0;
                    if (page.HasValue)
                    {
                        pageParameter.Value = page.Value;
                    }
                    else
                    {
                        pageParameter.Size = -1;
                        pageParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(pageParameter);

                    DbParameter page_sizeParameter = cmd.CreateParameter();
                    page_sizeParameter.ParameterName = "page_size";
                    page_sizeParameter.Direction = ParameterDirection.Input;
                    page_sizeParameter.DbType = DbType.Int32;
                    page_sizeParameter.Precision = 10;
                    page_sizeParameter.Scale = 0;
                    if (page_size.HasValue)
                    {
                        page_sizeParameter.Value = page_size.Value;
                    }
                    else
                    {
                        page_sizeParameter.Size = -1;
                        page_sizeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(page_sizeParameter);

                    DbParameter sort_memberParameter = cmd.CreateParameter();
                    sort_memberParameter.ParameterName = "sort_member";
                    sort_memberParameter.Direction = ParameterDirection.Input;
                    sort_memberParameter.DbType = DbType.String;
                    sort_memberParameter.Size = 510;
                    if (sort_member != null)
                    {
                        sort_memberParameter.Value = sort_member;
                    }
                    else
                    {
                        sort_memberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(sort_memberParameter);

                    DbParameter selected_recordsParameter = cmd.CreateParameter();
                    selected_recordsParameter.ParameterName = "selected_records";
                    selected_recordsParameter.Direction = ParameterDirection.Input;
                    selected_recordsParameter.DbType = DbType.String;
                    selected_recordsParameter.Size = 510;
                    if (selected_records != null)
                    {
                        selected_recordsParameter.Value = selected_records;
                    }
                    else
                    {
                        selected_recordsParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(selected_recordsParameter);

                    DbParameter filterParameter = cmd.CreateParameter();
                    filterParameter.ParameterName = "filter";
                    filterParameter.Direction = ParameterDirection.Input;
                    filterParameter.DbType = DbType.String;
                    if (filter != null)
                    {
                        filterParameter.Value = filter;
                    }
                    else
                    {
                        filterParameter.Size = -1;
                        filterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(filterParameter);

                    DbParameter show_classifiedParameter = cmd.CreateParameter();
                    show_classifiedParameter.ParameterName = "show_classified";
                    show_classifiedParameter.Direction = ParameterDirection.Input;
                    show_classifiedParameter.DbType = DbType.Boolean;
                    if (show_classified.HasValue)
                    {
                        show_classifiedParameter.Value = show_classified.Value;
                    }
                    else
                    {
                        show_classifiedParameter.Size = -1;
                        show_classifiedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_classifiedParameter);

                    DbParameter only_newParameter = cmd.CreateParameter();
                    only_newParameter.ParameterName = "only_new";
                    only_newParameter.Direction = ParameterDirection.Input;
                    only_newParameter.DbType = DbType.Boolean;
                    if (only_new.HasValue)
                    {
                        only_newParameter.Value = only_new.Value;
                    }
                    else
                    {
                        only_newParameter.Size = -1;
                        only_newParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(only_newParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PRC_SELECT_ORDER_ITEMS_GKI_with_pagingResult row = new PRC_SELECT_ORDER_ITEMS_GKI_with_pagingResult();
                            if (fieldNames.Contains("row_count") && !reader.IsDBNull(reader.GetOrdinal("row_count")))
                                row.row_count = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"row_count")), typeof(int));
                            else
                                row.row_count = null;

                            if (fieldNames.Contains("rank") && !reader.IsDBNull(reader.GetOrdinal("rank")))
                                row.rank = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"rank")), typeof(long));
                            else
                                row.rank = null;

                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("item_description") && !reader.IsDBNull(reader.GetOrdinal("item_description")))
                                row.item_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_description")), typeof(string));
                            else
                                row.item_description = null;

                            if (fieldNames.Contains("item_additional_properties") && !reader.IsDBNull(reader.GetOrdinal("item_additional_properties")))
                                row.item_additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_additional_properties")), typeof(string));
                            else
                                row.item_additional_properties = null;

                            if (fieldNames.Contains("order_code") && !reader.IsDBNull(reader.GetOrdinal("order_code")))
                                row.order_code = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_code")), typeof(int));

                            if (fieldNames.Contains("order_number") && !reader.IsDBNull(reader.GetOrdinal("order_number")))
                                row.order_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_number")), typeof(string));
                            else
                                row.order_number = null;

                            if (fieldNames.Contains("supply_manager") && !reader.IsDBNull(reader.GetOrdinal("supply_manager")))
                                row.supply_manager = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_manager")), typeof(string));
                            else
                                row.supply_manager = null;

                            if (fieldNames.Contains("order_item_note") && !reader.IsDBNull(reader.GetOrdinal("order_item_note")))
                                row.order_item_note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_item_note")), typeof(string));

                            if (fieldNames.Contains("order_item_modification_date") && !reader.IsDBNull(reader.GetOrdinal("order_item_modification_date")))
                                row.order_item_modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_item_modification_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("gki_code") && !reader.IsDBNull(reader.GetOrdinal("gki_code")))
                                row.gki_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_code")), typeof(string));
                            else
                                row.gki_code = null;

                            if (fieldNames.Contains("gki_code_date") && !reader.IsDBNull(reader.GetOrdinal("gki_code_date")))
                                row.gki_code_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_code_date")), typeof(System.DateTime));
                            else
                                row.gki_code_date = null;

                            if (fieldNames.Contains("gki_order_number") && !reader.IsDBNull(reader.GetOrdinal("gki_order_number")))
                                row.gki_order_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_order_number")), typeof(string));
                            else
                                row.gki_order_number = null;

                            if (fieldNames.Contains("gki_order_date") && !reader.IsDBNull(reader.GetOrdinal("gki_order_date")))
                                row.gki_order_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_order_date")), typeof(System.DateTime));
                            else
                                row.gki_order_date = null;

                            if (fieldNames.Contains("gki_state_id") && !reader.IsDBNull(reader.GetOrdinal("gki_state_id")))
                                row.gki_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state_id")), typeof(int));
                            else
                                row.gki_state_id = null;

                            if (fieldNames.Contains("gki_state") && !reader.IsDBNull(reader.GetOrdinal("gki_state")))
                                row.gki_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state")), typeof(string));
                            else
                                row.gki_state = null;

                            if (fieldNames.Contains("gki_state_date") && !reader.IsDBNull(reader.GetOrdinal("gki_state_date")))
                                row.gki_state_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state_date")), typeof(System.DateTime));
                            else
                                row.gki_state_date = null;

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal("note")))
                                row.note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.note = null;

                            if (fieldNames.Contains("gki_user") && !reader.IsDBNull(reader.GetOrdinal("gki_user")))
                                row.gki_user = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_user")), typeof(string));
                            else
                                row.gki_user = null;

                            if (fieldNames.Contains("color") && !reader.IsDBNull(reader.GetOrdinal("color")))
                                row.color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color")), typeof(string));
                            else
                                row.color = null;

                            if (fieldNames.Contains("checked") && !reader.IsDBNull(reader.GetOrdinal("checked")))
                                row.@checked = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"checked")), typeof(string));

                            result.Add(row);
                        }
                    }

                    if (cmd.Parameters["page"].Value != null && !(cmd.Parameters["page"].Value is System.DBNull))
                        page = (int)Convert.ChangeType(cmd.Parameters["page"].Value, typeof(int));
                    else
                        page = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<Tuple<System.Nullable<int>, List<PRC_SELECT_ORDER_ITEMS_GKI_with_pagingResult>>> PRC_SELECT_ORDER_ITEMS_GKI_with_pagingAsync (System.Nullable<int> page, System.Nullable<int> page_size, string sort_member, string selected_records, string filter, System.Nullable<bool> show_classified, System.Nullable<bool> only_new, System.Nullable<int> user_id)
        {

            List<PRC_SELECT_ORDER_ITEMS_GKI_with_pagingResult> result = new List<PRC_SELECT_ORDER_ITEMS_GKI_with_pagingResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.PRC_SELECT_ORDER_ITEMS_GKI_with_paging";

                    DbParameter pageParameter = cmd.CreateParameter();
                    pageParameter.ParameterName = "page";
                    pageParameter.Direction = ParameterDirection.InputOutput;
                    pageParameter.DbType = DbType.Int32;
                    pageParameter.Precision = 10;
                    pageParameter.Scale = 0;
                    if (page.HasValue)
                    {
                        pageParameter.Value = page.Value;
                    }
                    else
                    {
                        pageParameter.Size = -1;
                        pageParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(pageParameter);

                    DbParameter page_sizeParameter = cmd.CreateParameter();
                    page_sizeParameter.ParameterName = "page_size";
                    page_sizeParameter.Direction = ParameterDirection.Input;
                    page_sizeParameter.DbType = DbType.Int32;
                    page_sizeParameter.Precision = 10;
                    page_sizeParameter.Scale = 0;
                    if (page_size.HasValue)
                    {
                        page_sizeParameter.Value = page_size.Value;
                    }
                    else
                    {
                        page_sizeParameter.Size = -1;
                        page_sizeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(page_sizeParameter);

                    DbParameter sort_memberParameter = cmd.CreateParameter();
                    sort_memberParameter.ParameterName = "sort_member";
                    sort_memberParameter.Direction = ParameterDirection.Input;
                    sort_memberParameter.DbType = DbType.String;
                    sort_memberParameter.Size = 510;
                    if (sort_member != null)
                    {
                        sort_memberParameter.Value = sort_member;
                    }
                    else
                    {
                        sort_memberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(sort_memberParameter);

                    DbParameter selected_recordsParameter = cmd.CreateParameter();
                    selected_recordsParameter.ParameterName = "selected_records";
                    selected_recordsParameter.Direction = ParameterDirection.Input;
                    selected_recordsParameter.DbType = DbType.String;
                    selected_recordsParameter.Size = 510;
                    if (selected_records != null)
                    {
                        selected_recordsParameter.Value = selected_records;
                    }
                    else
                    {
                        selected_recordsParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(selected_recordsParameter);

                    DbParameter filterParameter = cmd.CreateParameter();
                    filterParameter.ParameterName = "filter";
                    filterParameter.Direction = ParameterDirection.Input;
                    filterParameter.DbType = DbType.String;
                    if (filter != null)
                    {
                        filterParameter.Value = filter;
                    }
                    else
                    {
                        filterParameter.Size = -1;
                        filterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(filterParameter);

                    DbParameter show_classifiedParameter = cmd.CreateParameter();
                    show_classifiedParameter.ParameterName = "show_classified";
                    show_classifiedParameter.Direction = ParameterDirection.Input;
                    show_classifiedParameter.DbType = DbType.Boolean;
                    if (show_classified.HasValue)
                    {
                        show_classifiedParameter.Value = show_classified.Value;
                    }
                    else
                    {
                        show_classifiedParameter.Size = -1;
                        show_classifiedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_classifiedParameter);

                    DbParameter only_newParameter = cmd.CreateParameter();
                    only_newParameter.ParameterName = "only_new";
                    only_newParameter.Direction = ParameterDirection.Input;
                    only_newParameter.DbType = DbType.Boolean;
                    if (only_new.HasValue)
                    {
                        only_newParameter.Value = only_new.Value;
                    }
                    else
                    {
                        only_newParameter.Size = -1;
                        only_newParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(only_newParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PRC_SELECT_ORDER_ITEMS_GKI_with_pagingResult row = new PRC_SELECT_ORDER_ITEMS_GKI_with_pagingResult();
                            if (fieldNames.Contains("row_count") && !reader.IsDBNull(reader.GetOrdinal("row_count")))
                                row.row_count = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"row_count")), typeof(int));
                            else
                                row.row_count = null;

                            if (fieldNames.Contains("rank") && !reader.IsDBNull(reader.GetOrdinal("rank")))
                                row.rank = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"rank")), typeof(long));
                            else
                                row.rank = null;

                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("item_description") && !reader.IsDBNull(reader.GetOrdinal("item_description")))
                                row.item_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_description")), typeof(string));
                            else
                                row.item_description = null;

                            if (fieldNames.Contains("item_additional_properties") && !reader.IsDBNull(reader.GetOrdinal("item_additional_properties")))
                                row.item_additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_additional_properties")), typeof(string));
                            else
                                row.item_additional_properties = null;

                            if (fieldNames.Contains("order_code") && !reader.IsDBNull(reader.GetOrdinal("order_code")))
                                row.order_code = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_code")), typeof(int));

                            if (fieldNames.Contains("order_number") && !reader.IsDBNull(reader.GetOrdinal("order_number")))
                                row.order_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_number")), typeof(string));
                            else
                                row.order_number = null;

                            if (fieldNames.Contains("supply_manager") && !reader.IsDBNull(reader.GetOrdinal("supply_manager")))
                                row.supply_manager = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_manager")), typeof(string));
                            else
                                row.supply_manager = null;

                            if (fieldNames.Contains("order_item_note") && !reader.IsDBNull(reader.GetOrdinal("order_item_note")))
                                row.order_item_note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_item_note")), typeof(string));

                            if (fieldNames.Contains("order_item_modification_date") && !reader.IsDBNull(reader.GetOrdinal("order_item_modification_date")))
                                row.order_item_modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_item_modification_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("gki_code") && !reader.IsDBNull(reader.GetOrdinal("gki_code")))
                                row.gki_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_code")), typeof(string));
                            else
                                row.gki_code = null;

                            if (fieldNames.Contains("gki_code_date") && !reader.IsDBNull(reader.GetOrdinal("gki_code_date")))
                                row.gki_code_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_code_date")), typeof(System.DateTime));
                            else
                                row.gki_code_date = null;

                            if (fieldNames.Contains("gki_order_number") && !reader.IsDBNull(reader.GetOrdinal("gki_order_number")))
                                row.gki_order_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_order_number")), typeof(string));
                            else
                                row.gki_order_number = null;

                            if (fieldNames.Contains("gki_order_date") && !reader.IsDBNull(reader.GetOrdinal("gki_order_date")))
                                row.gki_order_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_order_date")), typeof(System.DateTime));
                            else
                                row.gki_order_date = null;

                            if (fieldNames.Contains("gki_state_id") && !reader.IsDBNull(reader.GetOrdinal("gki_state_id")))
                                row.gki_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state_id")), typeof(int));
                            else
                                row.gki_state_id = null;

                            if (fieldNames.Contains("gki_state") && !reader.IsDBNull(reader.GetOrdinal("gki_state")))
                                row.gki_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state")), typeof(string));
                            else
                                row.gki_state = null;

                            if (fieldNames.Contains("gki_state_date") && !reader.IsDBNull(reader.GetOrdinal("gki_state_date")))
                                row.gki_state_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state_date")), typeof(System.DateTime));
                            else
                                row.gki_state_date = null;

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal("note")))
                                row.note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.note = null;

                            if (fieldNames.Contains("gki_user") && !reader.IsDBNull(reader.GetOrdinal("gki_user")))
                                row.gki_user = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_user")), typeof(string));
                            else
                                row.gki_user = null;

                            if (fieldNames.Contains("color") && !reader.IsDBNull(reader.GetOrdinal("color")))
                                row.color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color")), typeof(string));
                            else
                                row.color = null;

                            if (fieldNames.Contains("checked") && !reader.IsDBNull(reader.GetOrdinal("checked")))
                                row.@checked = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"checked")), typeof(string));

                            result.Add(row);
                        }
                    }

                    if (cmd.Parameters["page"].Value != null && !(cmd.Parameters["page"].Value is System.DBNull))
                        page = (int)Convert.ChangeType(cmd.Parameters["page"].Value, typeof(int));
                    else
                        page = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<System.Nullable<int>, List<PRC_SELECT_ORDER_ITEMS_GKI_with_pagingResult>>(page, result);
        }

        public List<SYS_SELECT_DELEGATING_USERResult> SYS_SELECT_DELEGATING_USER (System.Nullable<int> user_id, System.Nullable<int> delegating_user_id)
        {

            List<SYS_SELECT_DELEGATING_USERResult> result = new List<SYS_SELECT_DELEGATING_USERResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_DELEGATING_USER";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter delegating_user_idParameter = cmd.CreateParameter();
                    delegating_user_idParameter.ParameterName = "delegating_user_id";
                    delegating_user_idParameter.Direction = ParameterDirection.Input;
                    delegating_user_idParameter.DbType = DbType.Int32;
                    delegating_user_idParameter.Precision = 10;
                    delegating_user_idParameter.Scale = 0;
                    if (delegating_user_id.HasValue)
                    {
                        delegating_user_idParameter.Value = delegating_user_id.Value;
                    }
                    else
                    {
                        delegating_user_idParameter.Size = -1;
                        delegating_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delegating_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_DELEGATING_USERResult row = new SYS_SELECT_DELEGATING_USERResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("login") && !reader.IsDBNull(reader.GetOrdinal("login")))
                                row.login = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"login")), typeof(string));
                            else
                                row.login = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SYS_SELECT_DELEGATING_USERResult>> SYS_SELECT_DELEGATING_USERAsync (System.Nullable<int> user_id, System.Nullable<int> delegating_user_id)
        {

            List<SYS_SELECT_DELEGATING_USERResult> result = new List<SYS_SELECT_DELEGATING_USERResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_DELEGATING_USER";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter delegating_user_idParameter = cmd.CreateParameter();
                    delegating_user_idParameter.ParameterName = "delegating_user_id";
                    delegating_user_idParameter.Direction = ParameterDirection.Input;
                    delegating_user_idParameter.DbType = DbType.Int32;
                    delegating_user_idParameter.Precision = 10;
                    delegating_user_idParameter.Scale = 0;
                    if (delegating_user_id.HasValue)
                    {
                        delegating_user_idParameter.Value = delegating_user_id.Value;
                    }
                    else
                    {
                        delegating_user_idParameter.Size = -1;
                        delegating_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delegating_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_DELEGATING_USERResult row = new SYS_SELECT_DELEGATING_USERResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("login") && !reader.IsDBNull(reader.GetOrdinal("login")))
                                row.login = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"login")), typeof(string));
                            else
                                row.login = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<SYS_SELECT_ROLES_BY_USERResult> SYS_SELECT_ROLES_BY_USER (System.Nullable<int> user_id)
        {

            List<SYS_SELECT_ROLES_BY_USERResult> result = new List<SYS_SELECT_ROLES_BY_USERResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_ROLES_BY_USER";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_ROLES_BY_USERResult row = new SYS_SELECT_ROLES_BY_USERResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.role_id = (int)Convert.ChangeType(reader.GetValue(0), typeof(int));
                            else
                            if (fieldNames.Contains("role_id") && !reader.IsDBNull(reader.GetOrdinal("role_id")))
                                row.role_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"role_id")), typeof(int));
                            else
                                row.role_id = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SYS_SELECT_ROLES_BY_USERResult>> SYS_SELECT_ROLES_BY_USERAsync (System.Nullable<int> user_id)
        {

            List<SYS_SELECT_ROLES_BY_USERResult> result = new List<SYS_SELECT_ROLES_BY_USERResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_ROLES_BY_USER";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_ROLES_BY_USERResult row = new SYS_SELECT_ROLES_BY_USERResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.role_id = (int)Convert.ChangeType(reader.GetValue(0), typeof(int));
                            else
                            if (fieldNames.Contains("role_id") && !reader.IsDBNull(reader.GetOrdinal("role_id")))
                                row.role_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"role_id")), typeof(int));
                            else
                                row.role_id = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECT_STATES_FOR_DDResult> SYS_SELECT_ROLES_FOR_DD (System.Nullable<int> user_id)
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_ROLES_FOR_DD";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_STATES_FOR_DDResult>> SYS_SELECT_ROLES_FOR_DDAsync (System.Nullable<int> user_id)
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_ROLES_FOR_DD";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECT_STATES_FOR_DDResult> SYS_SELECT_DELEGATING_USERS2 (System.Nullable<int> user_id)
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_DELEGATING_USERS2";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_STATES_FOR_DDResult>> SYS_SELECT_DELEGATING_USERS2Async (System.Nullable<int> user_id)
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_DELEGATING_USERS2";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<SYS_AUTHORIZE_USERResult> SYS_AUTHORIZE_USER (string login, string server_name, string browser)
        {

            List<SYS_AUTHORIZE_USERResult> result = new List<SYS_AUTHORIZE_USERResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_AUTHORIZE_USER";

                    DbParameter loginParameter = cmd.CreateParameter();
                    loginParameter.ParameterName = "login";
                    loginParameter.Direction = ParameterDirection.Input;
                    loginParameter.DbType = DbType.String;
                    if (login != null)
                    {
                        loginParameter.Value = login;
                    }
                    else
                    {
                        loginParameter.Size = -1;
                        loginParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loginParameter);

                    DbParameter server_nameParameter = cmd.CreateParameter();
                    server_nameParameter.ParameterName = "server_name";
                    server_nameParameter.Direction = ParameterDirection.Input;
                    server_nameParameter.DbType = DbType.String;
                    if (server_name != null)
                    {
                        server_nameParameter.Value = server_name;
                    }
                    else
                    {
                        server_nameParameter.Size = -1;
                        server_nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(server_nameParameter);

                    DbParameter browserParameter = cmd.CreateParameter();
                    browserParameter.ParameterName = "browser";
                    browserParameter.Direction = ParameterDirection.Input;
                    browserParameter.DbType = DbType.String;
                    if (browser != null)
                    {
                        browserParameter.Value = browser;
                    }
                    else
                    {
                        browserParameter.Size = -1;
                        browserParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(browserParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_AUTHORIZE_USERResult row = new SYS_AUTHORIZE_USERResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("not_in_SGM") && !reader.IsDBNull(reader.GetOrdinal("not_in_SGM")))
                                row.not_in_SGM = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"not_in_SGM")), typeof(bool));
                            else
                                row.not_in_SGM = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SYS_AUTHORIZE_USERResult>> SYS_AUTHORIZE_USERAsync (string login, string server_name, string browser)
        {

            List<SYS_AUTHORIZE_USERResult> result = new List<SYS_AUTHORIZE_USERResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_AUTHORIZE_USER";

                    DbParameter loginParameter = cmd.CreateParameter();
                    loginParameter.ParameterName = "login";
                    loginParameter.Direction = ParameterDirection.Input;
                    loginParameter.DbType = DbType.String;
                    if (login != null)
                    {
                        loginParameter.Value = login;
                    }
                    else
                    {
                        loginParameter.Size = -1;
                        loginParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loginParameter);

                    DbParameter server_nameParameter = cmd.CreateParameter();
                    server_nameParameter.ParameterName = "server_name";
                    server_nameParameter.Direction = ParameterDirection.Input;
                    server_nameParameter.DbType = DbType.String;
                    if (server_name != null)
                    {
                        server_nameParameter.Value = server_name;
                    }
                    else
                    {
                        server_nameParameter.Size = -1;
                        server_nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(server_nameParameter);

                    DbParameter browserParameter = cmd.CreateParameter();
                    browserParameter.ParameterName = "browser";
                    browserParameter.Direction = ParameterDirection.Input;
                    browserParameter.DbType = DbType.String;
                    if (browser != null)
                    {
                        browserParameter.Value = browser;
                    }
                    else
                    {
                        browserParameter.Size = -1;
                        browserParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(browserParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_AUTHORIZE_USERResult row = new SYS_AUTHORIZE_USERResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("not_in_SGM") && !reader.IsDBNull(reader.GetOrdinal("not_in_SGM")))
                                row.not_in_SGM = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"not_in_SGM")), typeof(bool));
                            else
                                row.not_in_SGM = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> UI_DELETE_LINK_PAGE (System.Nullable<int> id, System.Nullable<int> user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_DELETE_LINK_PAGE";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> UI_DELETE_LINK_PAGEAsync (System.Nullable<int> id, System.Nullable<int> user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_DELETE_LINK_PAGE";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_SELECT_LINK_ACTIONSResult> UI_SELECT_LINK_ACTIONS (System.Nullable<int> link_id)
        {

            List<UI_SELECT_LINK_ACTIONSResult> result = new List<UI_SELECT_LINK_ACTIONSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_ACTIONS";

                    DbParameter link_idParameter = cmd.CreateParameter();
                    link_idParameter.ParameterName = "link_id";
                    link_idParameter.Direction = ParameterDirection.Input;
                    link_idParameter.DbType = DbType.Int32;
                    link_idParameter.Precision = 10;
                    link_idParameter.Scale = 0;
                    if (link_id.HasValue)
                    {
                        link_idParameter.Value = link_id.Value;
                    }
                    else
                    {
                        link_idParameter.Size = -1;
                        link_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(link_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINK_ACTIONSResult row = new UI_SELECT_LINK_ACTIONSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("action_code") && !reader.IsDBNull(reader.GetOrdinal("action_code")))
                                row.action_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_code")), typeof(string));

                            if (fieldNames.Contains("action_description") && !reader.IsDBNull(reader.GetOrdinal("action_description")))
                                row.action_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_description")), typeof(string));
                            else
                                row.action_description = null;

                            if (fieldNames.Contains("comment") && !reader.IsDBNull(reader.GetOrdinal("comment")))
                                row.comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comment")), typeof(string));
                            else
                                row.comment = null;

                            if (fieldNames.Contains("stored_procedure") && !reader.IsDBNull(reader.GetOrdinal("stored_procedure")))
                                row.stored_procedure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stored_procedure")), typeof(string));

                            if (fieldNames.Contains("redirect") && !reader.IsDBNull(reader.GetOrdinal("redirect")))
                                row.redirect = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"redirect")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_SELECT_LINK_ACTIONSResult>> UI_SELECT_LINK_ACTIONSAsync (System.Nullable<int> link_id)
        {

            List<UI_SELECT_LINK_ACTIONSResult> result = new List<UI_SELECT_LINK_ACTIONSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_ACTIONS";

                    DbParameter link_idParameter = cmd.CreateParameter();
                    link_idParameter.ParameterName = "link_id";
                    link_idParameter.Direction = ParameterDirection.Input;
                    link_idParameter.DbType = DbType.Int32;
                    link_idParameter.Precision = 10;
                    link_idParameter.Scale = 0;
                    if (link_id.HasValue)
                    {
                        link_idParameter.Value = link_id.Value;
                    }
                    else
                    {
                        link_idParameter.Size = -1;
                        link_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(link_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINK_ACTIONSResult row = new UI_SELECT_LINK_ACTIONSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("action_code") && !reader.IsDBNull(reader.GetOrdinal("action_code")))
                                row.action_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_code")), typeof(string));

                            if (fieldNames.Contains("action_description") && !reader.IsDBNull(reader.GetOrdinal("action_description")))
                                row.action_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_description")), typeof(string));
                            else
                                row.action_description = null;

                            if (fieldNames.Contains("comment") && !reader.IsDBNull(reader.GetOrdinal("comment")))
                                row.comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comment")), typeof(string));
                            else
                                row.comment = null;

                            if (fieldNames.Contains("stored_procedure") && !reader.IsDBNull(reader.GetOrdinal("stored_procedure")))
                                row.stored_procedure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stored_procedure")), typeof(string));

                            if (fieldNames.Contains("redirect") && !reader.IsDBNull(reader.GetOrdinal("redirect")))
                                row.redirect = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"redirect")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_SELECT_LINK_DATAResult> UI_SELECT_LINK_DATA (System.Nullable<int> link_id)
        {

            List<UI_SELECT_LINK_DATAResult> result = new List<UI_SELECT_LINK_DATAResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_DATA";

                    DbParameter link_idParameter = cmd.CreateParameter();
                    link_idParameter.ParameterName = "link_id";
                    link_idParameter.Direction = ParameterDirection.Input;
                    link_idParameter.DbType = DbType.Int32;
                    link_idParameter.Precision = 10;
                    link_idParameter.Scale = 0;
                    if (link_id.HasValue)
                    {
                        link_idParameter.Value = link_id.Value;
                    }
                    else
                    {
                        link_idParameter.Size = -1;
                        link_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(link_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINK_DATAResult row = new UI_SELECT_LINK_DATAResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("data_type") && !reader.IsDBNull(reader.GetOrdinal("data_type")))
                                row.data_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"data_type")), typeof(string));
                            else
                                row.data_type = null;

                            if (fieldNames.Contains("data_description") && !reader.IsDBNull(reader.GetOrdinal("data_description")))
                                row.data_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"data_description")), typeof(string));
                            else
                                row.data_description = null;

                            if (fieldNames.Contains("comment") && !reader.IsDBNull(reader.GetOrdinal("comment")))
                                row.comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comment")), typeof(string));
                            else
                                row.comment = null;

                            if (fieldNames.Contains("stored_procedure") && !reader.IsDBNull(reader.GetOrdinal("stored_procedure")))
                                row.stored_procedure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stored_procedure")), typeof(string));
                            else
                                row.stored_procedure = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_SELECT_LINK_DATAResult>> UI_SELECT_LINK_DATAAsync (System.Nullable<int> link_id)
        {

            List<UI_SELECT_LINK_DATAResult> result = new List<UI_SELECT_LINK_DATAResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_DATA";

                    DbParameter link_idParameter = cmd.CreateParameter();
                    link_idParameter.ParameterName = "link_id";
                    link_idParameter.Direction = ParameterDirection.Input;
                    link_idParameter.DbType = DbType.Int32;
                    link_idParameter.Precision = 10;
                    link_idParameter.Scale = 0;
                    if (link_id.HasValue)
                    {
                        link_idParameter.Value = link_id.Value;
                    }
                    else
                    {
                        link_idParameter.Size = -1;
                        link_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(link_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINK_DATAResult row = new UI_SELECT_LINK_DATAResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("data_type") && !reader.IsDBNull(reader.GetOrdinal("data_type")))
                                row.data_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"data_type")), typeof(string));
                            else
                                row.data_type = null;

                            if (fieldNames.Contains("data_description") && !reader.IsDBNull(reader.GetOrdinal("data_description")))
                                row.data_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"data_description")), typeof(string));
                            else
                                row.data_description = null;

                            if (fieldNames.Contains("comment") && !reader.IsDBNull(reader.GetOrdinal("comment")))
                                row.comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comment")), typeof(string));
                            else
                                row.comment = null;

                            if (fieldNames.Contains("stored_procedure") && !reader.IsDBNull(reader.GetOrdinal("stored_procedure")))
                                row.stored_procedure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stored_procedure")), typeof(string));
                            else
                                row.stored_procedure = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_SELECT_LINK_PAGE_NOTE2Result> UI_SELECT_LINK_PAGE_NOTE2 (System.Nullable<int> link_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_SELECT_LINK_PAGE_NOTE2Result> result = new List<UI_SELECT_LINK_PAGE_NOTE2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_PAGE_NOTE2";

                    DbParameter link_idParameter = cmd.CreateParameter();
                    link_idParameter.ParameterName = "link_id";
                    link_idParameter.Direction = ParameterDirection.Input;
                    link_idParameter.DbType = DbType.Int32;
                    link_idParameter.Precision = 10;
                    link_idParameter.Scale = 0;
                    if (link_id.HasValue)
                    {
                        link_idParameter.Value = link_id.Value;
                    }
                    else
                    {
                        link_idParameter.Size = -1;
                        link_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(link_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINK_PAGE_NOTE2Result row = new UI_SELECT_LINK_PAGE_NOTE2Result();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.http_text = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("http_text") && !reader.IsDBNull(reader.GetOrdinal("http_text")))
                                row.http_text = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"http_text")), typeof(string));
                            else
                                row.http_text = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_SELECT_LINK_PAGE_NOTE2Result>> UI_SELECT_LINK_PAGE_NOTE2Async (System.Nullable<int> link_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_SELECT_LINK_PAGE_NOTE2Result> result = new List<UI_SELECT_LINK_PAGE_NOTE2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_PAGE_NOTE2";

                    DbParameter link_idParameter = cmd.CreateParameter();
                    link_idParameter.ParameterName = "link_id";
                    link_idParameter.Direction = ParameterDirection.Input;
                    link_idParameter.DbType = DbType.Int32;
                    link_idParameter.Precision = 10;
                    link_idParameter.Scale = 0;
                    if (link_id.HasValue)
                    {
                        link_idParameter.Value = link_id.Value;
                    }
                    else
                    {
                        link_idParameter.Size = -1;
                        link_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(link_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINK_PAGE_NOTE2Result row = new UI_SELECT_LINK_PAGE_NOTE2Result();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.http_text = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("http_text") && !reader.IsDBNull(reader.GetOrdinal("http_text")))
                                row.http_text = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"http_text")), typeof(string));
                            else
                                row.http_text = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public void UI_DEFOLT_GRID_SETTINGS (System.Nullable<int> user_id, string stored_procedure)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_DEFOLT_GRID_SETTINGS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task UI_DEFOLT_GRID_SETTINGSAsync (System.Nullable<int> user_id, string stored_procedure)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_DEFOLT_GRID_SETTINGS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public List<UI_SELECT_SITE_MENUResult> UI_SELECT_SITE_MENU (System.Nullable<int> user_id)
        {

            List<UI_SELECT_SITE_MENUResult> result = new List<UI_SELECT_SITE_MENUResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_SITE_MENU";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_SITE_MENUResult row = new UI_SELECT_SITE_MENUResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("parent_id") && !reader.IsDBNull(reader.GetOrdinal("parent_id")))
                                row.parent_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"parent_id")), typeof(int));
                            else
                                row.parent_id = null;

                            if (fieldNames.Contains("order_id") && !reader.IsDBNull(reader.GetOrdinal("order_id")))
                                row.order_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_id")), typeof(int));
                            else
                                row.order_id = null;

                            if (fieldNames.Contains("img") && !reader.IsDBNull(reader.GetOrdinal("img")))
                                row.img = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"img")), typeof(string));
                            else
                                row.img = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("url") && !reader.IsDBNull(reader.GetOrdinal("url")))
                                row.url = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"url")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_SELECT_SITE_MENUResult>> UI_SELECT_SITE_MENUAsync (System.Nullable<int> user_id)
        {

            List<UI_SELECT_SITE_MENUResult> result = new List<UI_SELECT_SITE_MENUResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_SITE_MENU";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_SITE_MENUResult row = new UI_SELECT_SITE_MENUResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("parent_id") && !reader.IsDBNull(reader.GetOrdinal("parent_id")))
                                row.parent_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"parent_id")), typeof(int));
                            else
                                row.parent_id = null;

                            if (fieldNames.Contains("order_id") && !reader.IsDBNull(reader.GetOrdinal("order_id")))
                                row.order_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_id")), typeof(int));
                            else
                                row.order_id = null;

                            if (fieldNames.Contains("img") && !reader.IsDBNull(reader.GetOrdinal("img")))
                                row.img = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"img")), typeof(string));
                            else
                                row.img = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("url") && !reader.IsDBNull(reader.GetOrdinal("url")))
                                row.url = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"url")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> UI_UPDATE_LINK_PAGE_NOTE2 (System.Nullable<int> id, System.Nullable<int> link_id, string header, string html_text, string role_id_list, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> order_number)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_UPDATE_LINK_PAGE_NOTE2";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter link_idParameter = cmd.CreateParameter();
                    link_idParameter.ParameterName = "link_id";
                    link_idParameter.Direction = ParameterDirection.Input;
                    link_idParameter.DbType = DbType.Int32;
                    link_idParameter.Precision = 10;
                    link_idParameter.Scale = 0;
                    if (link_id.HasValue)
                    {
                        link_idParameter.Value = link_id.Value;
                    }
                    else
                    {
                        link_idParameter.Size = -1;
                        link_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(link_idParameter);

                    DbParameter headerParameter = cmd.CreateParameter();
                    headerParameter.ParameterName = "header";
                    headerParameter.Direction = ParameterDirection.Input;
                    headerParameter.DbType = DbType.String;
                    if (header != null)
                    {
                        headerParameter.Value = header;
                    }
                    else
                    {
                        headerParameter.Size = -1;
                        headerParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(headerParameter);

                    DbParameter html_textParameter = cmd.CreateParameter();
                    html_textParameter.ParameterName = "html_text";
                    html_textParameter.Direction = ParameterDirection.Input;
                    html_textParameter.DbType = DbType.String;
                    if (html_text != null)
                    {
                        html_textParameter.Value = html_text;
                    }
                    else
                    {
                        html_textParameter.Size = -1;
                        html_textParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(html_textParameter);

                    DbParameter role_id_listParameter = cmd.CreateParameter();
                    role_id_listParameter.ParameterName = "role_id_list";
                    role_id_listParameter.Direction = ParameterDirection.Input;
                    role_id_listParameter.DbType = DbType.String;
                    if (role_id_list != null)
                    {
                        role_id_listParameter.Value = role_id_list;
                    }
                    else
                    {
                        role_id_listParameter.Size = -1;
                        role_id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(role_id_listParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter order_numberParameter = cmd.CreateParameter();
                    order_numberParameter.ParameterName = "order_number";
                    order_numberParameter.Direction = ParameterDirection.Input;
                    order_numberParameter.DbType = DbType.Int32;
                    order_numberParameter.Precision = 10;
                    order_numberParameter.Scale = 0;
                    if (order_number.HasValue)
                    {
                        order_numberParameter.Value = order_number.Value;
                    }
                    else
                    {
                        order_numberParameter.Size = -1;
                        order_numberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(order_numberParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> UI_UPDATE_LINK_PAGE_NOTE2Async (System.Nullable<int> id, System.Nullable<int> link_id, string header, string html_text, string role_id_list, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> order_number)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_UPDATE_LINK_PAGE_NOTE2";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter link_idParameter = cmd.CreateParameter();
                    link_idParameter.ParameterName = "link_id";
                    link_idParameter.Direction = ParameterDirection.Input;
                    link_idParameter.DbType = DbType.Int32;
                    link_idParameter.Precision = 10;
                    link_idParameter.Scale = 0;
                    if (link_id.HasValue)
                    {
                        link_idParameter.Value = link_id.Value;
                    }
                    else
                    {
                        link_idParameter.Size = -1;
                        link_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(link_idParameter);

                    DbParameter headerParameter = cmd.CreateParameter();
                    headerParameter.ParameterName = "header";
                    headerParameter.Direction = ParameterDirection.Input;
                    headerParameter.DbType = DbType.String;
                    if (header != null)
                    {
                        headerParameter.Value = header;
                    }
                    else
                    {
                        headerParameter.Size = -1;
                        headerParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(headerParameter);

                    DbParameter html_textParameter = cmd.CreateParameter();
                    html_textParameter.ParameterName = "html_text";
                    html_textParameter.Direction = ParameterDirection.Input;
                    html_textParameter.DbType = DbType.String;
                    if (html_text != null)
                    {
                        html_textParameter.Value = html_text;
                    }
                    else
                    {
                        html_textParameter.Size = -1;
                        html_textParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(html_textParameter);

                    DbParameter role_id_listParameter = cmd.CreateParameter();
                    role_id_listParameter.ParameterName = "role_id_list";
                    role_id_listParameter.Direction = ParameterDirection.Input;
                    role_id_listParameter.DbType = DbType.String;
                    if (role_id_list != null)
                    {
                        role_id_listParameter.Value = role_id_list;
                    }
                    else
                    {
                        role_id_listParameter.Size = -1;
                        role_id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(role_id_listParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter order_numberParameter = cmd.CreateParameter();
                    order_numberParameter.ParameterName = "order_number";
                    order_numberParameter.Direction = ParameterDirection.Input;
                    order_numberParameter.DbType = DbType.Int32;
                    order_numberParameter.Precision = 10;
                    order_numberParameter.Scale = 0;
                    if (order_number.HasValue)
                    {
                        order_numberParameter.Value = order_number.Value;
                    }
                    else
                    {
                        order_numberParameter.Size = -1;
                        order_numberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(order_numberParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_SELECT_LINK_PAGE_NOTES2Result> UI_SELECT_LINK_PAGE_NOTES2 (System.Nullable<int> link_id, System.Nullable<int> user_id)
        {

            List<UI_SELECT_LINK_PAGE_NOTES2Result> result = new List<UI_SELECT_LINK_PAGE_NOTES2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_PAGE_NOTES2";

                    DbParameter link_idParameter = cmd.CreateParameter();
                    link_idParameter.ParameterName = "link_id";
                    link_idParameter.Direction = ParameterDirection.Input;
                    link_idParameter.DbType = DbType.Int32;
                    link_idParameter.Precision = 10;
                    link_idParameter.Scale = 0;
                    if (link_id.HasValue)
                    {
                        link_idParameter.Value = link_id.Value;
                    }
                    else
                    {
                        link_idParameter.Size = -1;
                        link_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(link_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINK_PAGE_NOTES2Result row = new UI_SELECT_LINK_PAGE_NOTES2Result();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("order_number") && !reader.IsDBNull(reader.GetOrdinal("order_number")))
                                row.order_number = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_number")), typeof(int));
                            else
                                row.order_number = null;

                            if (fieldNames.Contains("header") && !reader.IsDBNull(reader.GetOrdinal("header")))
                                row.header = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"header")), typeof(string));
                            else
                                row.header = null;

                            if (fieldNames.Contains("html_text") && !reader.IsDBNull(reader.GetOrdinal("html_text")))
                                row.html_text = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"html_text")), typeof(string));
                            else
                                row.html_text = null;

                            if (fieldNames.Contains("list_roles_description") && !reader.IsDBNull(reader.GetOrdinal("list_roles_description")))
                                row.list_roles_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"list_roles_description")), typeof(string));
                            else
                                row.list_roles_description = null;

                            if (fieldNames.Contains("list_roles_id") && !reader.IsDBNull(reader.GetOrdinal("list_roles_id")))
                                row.list_roles_id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"list_roles_id")), typeof(string));
                            else
                                row.list_roles_id = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_SELECT_LINK_PAGE_NOTES2Result>> UI_SELECT_LINK_PAGE_NOTES2Async (System.Nullable<int> link_id, System.Nullable<int> user_id)
        {

            List<UI_SELECT_LINK_PAGE_NOTES2Result> result = new List<UI_SELECT_LINK_PAGE_NOTES2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_PAGE_NOTES2";

                    DbParameter link_idParameter = cmd.CreateParameter();
                    link_idParameter.ParameterName = "link_id";
                    link_idParameter.Direction = ParameterDirection.Input;
                    link_idParameter.DbType = DbType.Int32;
                    link_idParameter.Precision = 10;
                    link_idParameter.Scale = 0;
                    if (link_id.HasValue)
                    {
                        link_idParameter.Value = link_id.Value;
                    }
                    else
                    {
                        link_idParameter.Size = -1;
                        link_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(link_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINK_PAGE_NOTES2Result row = new UI_SELECT_LINK_PAGE_NOTES2Result();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("order_number") && !reader.IsDBNull(reader.GetOrdinal("order_number")))
                                row.order_number = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_number")), typeof(int));
                            else
                                row.order_number = null;

                            if (fieldNames.Contains("header") && !reader.IsDBNull(reader.GetOrdinal("header")))
                                row.header = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"header")), typeof(string));
                            else
                                row.header = null;

                            if (fieldNames.Contains("html_text") && !reader.IsDBNull(reader.GetOrdinal("html_text")))
                                row.html_text = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"html_text")), typeof(string));
                            else
                                row.html_text = null;

                            if (fieldNames.Contains("list_roles_description") && !reader.IsDBNull(reader.GetOrdinal("list_roles_description")))
                                row.list_roles_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"list_roles_description")), typeof(string));
                            else
                                row.list_roles_description = null;

                            if (fieldNames.Contains("list_roles_id") && !reader.IsDBNull(reader.GetOrdinal("list_roles_id")))
                                row.list_roles_id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"list_roles_id")), typeof(string));
                            else
                                row.list_roles_id = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public void SYS_FINISH_EVENT (System.Nullable<int> event_id, string file_name)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_FINISH_EVENT";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter file_nameParameter = cmd.CreateParameter();
                    file_nameParameter.ParameterName = "file_name";
                    file_nameParameter.Direction = ParameterDirection.Input;
                    file_nameParameter.DbType = DbType.String;
                    if (file_name != null)
                    {
                        file_nameParameter.Value = file_name;
                    }
                    else
                    {
                        file_nameParameter.Size = -1;
                        file_nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(file_nameParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task SYS_FINISH_EVENTAsync (System.Nullable<int> event_id, string file_name)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_FINISH_EVENT";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter file_nameParameter = cmd.CreateParameter();
                    file_nameParameter.ParameterName = "file_name";
                    file_nameParameter.Direction = ParameterDirection.Input;
                    file_nameParameter.DbType = DbType.String;
                    if (file_name != null)
                    {
                        file_nameParameter.Value = file_name;
                    }
                    else
                    {
                        file_nameParameter.Size = -1;
                        file_nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(file_nameParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public List<SYS_START_EVENTResult> SYS_START_EVENT (System.Nullable<int> user_id, string stored_procedure, string @params)
        {

            List<SYS_START_EVENTResult> result = new List<SYS_START_EVENTResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_START_EVENT";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);

                    DbParameter paramsParameter = cmd.CreateParameter();
                    paramsParameter.ParameterName = "@params";
                    paramsParameter.Direction = ParameterDirection.Input;
                    paramsParameter.DbType = DbType.String;
                    if (@params != null)
                    {
                        paramsParameter.Value = @params;
                    }
                    else
                    {
                        paramsParameter.Size = -1;
                        paramsParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(paramsParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_START_EVENTResult row = new SYS_START_EVENTResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.event_id = (int)Convert.ChangeType(reader.GetValue(0), typeof(int));
                            else
                            if (fieldNames.Contains("event_id") && !reader.IsDBNull(reader.GetOrdinal("event_id")))
                                row.event_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"event_id")), typeof(int));
                            else
                                row.event_id = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SYS_START_EVENTResult>> SYS_START_EVENTAsync (System.Nullable<int> user_id, string stored_procedure, string @params)
        {

            List<SYS_START_EVENTResult> result = new List<SYS_START_EVENTResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_START_EVENT";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);

                    DbParameter paramsParameter = cmd.CreateParameter();
                    paramsParameter.ParameterName = "@params";
                    paramsParameter.Direction = ParameterDirection.Input;
                    paramsParameter.DbType = DbType.String;
                    if (@params != null)
                    {
                        paramsParameter.Value = @params;
                    }
                    else
                    {
                        paramsParameter.Size = -1;
                        paramsParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(paramsParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_START_EVENTResult row = new SYS_START_EVENTResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.event_id = (int)Convert.ChangeType(reader.GetValue(0), typeof(int));
                            else
                            if (fieldNames.Contains("event_id") && !reader.IsDBNull(reader.GetOrdinal("event_id")))
                                row.event_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"event_id")), typeof(int));
                            else
                                row.event_id = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> UI_INSERT_LINK_FUNCTION (System.Nullable<int> section_id, string title, string stored_procedure, string description, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_INSERT_LINK_FUNCTION";

                    DbParameter section_idParameter = cmd.CreateParameter();
                    section_idParameter.ParameterName = "section_id";
                    section_idParameter.Direction = ParameterDirection.Input;
                    section_idParameter.DbType = DbType.Int32;
                    section_idParameter.Precision = 10;
                    section_idParameter.Scale = 0;
                    if (section_id.HasValue)
                    {
                        section_idParameter.Value = section_id.Value;
                    }
                    else
                    {
                        section_idParameter.Size = -1;
                        section_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(section_idParameter);

                    DbParameter titleParameter = cmd.CreateParameter();
                    titleParameter.ParameterName = "title";
                    titleParameter.Direction = ParameterDirection.Input;
                    titleParameter.DbType = DbType.String;
                    if (title != null)
                    {
                        titleParameter.Value = title;
                    }
                    else
                    {
                        titleParameter.Size = -1;
                        titleParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(titleParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> UI_INSERT_LINK_FUNCTIONAsync (System.Nullable<int> section_id, string title, string stored_procedure, string description, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_INSERT_LINK_FUNCTION";

                    DbParameter section_idParameter = cmd.CreateParameter();
                    section_idParameter.ParameterName = "section_id";
                    section_idParameter.Direction = ParameterDirection.Input;
                    section_idParameter.DbType = DbType.Int32;
                    section_idParameter.Precision = 10;
                    section_idParameter.Scale = 0;
                    if (section_id.HasValue)
                    {
                        section_idParameter.Value = section_id.Value;
                    }
                    else
                    {
                        section_idParameter.Size = -1;
                        section_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(section_idParameter);

                    DbParameter titleParameter = cmd.CreateParameter();
                    titleParameter.ParameterName = "title";
                    titleParameter.Direction = ParameterDirection.Input;
                    titleParameter.DbType = DbType.String;
                    if (title != null)
                    {
                        titleParameter.Value = title;
                    }
                    else
                    {
                        titleParameter.Size = -1;
                        titleParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(titleParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_SELECT_LINK_FUNCTIONSResult> UI_SELECT_LINK_FUNCTIONS (System.Nullable<int> user_id)
        {

            List<UI_SELECT_LINK_FUNCTIONSResult> result = new List<UI_SELECT_LINK_FUNCTIONSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_FUNCTIONS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINK_FUNCTIONSResult row = new UI_SELECT_LINK_FUNCTIONSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("section_id") && !reader.IsDBNull(reader.GetOrdinal("section_id")))
                                row.section_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"section_id")), typeof(int));
                            else
                                row.section_id = null;

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("section_description") && !reader.IsDBNull(reader.GetOrdinal("section_description")))
                                row.section_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"section_description")), typeof(string));
                            else
                                row.section_description = null;

                            if (fieldNames.Contains("title") && !reader.IsDBNull(reader.GetOrdinal("title")))
                                row.title = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"title")), typeof(string));
                            else
                                row.title = null;

                            if (fieldNames.Contains("stored_procedure") && !reader.IsDBNull(reader.GetOrdinal("stored_procedure")))
                                row.stored_procedure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stored_procedure")), typeof(string));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("modification_user") && !reader.IsDBNull(reader.GetOrdinal("modification_user")))
                                row.modification_user = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_user")), typeof(string));
                            else
                                row.modification_user = null;

                            if (fieldNames.Contains("modification_date") && !reader.IsDBNull(reader.GetOrdinal("modification_date")))
                                row.modification_date = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_date")), typeof(string));
                            else
                                row.modification_date = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_SELECT_LINK_FUNCTIONSResult>> UI_SELECT_LINK_FUNCTIONSAsync (System.Nullable<int> user_id)
        {

            List<UI_SELECT_LINK_FUNCTIONSResult> result = new List<UI_SELECT_LINK_FUNCTIONSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_FUNCTIONS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINK_FUNCTIONSResult row = new UI_SELECT_LINK_FUNCTIONSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("section_id") && !reader.IsDBNull(reader.GetOrdinal("section_id")))
                                row.section_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"section_id")), typeof(int));
                            else
                                row.section_id = null;

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("section_description") && !reader.IsDBNull(reader.GetOrdinal("section_description")))
                                row.section_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"section_description")), typeof(string));
                            else
                                row.section_description = null;

                            if (fieldNames.Contains("title") && !reader.IsDBNull(reader.GetOrdinal("title")))
                                row.title = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"title")), typeof(string));
                            else
                                row.title = null;

                            if (fieldNames.Contains("stored_procedure") && !reader.IsDBNull(reader.GetOrdinal("stored_procedure")))
                                row.stored_procedure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stored_procedure")), typeof(string));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("modification_user") && !reader.IsDBNull(reader.GetOrdinal("modification_user")))
                                row.modification_user = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_user")), typeof(string));
                            else
                                row.modification_user = null;

                            if (fieldNames.Contains("modification_date") && !reader.IsDBNull(reader.GetOrdinal("modification_date")))
                                row.modification_date = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_date")), typeof(string));
                            else
                                row.modification_date = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECT_STATES_FOR_DDResult> UI_SELECT_LINK_SECTIONS_FOR_DD (System.Nullable<int> user_id)
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_SECTIONS_FOR_DD";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_STATES_FOR_DDResult>> UI_SELECT_LINK_SECTIONS_FOR_DDAsync (System.Nullable<int> user_id)
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK_SECTIONS_FOR_DD";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> UI_UPDATE_LINK_FUNCTION (System.Nullable<int> id, System.Nullable<int> section_id, string title, string stored_procedure, string description, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_UPDATE_LINK_FUNCTION";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter section_idParameter = cmd.CreateParameter();
                    section_idParameter.ParameterName = "section_id";
                    section_idParameter.Direction = ParameterDirection.Input;
                    section_idParameter.DbType = DbType.Int32;
                    section_idParameter.Precision = 10;
                    section_idParameter.Scale = 0;
                    if (section_id.HasValue)
                    {
                        section_idParameter.Value = section_id.Value;
                    }
                    else
                    {
                        section_idParameter.Size = -1;
                        section_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(section_idParameter);

                    DbParameter titleParameter = cmd.CreateParameter();
                    titleParameter.ParameterName = "title";
                    titleParameter.Direction = ParameterDirection.Input;
                    titleParameter.DbType = DbType.String;
                    if (title != null)
                    {
                        titleParameter.Value = title;
                    }
                    else
                    {
                        titleParameter.Size = -1;
                        titleParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(titleParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> UI_UPDATE_LINK_FUNCTIONAsync (System.Nullable<int> id, System.Nullable<int> section_id, string title, string stored_procedure, string description, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_UPDATE_LINK_FUNCTION";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter section_idParameter = cmd.CreateParameter();
                    section_idParameter.ParameterName = "section_id";
                    section_idParameter.Direction = ParameterDirection.Input;
                    section_idParameter.DbType = DbType.Int32;
                    section_idParameter.Precision = 10;
                    section_idParameter.Scale = 0;
                    if (section_id.HasValue)
                    {
                        section_idParameter.Value = section_id.Value;
                    }
                    else
                    {
                        section_idParameter.Size = -1;
                        section_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(section_idParameter);

                    DbParameter titleParameter = cmd.CreateParameter();
                    titleParameter.ParameterName = "title";
                    titleParameter.Direction = ParameterDirection.Input;
                    titleParameter.DbType = DbType.String;
                    if (title != null)
                    {
                        titleParameter.Value = title;
                    }
                    else
                    {
                        titleParameter.Size = -1;
                        titleParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(titleParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPHResult> MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPH ()
        {

            List<MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPHResult> result = new List<MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPHResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPH";
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPHResult row = new MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPHResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(string));
                            else
                                row.id = null;

                            if (fieldNames.Contains("parent") && !reader.IsDBNull(reader.GetOrdinal("parent")))
                                row.parent = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"parent")), typeof(string));
                            else
                                row.parent = null;

                            if (fieldNames.Contains("text") && !reader.IsDBNull(reader.GetOrdinal("text")))
                                row.text = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"text")), typeof(string));
                            else
                                row.text = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPHResult>> MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPHAsync ()
        {

            List<MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPHResult> result = new List<MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPHResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPH";
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPHResult row = new MDM_SELECT_INVENTORY_CLASSES_FOR_GRAPHResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(string));
                            else
                                row.id = null;

                            if (fieldNames.Contains("parent") && !reader.IsDBNull(reader.GetOrdinal("parent")))
                                row.parent = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"parent")), typeof(string));
                            else
                                row.parent = null;

                            if (fieldNames.Contains("text") && !reader.IsDBNull(reader.GetOrdinal("text")))
                                row.text = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"text")), typeof(string));
                            else
                                row.text = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<PRC_SELECT_ORDER_ITEMS_GKIResult> PRC_SELECT_ORDER_ITEMS_GKI (System.Nullable<bool> show_classified, System.Nullable<bool> only_new, string ekk_guid_list, System.Nullable<int> user_id, System.Nullable<int> event_id)
        {

            List<PRC_SELECT_ORDER_ITEMS_GKIResult> result = new List<PRC_SELECT_ORDER_ITEMS_GKIResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.PRC_SELECT_ORDER_ITEMS_GKI";

                    DbParameter show_classifiedParameter = cmd.CreateParameter();
                    show_classifiedParameter.ParameterName = "show_classified";
                    show_classifiedParameter.Direction = ParameterDirection.Input;
                    show_classifiedParameter.DbType = DbType.Boolean;
                    if (show_classified.HasValue)
                    {
                        show_classifiedParameter.Value = show_classified.Value;
                    }
                    else
                    {
                        show_classifiedParameter.Size = -1;
                        show_classifiedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_classifiedParameter);

                    DbParameter only_newParameter = cmd.CreateParameter();
                    only_newParameter.ParameterName = "only_new";
                    only_newParameter.Direction = ParameterDirection.Input;
                    only_newParameter.DbType = DbType.Boolean;
                    if (only_new.HasValue)
                    {
                        only_newParameter.Value = only_new.Value;
                    }
                    else
                    {
                        only_newParameter.Size = -1;
                        only_newParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(only_newParameter);

                    DbParameter ekk_guid_listParameter = cmd.CreateParameter();
                    ekk_guid_listParameter.ParameterName = "ekk_guid_list";
                    ekk_guid_listParameter.Direction = ParameterDirection.Input;
                    ekk_guid_listParameter.DbType = DbType.String;
                    if (ekk_guid_list != null)
                    {
                        ekk_guid_listParameter.Value = ekk_guid_list;
                    }
                    else
                    {
                        ekk_guid_listParameter.Size = -1;
                        ekk_guid_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ekk_guid_listParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PRC_SELECT_ORDER_ITEMS_GKIResult row = new PRC_SELECT_ORDER_ITEMS_GKIResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("item_description") && !reader.IsDBNull(reader.GetOrdinal("item_description")))
                                row.item_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_description")), typeof(string));
                            else
                                row.item_description = null;

                            if (fieldNames.Contains("item_additional_properties") && !reader.IsDBNull(reader.GetOrdinal("item_additional_properties")))
                                row.item_additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_additional_properties")), typeof(string));
                            else
                                row.item_additional_properties = null;

                            if (fieldNames.Contains("order_code") && !reader.IsDBNull(reader.GetOrdinal("order_code")))
                                row.order_code = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_code")), typeof(int));

                            if (fieldNames.Contains("order_number") && !reader.IsDBNull(reader.GetOrdinal("order_number")))
                                row.order_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_number")), typeof(string));
                            else
                                row.order_number = null;

                            if (fieldNames.Contains("supply_manager") && !reader.IsDBNull(reader.GetOrdinal("supply_manager")))
                                row.supply_manager = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_manager")), typeof(string));
                            else
                                row.supply_manager = null;

                            if (fieldNames.Contains("order_item_note") && !reader.IsDBNull(reader.GetOrdinal("order_item_note")))
                                row.order_item_note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_item_note")), typeof(string));

                            if (fieldNames.Contains("order_item_modification_date") && !reader.IsDBNull(reader.GetOrdinal("order_item_modification_date")))
                                row.order_item_modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_item_modification_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("gki_code") && !reader.IsDBNull(reader.GetOrdinal("gki_code")))
                                row.gki_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_code")), typeof(string));
                            else
                                row.gki_code = null;

                            if (fieldNames.Contains("gki_code_date") && !reader.IsDBNull(reader.GetOrdinal("gki_code_date")))
                                row.gki_code_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_code_date")), typeof(System.DateTime));
                            else
                                row.gki_code_date = null;

                            if (fieldNames.Contains("gki_order_number") && !reader.IsDBNull(reader.GetOrdinal("gki_order_number")))
                                row.gki_order_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_order_number")), typeof(string));
                            else
                                row.gki_order_number = null;

                            if (fieldNames.Contains("gki_order_date") && !reader.IsDBNull(reader.GetOrdinal("gki_order_date")))
                                row.gki_order_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_order_date")), typeof(System.DateTime));
                            else
                                row.gki_order_date = null;

                            if (fieldNames.Contains("gki_state_id") && !reader.IsDBNull(reader.GetOrdinal("gki_state_id")))
                                row.gki_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state_id")), typeof(int));
                            else
                                row.gki_state_id = null;

                            if (fieldNames.Contains("gki_state") && !reader.IsDBNull(reader.GetOrdinal("gki_state")))
                                row.gki_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state")), typeof(string));
                            else
                                row.gki_state = null;

                            if (fieldNames.Contains("gki_state_date") && !reader.IsDBNull(reader.GetOrdinal("gki_state_date")))
                                row.gki_state_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state_date")), typeof(System.DateTime));
                            else
                                row.gki_state_date = null;

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal("note")))
                                row.note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.note = null;

                            if (fieldNames.Contains("gki_user") && !reader.IsDBNull(reader.GetOrdinal("gki_user")))
                                row.gki_user = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_user")), typeof(string));
                            else
                                row.gki_user = null;

                            if (fieldNames.Contains("color") && !reader.IsDBNull(reader.GetOrdinal("color")))
                                row.color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color")), typeof(string));
                            else
                                row.color = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<PRC_SELECT_ORDER_ITEMS_GKIResult>> PRC_SELECT_ORDER_ITEMS_GKIAsync (System.Nullable<bool> show_classified, System.Nullable<bool> only_new, string ekk_guid_list, System.Nullable<int> user_id, System.Nullable<int> event_id)
        {

            List<PRC_SELECT_ORDER_ITEMS_GKIResult> result = new List<PRC_SELECT_ORDER_ITEMS_GKIResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.PRC_SELECT_ORDER_ITEMS_GKI";

                    DbParameter show_classifiedParameter = cmd.CreateParameter();
                    show_classifiedParameter.ParameterName = "show_classified";
                    show_classifiedParameter.Direction = ParameterDirection.Input;
                    show_classifiedParameter.DbType = DbType.Boolean;
                    if (show_classified.HasValue)
                    {
                        show_classifiedParameter.Value = show_classified.Value;
                    }
                    else
                    {
                        show_classifiedParameter.Size = -1;
                        show_classifiedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_classifiedParameter);

                    DbParameter only_newParameter = cmd.CreateParameter();
                    only_newParameter.ParameterName = "only_new";
                    only_newParameter.Direction = ParameterDirection.Input;
                    only_newParameter.DbType = DbType.Boolean;
                    if (only_new.HasValue)
                    {
                        only_newParameter.Value = only_new.Value;
                    }
                    else
                    {
                        only_newParameter.Size = -1;
                        only_newParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(only_newParameter);

                    DbParameter ekk_guid_listParameter = cmd.CreateParameter();
                    ekk_guid_listParameter.ParameterName = "ekk_guid_list";
                    ekk_guid_listParameter.Direction = ParameterDirection.Input;
                    ekk_guid_listParameter.DbType = DbType.String;
                    if (ekk_guid_list != null)
                    {
                        ekk_guid_listParameter.Value = ekk_guid_list;
                    }
                    else
                    {
                        ekk_guid_listParameter.Size = -1;
                        ekk_guid_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ekk_guid_listParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PRC_SELECT_ORDER_ITEMS_GKIResult row = new PRC_SELECT_ORDER_ITEMS_GKIResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("item_description") && !reader.IsDBNull(reader.GetOrdinal("item_description")))
                                row.item_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_description")), typeof(string));
                            else
                                row.item_description = null;

                            if (fieldNames.Contains("item_additional_properties") && !reader.IsDBNull(reader.GetOrdinal("item_additional_properties")))
                                row.item_additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_additional_properties")), typeof(string));
                            else
                                row.item_additional_properties = null;

                            if (fieldNames.Contains("order_code") && !reader.IsDBNull(reader.GetOrdinal("order_code")))
                                row.order_code = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_code")), typeof(int));

                            if (fieldNames.Contains("order_number") && !reader.IsDBNull(reader.GetOrdinal("order_number")))
                                row.order_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_number")), typeof(string));
                            else
                                row.order_number = null;

                            if (fieldNames.Contains("supply_manager") && !reader.IsDBNull(reader.GetOrdinal("supply_manager")))
                                row.supply_manager = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_manager")), typeof(string));
                            else
                                row.supply_manager = null;

                            if (fieldNames.Contains("order_item_note") && !reader.IsDBNull(reader.GetOrdinal("order_item_note")))
                                row.order_item_note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_item_note")), typeof(string));

                            if (fieldNames.Contains("order_item_modification_date") && !reader.IsDBNull(reader.GetOrdinal("order_item_modification_date")))
                                row.order_item_modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_item_modification_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("gki_code") && !reader.IsDBNull(reader.GetOrdinal("gki_code")))
                                row.gki_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_code")), typeof(string));
                            else
                                row.gki_code = null;

                            if (fieldNames.Contains("gki_code_date") && !reader.IsDBNull(reader.GetOrdinal("gki_code_date")))
                                row.gki_code_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_code_date")), typeof(System.DateTime));
                            else
                                row.gki_code_date = null;

                            if (fieldNames.Contains("gki_order_number") && !reader.IsDBNull(reader.GetOrdinal("gki_order_number")))
                                row.gki_order_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_order_number")), typeof(string));
                            else
                                row.gki_order_number = null;

                            if (fieldNames.Contains("gki_order_date") && !reader.IsDBNull(reader.GetOrdinal("gki_order_date")))
                                row.gki_order_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_order_date")), typeof(System.DateTime));
                            else
                                row.gki_order_date = null;

                            if (fieldNames.Contains("gki_state_id") && !reader.IsDBNull(reader.GetOrdinal("gki_state_id")))
                                row.gki_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state_id")), typeof(int));
                            else
                                row.gki_state_id = null;

                            if (fieldNames.Contains("gki_state") && !reader.IsDBNull(reader.GetOrdinal("gki_state")))
                                row.gki_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state")), typeof(string));
                            else
                                row.gki_state = null;

                            if (fieldNames.Contains("gki_state_date") && !reader.IsDBNull(reader.GetOrdinal("gki_state_date")))
                                row.gki_state_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_state_date")), typeof(System.DateTime));
                            else
                                row.gki_state_date = null;

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal("note")))
                                row.note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.note = null;

                            if (fieldNames.Contains("gki_user") && !reader.IsDBNull(reader.GetOrdinal("gki_user")))
                                row.gki_user = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"gki_user")), typeof(string));
                            else
                                row.gki_user = null;

                            if (fieldNames.Contains("color") && !reader.IsDBNull(reader.GetOrdinal("color")))
                                row.color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color")), typeof(string));
                            else
                                row.color = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> APL_INSERT_PROJECT_LOADING_ITEM (System.Nullable<int> loading_id, System.Nullable<int> object_id, string subobject_description, string start_description, string finish_description, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_INSERT_PROJECT_LOADING_ITEM";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter object_idParameter = cmd.CreateParameter();
                    object_idParameter.ParameterName = "object_id";
                    object_idParameter.Direction = ParameterDirection.Input;
                    object_idParameter.DbType = DbType.Int32;
                    object_idParameter.Precision = 10;
                    object_idParameter.Scale = 0;
                    if (object_id.HasValue)
                    {
                        object_idParameter.Value = object_id.Value;
                    }
                    else
                    {
                        object_idParameter.Size = -1;
                        object_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(object_idParameter);

                    DbParameter subobject_descriptionParameter = cmd.CreateParameter();
                    subobject_descriptionParameter.ParameterName = "subobject_description";
                    subobject_descriptionParameter.Direction = ParameterDirection.Input;
                    subobject_descriptionParameter.DbType = DbType.String;
                    if (subobject_description != null)
                    {
                        subobject_descriptionParameter.Value = subobject_description;
                    }
                    else
                    {
                        subobject_descriptionParameter.Size = -1;
                        subobject_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subobject_descriptionParameter);

                    DbParameter start_descriptionParameter = cmd.CreateParameter();
                    start_descriptionParameter.ParameterName = "start_description";
                    start_descriptionParameter.Direction = ParameterDirection.Input;
                    start_descriptionParameter.DbType = DbType.String;
                    if (start_description != null)
                    {
                        start_descriptionParameter.Value = start_description;
                    }
                    else
                    {
                        start_descriptionParameter.Size = -1;
                        start_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(start_descriptionParameter);

                    DbParameter finish_descriptionParameter = cmd.CreateParameter();
                    finish_descriptionParameter.ParameterName = "finish_description";
                    finish_descriptionParameter.Direction = ParameterDirection.Input;
                    finish_descriptionParameter.DbType = DbType.String;
                    if (finish_description != null)
                    {
                        finish_descriptionParameter.Value = finish_description;
                    }
                    else
                    {
                        finish_descriptionParameter.Size = -1;
                        finish_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finish_descriptionParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> APL_INSERT_PROJECT_LOADING_ITEMAsync (System.Nullable<int> loading_id, System.Nullable<int> object_id, string subobject_description, string start_description, string finish_description, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_INSERT_PROJECT_LOADING_ITEM";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter object_idParameter = cmd.CreateParameter();
                    object_idParameter.ParameterName = "object_id";
                    object_idParameter.Direction = ParameterDirection.Input;
                    object_idParameter.DbType = DbType.Int32;
                    object_idParameter.Precision = 10;
                    object_idParameter.Scale = 0;
                    if (object_id.HasValue)
                    {
                        object_idParameter.Value = object_id.Value;
                    }
                    else
                    {
                        object_idParameter.Size = -1;
                        object_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(object_idParameter);

                    DbParameter subobject_descriptionParameter = cmd.CreateParameter();
                    subobject_descriptionParameter.ParameterName = "subobject_description";
                    subobject_descriptionParameter.Direction = ParameterDirection.Input;
                    subobject_descriptionParameter.DbType = DbType.String;
                    if (subobject_description != null)
                    {
                        subobject_descriptionParameter.Value = subobject_description;
                    }
                    else
                    {
                        subobject_descriptionParameter.Size = -1;
                        subobject_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subobject_descriptionParameter);

                    DbParameter start_descriptionParameter = cmd.CreateParameter();
                    start_descriptionParameter.ParameterName = "start_description";
                    start_descriptionParameter.Direction = ParameterDirection.Input;
                    start_descriptionParameter.DbType = DbType.String;
                    if (start_description != null)
                    {
                        start_descriptionParameter.Value = start_description;
                    }
                    else
                    {
                        start_descriptionParameter.Size = -1;
                        start_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(start_descriptionParameter);

                    DbParameter finish_descriptionParameter = cmd.CreateParameter();
                    finish_descriptionParameter.ParameterName = "finish_description";
                    finish_descriptionParameter.Direction = ParameterDirection.Input;
                    finish_descriptionParameter.DbType = DbType.String;
                    if (finish_description != null)
                    {
                        finish_descriptionParameter.Value = finish_description;
                    }
                    else
                    {
                        finish_descriptionParameter.Size = -1;
                        finish_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finish_descriptionParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public void SYS_COMMIT_LOADING (System.Nullable<int> loading_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_COMMIT_LOADING";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task SYS_COMMIT_LOADINGAsync (System.Nullable<int> loading_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_COMMIT_LOADING";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public List<SYS_SELECT_LOADING_INFOResult> SYS_SELECT_LOADING_INFO (System.Nullable<int> loading_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<SYS_SELECT_LOADING_INFOResult> result = new List<SYS_SELECT_LOADING_INFOResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_LOADING_INFO";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_LOADING_INFOResult row = new SYS_SELECT_LOADING_INFOResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("loading_state_id") && !reader.IsDBNull(reader.GetOrdinal("loading_state_id")))
                                row.loading_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"loading_state_id")), typeof(int));
                            else
                                row.loading_state_id = null;

                            if (fieldNames.Contains("loading_state_description") && !reader.IsDBNull(reader.GetOrdinal("loading_state_description")))
                                row.loading_state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"loading_state_description")), typeof(string));
                            else
                                row.loading_state_description = null;

                            if (fieldNames.Contains("allow_commit") && !reader.IsDBNull(reader.GetOrdinal("allow_commit")))
                                row.allow_commit = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"allow_commit")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("total_cnt") && !reader.IsDBNull(reader.GetOrdinal("total_cnt")))
                                row.total_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_cnt")), typeof(int));
                            else
                                row.total_cnt = null;

                            if (fieldNames.Contains("error_cnt") && !reader.IsDBNull(reader.GetOrdinal("error_cnt")))
                                row.error_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_cnt")), typeof(int));
                            else
                                row.error_cnt = null;

                            if (fieldNames.Contains("warning_cnt") && !reader.IsDBNull(reader.GetOrdinal("warning_cnt")))
                                row.warning_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warning_cnt")), typeof(int));
                            else
                                row.warning_cnt = null;

                            if (fieldNames.Contains("info_html") && !reader.IsDBNull(reader.GetOrdinal("info_html")))
                                row.info_html = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"info_html")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SYS_SELECT_LOADING_INFOResult>> SYS_SELECT_LOADING_INFOAsync (System.Nullable<int> loading_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<SYS_SELECT_LOADING_INFOResult> result = new List<SYS_SELECT_LOADING_INFOResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_LOADING_INFO";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_LOADING_INFOResult row = new SYS_SELECT_LOADING_INFOResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("loading_state_id") && !reader.IsDBNull(reader.GetOrdinal("loading_state_id")))
                                row.loading_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"loading_state_id")), typeof(int));
                            else
                                row.loading_state_id = null;

                            if (fieldNames.Contains("loading_state_description") && !reader.IsDBNull(reader.GetOrdinal("loading_state_description")))
                                row.loading_state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"loading_state_description")), typeof(string));
                            else
                                row.loading_state_description = null;

                            if (fieldNames.Contains("allow_commit") && !reader.IsDBNull(reader.GetOrdinal("allow_commit")))
                                row.allow_commit = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"allow_commit")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("total_cnt") && !reader.IsDBNull(reader.GetOrdinal("total_cnt")))
                                row.total_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_cnt")), typeof(int));
                            else
                                row.total_cnt = null;

                            if (fieldNames.Contains("error_cnt") && !reader.IsDBNull(reader.GetOrdinal("error_cnt")))
                                row.error_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_cnt")), typeof(int));
                            else
                                row.error_cnt = null;

                            if (fieldNames.Contains("warning_cnt") && !reader.IsDBNull(reader.GetOrdinal("warning_cnt")))
                                row.warning_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warning_cnt")), typeof(int));
                            else
                                row.warning_cnt = null;

                            if (fieldNames.Contains("info_html") && !reader.IsDBNull(reader.GetOrdinal("info_html")))
                                row.info_html = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"info_html")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<SYS_INSERT_LOADING2Result> SYS_INSERT_LOADING2 (System.Nullable<int> loading_type_id, string description, string file_name, string summary, System.Nullable<int> user_id)
        {

            List<SYS_INSERT_LOADING2Result> result = new List<SYS_INSERT_LOADING2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_INSERT_LOADING2";

                    DbParameter loading_type_idParameter = cmd.CreateParameter();
                    loading_type_idParameter.ParameterName = "loading_type_id";
                    loading_type_idParameter.Direction = ParameterDirection.Input;
                    loading_type_idParameter.DbType = DbType.Int32;
                    loading_type_idParameter.Precision = 10;
                    loading_type_idParameter.Scale = 0;
                    if (loading_type_id.HasValue)
                    {
                        loading_type_idParameter.Value = loading_type_id.Value;
                    }
                    else
                    {
                        loading_type_idParameter.Size = -1;
                        loading_type_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_type_idParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter file_nameParameter = cmd.CreateParameter();
                    file_nameParameter.ParameterName = "file_name";
                    file_nameParameter.Direction = ParameterDirection.Input;
                    file_nameParameter.DbType = DbType.String;
                    if (file_name != null)
                    {
                        file_nameParameter.Value = file_name;
                    }
                    else
                    {
                        file_nameParameter.Size = -1;
                        file_nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(file_nameParameter);

                    DbParameter summaryParameter = cmd.CreateParameter();
                    summaryParameter.ParameterName = "summary";
                    summaryParameter.Direction = ParameterDirection.Input;
                    summaryParameter.DbType = DbType.String;
                    if (summary != null)
                    {
                        summaryParameter.Value = summary;
                    }
                    else
                    {
                        summaryParameter.Size = -1;
                        summaryParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(summaryParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_INSERT_LOADING2Result row = new SYS_INSERT_LOADING2Result();
                            if (fieldNames.Contains("loading_id") && !reader.IsDBNull(reader.GetOrdinal("loading_id")))
                                row.loading_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"loading_id")), typeof(int));
                            else
                                row.loading_id = null;

                            if (fieldNames.Contains("column_cnt") && !reader.IsDBNull(reader.GetOrdinal("column_cnt")))
                                row.column_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"column_cnt")), typeof(int));
                            else
                                row.column_cnt = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SYS_INSERT_LOADING2Result>> SYS_INSERT_LOADING2Async (System.Nullable<int> loading_type_id, string description, string file_name, string summary, System.Nullable<int> user_id)
        {

            List<SYS_INSERT_LOADING2Result> result = new List<SYS_INSERT_LOADING2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_INSERT_LOADING2";

                    DbParameter loading_type_idParameter = cmd.CreateParameter();
                    loading_type_idParameter.ParameterName = "loading_type_id";
                    loading_type_idParameter.Direction = ParameterDirection.Input;
                    loading_type_idParameter.DbType = DbType.Int32;
                    loading_type_idParameter.Precision = 10;
                    loading_type_idParameter.Scale = 0;
                    if (loading_type_id.HasValue)
                    {
                        loading_type_idParameter.Value = loading_type_id.Value;
                    }
                    else
                    {
                        loading_type_idParameter.Size = -1;
                        loading_type_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_type_idParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter file_nameParameter = cmd.CreateParameter();
                    file_nameParameter.ParameterName = "file_name";
                    file_nameParameter.Direction = ParameterDirection.Input;
                    file_nameParameter.DbType = DbType.String;
                    if (file_name != null)
                    {
                        file_nameParameter.Value = file_name;
                    }
                    else
                    {
                        file_nameParameter.Size = -1;
                        file_nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(file_nameParameter);

                    DbParameter summaryParameter = cmd.CreateParameter();
                    summaryParameter.ParameterName = "summary";
                    summaryParameter.Direction = ParameterDirection.Input;
                    summaryParameter.DbType = DbType.String;
                    if (summary != null)
                    {
                        summaryParameter.Value = summary;
                    }
                    else
                    {
                        summaryParameter.Size = -1;
                        summaryParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(summaryParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_INSERT_LOADING2Result row = new SYS_INSERT_LOADING2Result();
                            if (fieldNames.Contains("loading_id") && !reader.IsDBNull(reader.GetOrdinal("loading_id")))
                                row.loading_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"loading_id")), typeof(int));
                            else
                                row.loading_id = null;

                            if (fieldNames.Contains("column_cnt") && !reader.IsDBNull(reader.GetOrdinal("column_cnt")))
                                row.column_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"column_cnt")), typeof(int));
                            else
                                row.column_cnt = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECT_STATES_FOR_DDResult> UI_SELECT_DROPDOWN (string dropdown, string param, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_DROPDOWN";

                    DbParameter dropdownParameter = cmd.CreateParameter();
                    dropdownParameter.ParameterName = "dropdown";
                    dropdownParameter.Direction = ParameterDirection.Input;
                    dropdownParameter.DbType = DbType.String;
                    if (dropdown != null)
                    {
                        dropdownParameter.Value = dropdown;
                    }
                    else
                    {
                        dropdownParameter.Size = -1;
                        dropdownParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(dropdownParameter);

                    DbParameter paramParameter = cmd.CreateParameter();
                    paramParameter.ParameterName = "param";
                    paramParameter.Direction = ParameterDirection.Input;
                    paramParameter.DbType = DbType.String;
                    if (param != null)
                    {
                        paramParameter.Value = param;
                    }
                    else
                    {
                        paramParameter.Size = -1;
                        paramParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(paramParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_STATES_FOR_DDResult>> UI_SELECT_DROPDOWNAsync (string dropdown, string param, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<APL_SELECT_PROJECT_STATES_FOR_DDResult> result = new List<APL_SELECT_PROJECT_STATES_FOR_DDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_DROPDOWN";

                    DbParameter dropdownParameter = cmd.CreateParameter();
                    dropdownParameter.ParameterName = "dropdown";
                    dropdownParameter.Direction = ParameterDirection.Input;
                    dropdownParameter.DbType = DbType.String;
                    if (dropdown != null)
                    {
                        dropdownParameter.Value = dropdown;
                    }
                    else
                    {
                        dropdownParameter.Size = -1;
                        dropdownParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(dropdownParameter);

                    DbParameter paramParameter = cmd.CreateParameter();
                    paramParameter.ParameterName = "param";
                    paramParameter.Direction = ParameterDirection.Input;
                    paramParameter.DbType = DbType.String;
                    if (param != null)
                    {
                        paramParameter.Value = param;
                    }
                    else
                    {
                        paramParameter.Size = -1;
                        paramParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(paramParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_STATES_FOR_DDResult row = new APL_SELECT_PROJECT_STATES_FOR_DDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_GET_ACTION_ROLEResult> UI_GET_ACTION_ROLE (string url, string action, System.Nullable<int> user_id, string param)
        {

            List<UI_GET_ACTION_ROLEResult> result = new List<UI_GET_ACTION_ROLEResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_GET_ACTION_ROLE";

                    DbParameter urlParameter = cmd.CreateParameter();
                    urlParameter.ParameterName = "url";
                    urlParameter.Direction = ParameterDirection.Input;
                    urlParameter.DbType = DbType.String;
                    urlParameter.Size = 510;
                    if (url != null)
                    {
                        urlParameter.Value = url;
                    }
                    else
                    {
                        urlParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(urlParameter);

                    DbParameter actionParameter = cmd.CreateParameter();
                    actionParameter.ParameterName = "action";
                    actionParameter.Direction = ParameterDirection.Input;
                    actionParameter.DbType = DbType.String;
                    actionParameter.Size = 510;
                    if (action != null)
                    {
                        actionParameter.Value = action;
                    }
                    else
                    {
                        actionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(actionParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter paramParameter = cmd.CreateParameter();
                    paramParameter.ParameterName = "param";
                    paramParameter.Direction = ParameterDirection.Input;
                    paramParameter.DbType = DbType.String;
                    if (param != null)
                    {
                        paramParameter.Value = param;
                    }
                    else
                    {
                        paramParameter.Size = -1;
                        paramParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(paramParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_GET_ACTION_ROLEResult row = new UI_GET_ACTION_ROLEResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.column0 = (bool)Convert.ChangeType(reader.GetValue(0), typeof(bool));
                            else
                            if (fieldNames.Contains("column0") && !reader.IsDBNull(reader.GetOrdinal("column0")))
                                row.column0 = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"column0")), typeof(bool));
                            else
                                row.column0 = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_GET_ACTION_ROLEResult>> UI_GET_ACTION_ROLEAsync (string url, string action, System.Nullable<int> user_id, string param)
        {

            List<UI_GET_ACTION_ROLEResult> result = new List<UI_GET_ACTION_ROLEResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_GET_ACTION_ROLE";

                    DbParameter urlParameter = cmd.CreateParameter();
                    urlParameter.ParameterName = "url";
                    urlParameter.Direction = ParameterDirection.Input;
                    urlParameter.DbType = DbType.String;
                    urlParameter.Size = 510;
                    if (url != null)
                    {
                        urlParameter.Value = url;
                    }
                    else
                    {
                        urlParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(urlParameter);

                    DbParameter actionParameter = cmd.CreateParameter();
                    actionParameter.ParameterName = "action";
                    actionParameter.Direction = ParameterDirection.Input;
                    actionParameter.DbType = DbType.String;
                    actionParameter.Size = 510;
                    if (action != null)
                    {
                        actionParameter.Value = action;
                    }
                    else
                    {
                        actionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(actionParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter paramParameter = cmd.CreateParameter();
                    paramParameter.ParameterName = "param";
                    paramParameter.Direction = ParameterDirection.Input;
                    paramParameter.DbType = DbType.String;
                    if (param != null)
                    {
                        paramParameter.Value = param;
                    }
                    else
                    {
                        paramParameter.Size = -1;
                        paramParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(paramParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_GET_ACTION_ROLEResult row = new UI_GET_ACTION_ROLEResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.column0 = (bool)Convert.ChangeType(reader.GetValue(0), typeof(bool));
                            else
                            if (fieldNames.Contains("column0") && !reader.IsDBNull(reader.GetOrdinal("column0")))
                                row.column0 = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"column0")), typeof(bool));
                            else
                                row.column0 = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> APL_UPDATE_PROJECT2 (System.Nullable<int> id, string project_description, string project_short_description, System.Nullable<int> project_type_id, System.Nullable<int> project_state_id, System.Nullable<int> customer_id, System.Nullable<int> designer_id, System.Nullable<int> normative_delivery_time, System.Nullable<double> start, System.Nullable<double> finish, System.Nullable<int> year1, System.Nullable<int> year2, System.Nullable<System.DateTime> finish_date, System.Nullable<int> build_curator_id, string build_curator_list_id, System.Nullable<int> package_curator_id, System.Nullable<int> supply_curator_id, string supply_curator_list_id, string deliveryplan_curator_list_id, System.Nullable<int> project_curator_id, System.Nullable<int> stocks_curator_id, string storage_contract, System.Nullable<System.DateTime> storage_contract_finish_date, System.Nullable<bool> non_project_supplier_approve_required, System.Nullable<int> rss_match_type_id, System.Nullable<int> tpsu_division_id, string subcontractor_info_list_id, string is_documentation_percent, string is_documentation, string is_change_documentation_percent, string is_change_documentation, System.Nullable<double> total_sum_gk, System.Nullable<double> total_sum_direct, System.Nullable<double> advance_info, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_PROJECT2";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter project_descriptionParameter = cmd.CreateParameter();
                    project_descriptionParameter.ParameterName = "project_description";
                    project_descriptionParameter.Direction = ParameterDirection.Input;
                    project_descriptionParameter.DbType = DbType.String;
                    if (project_description != null)
                    {
                        project_descriptionParameter.Value = project_description;
                    }
                    else
                    {
                        project_descriptionParameter.Size = -1;
                        project_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_descriptionParameter);

                    DbParameter project_short_descriptionParameter = cmd.CreateParameter();
                    project_short_descriptionParameter.ParameterName = "project_short_description";
                    project_short_descriptionParameter.Direction = ParameterDirection.Input;
                    project_short_descriptionParameter.DbType = DbType.String;
                    project_short_descriptionParameter.Size = 510;
                    if (project_short_description != null)
                    {
                        project_short_descriptionParameter.Value = project_short_description;
                    }
                    else
                    {
                        project_short_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_short_descriptionParameter);

                    DbParameter project_type_idParameter = cmd.CreateParameter();
                    project_type_idParameter.ParameterName = "project_type_id";
                    project_type_idParameter.Direction = ParameterDirection.Input;
                    project_type_idParameter.DbType = DbType.Int32;
                    project_type_idParameter.Precision = 10;
                    project_type_idParameter.Scale = 0;
                    if (project_type_id.HasValue)
                    {
                        project_type_idParameter.Value = project_type_id.Value;
                    }
                    else
                    {
                        project_type_idParameter.Size = -1;
                        project_type_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_type_idParameter);

                    DbParameter project_state_idParameter = cmd.CreateParameter();
                    project_state_idParameter.ParameterName = "project_state_id";
                    project_state_idParameter.Direction = ParameterDirection.Input;
                    project_state_idParameter.DbType = DbType.Int32;
                    project_state_idParameter.Precision = 10;
                    project_state_idParameter.Scale = 0;
                    if (project_state_id.HasValue)
                    {
                        project_state_idParameter.Value = project_state_id.Value;
                    }
                    else
                    {
                        project_state_idParameter.Size = -1;
                        project_state_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_state_idParameter);

                    DbParameter customer_idParameter = cmd.CreateParameter();
                    customer_idParameter.ParameterName = "customer_id";
                    customer_idParameter.Direction = ParameterDirection.Input;
                    customer_idParameter.DbType = DbType.Int32;
                    customer_idParameter.Precision = 10;
                    customer_idParameter.Scale = 0;
                    if (customer_id.HasValue)
                    {
                        customer_idParameter.Value = customer_id.Value;
                    }
                    else
                    {
                        customer_idParameter.Size = -1;
                        customer_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(customer_idParameter);

                    DbParameter designer_idParameter = cmd.CreateParameter();
                    designer_idParameter.ParameterName = "designer_id";
                    designer_idParameter.Direction = ParameterDirection.Input;
                    designer_idParameter.DbType = DbType.Int32;
                    designer_idParameter.Precision = 10;
                    designer_idParameter.Scale = 0;
                    if (designer_id.HasValue)
                    {
                        designer_idParameter.Value = designer_id.Value;
                    }
                    else
                    {
                        designer_idParameter.Size = -1;
                        designer_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(designer_idParameter);

                    DbParameter normative_delivery_timeParameter = cmd.CreateParameter();
                    normative_delivery_timeParameter.ParameterName = "normative_delivery_time";
                    normative_delivery_timeParameter.Direction = ParameterDirection.Input;
                    normative_delivery_timeParameter.DbType = DbType.Int32;
                    normative_delivery_timeParameter.Precision = 10;
                    normative_delivery_timeParameter.Scale = 0;
                    if (normative_delivery_time.HasValue)
                    {
                        normative_delivery_timeParameter.Value = normative_delivery_time.Value;
                    }
                    else
                    {
                        normative_delivery_timeParameter.Size = -1;
                        normative_delivery_timeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(normative_delivery_timeParameter);

                    DbParameter startParameter = cmd.CreateParameter();
                    startParameter.ParameterName = "start";
                    startParameter.Direction = ParameterDirection.Input;
                    startParameter.DbType = DbType.Double;
                    startParameter.Precision = 53;
                    if (start.HasValue)
                    {
                        startParameter.Value = start.Value;
                    }
                    else
                    {
                        startParameter.Size = -1;
                        startParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startParameter);

                    DbParameter finishParameter = cmd.CreateParameter();
                    finishParameter.ParameterName = "finish";
                    finishParameter.Direction = ParameterDirection.Input;
                    finishParameter.DbType = DbType.Double;
                    finishParameter.Precision = 53;
                    if (finish.HasValue)
                    {
                        finishParameter.Value = finish.Value;
                    }
                    else
                    {
                        finishParameter.Size = -1;
                        finishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finishParameter);

                    DbParameter year1Parameter = cmd.CreateParameter();
                    year1Parameter.ParameterName = "year1";
                    year1Parameter.Direction = ParameterDirection.Input;
                    year1Parameter.DbType = DbType.Int32;
                    year1Parameter.Precision = 10;
                    year1Parameter.Scale = 0;
                    if (year1.HasValue)
                    {
                        year1Parameter.Value = year1.Value;
                    }
                    else
                    {
                        year1Parameter.Size = -1;
                        year1Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(year1Parameter);

                    DbParameter year2Parameter = cmd.CreateParameter();
                    year2Parameter.ParameterName = "year2";
                    year2Parameter.Direction = ParameterDirection.Input;
                    year2Parameter.DbType = DbType.Int32;
                    year2Parameter.Precision = 10;
                    year2Parameter.Scale = 0;
                    if (year2.HasValue)
                    {
                        year2Parameter.Value = year2.Value;
                    }
                    else
                    {
                        year2Parameter.Size = -1;
                        year2Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(year2Parameter);

                    DbParameter finish_dateParameter = cmd.CreateParameter();
                    finish_dateParameter.ParameterName = "finish_date";
                    finish_dateParameter.Direction = ParameterDirection.Input;
                    finish_dateParameter.DbType = DbType.DateTime;
                    if (finish_date.HasValue)
                    {
                        finish_dateParameter.Value = finish_date.Value;
                    }
                    else
                    {
                        finish_dateParameter.Size = -1;
                        finish_dateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finish_dateParameter);

                    DbParameter build_curator_idParameter = cmd.CreateParameter();
                    build_curator_idParameter.ParameterName = "build_curator_id";
                    build_curator_idParameter.Direction = ParameterDirection.Input;
                    build_curator_idParameter.DbType = DbType.Int32;
                    build_curator_idParameter.Precision = 10;
                    build_curator_idParameter.Scale = 0;
                    if (build_curator_id.HasValue)
                    {
                        build_curator_idParameter.Value = build_curator_id.Value;
                    }
                    else
                    {
                        build_curator_idParameter.Size = -1;
                        build_curator_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(build_curator_idParameter);

                    DbParameter build_curator_list_idParameter = cmd.CreateParameter();
                    build_curator_list_idParameter.ParameterName = "build_curator_list_id";
                    build_curator_list_idParameter.Direction = ParameterDirection.Input;
                    build_curator_list_idParameter.DbType = DbType.String;
                    if (build_curator_list_id != null)
                    {
                        build_curator_list_idParameter.Value = build_curator_list_id;
                    }
                    else
                    {
                        build_curator_list_idParameter.Size = -1;
                        build_curator_list_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(build_curator_list_idParameter);

                    DbParameter package_curator_idParameter = cmd.CreateParameter();
                    package_curator_idParameter.ParameterName = "package_curator_id";
                    package_curator_idParameter.Direction = ParameterDirection.Input;
                    package_curator_idParameter.DbType = DbType.Int32;
                    package_curator_idParameter.Precision = 10;
                    package_curator_idParameter.Scale = 0;
                    if (package_curator_id.HasValue)
                    {
                        package_curator_idParameter.Value = package_curator_id.Value;
                    }
                    else
                    {
                        package_curator_idParameter.Size = -1;
                        package_curator_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(package_curator_idParameter);

                    DbParameter supply_curator_idParameter = cmd.CreateParameter();
                    supply_curator_idParameter.ParameterName = "supply_curator_id";
                    supply_curator_idParameter.Direction = ParameterDirection.Input;
                    supply_curator_idParameter.DbType = DbType.Int32;
                    supply_curator_idParameter.Precision = 10;
                    supply_curator_idParameter.Scale = 0;
                    if (supply_curator_id.HasValue)
                    {
                        supply_curator_idParameter.Value = supply_curator_id.Value;
                    }
                    else
                    {
                        supply_curator_idParameter.Size = -1;
                        supply_curator_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(supply_curator_idParameter);

                    DbParameter supply_curator_list_idParameter = cmd.CreateParameter();
                    supply_curator_list_idParameter.ParameterName = "supply_curator_list_id";
                    supply_curator_list_idParameter.Direction = ParameterDirection.Input;
                    supply_curator_list_idParameter.DbType = DbType.String;
                    if (supply_curator_list_id != null)
                    {
                        supply_curator_list_idParameter.Value = supply_curator_list_id;
                    }
                    else
                    {
                        supply_curator_list_idParameter.Size = -1;
                        supply_curator_list_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(supply_curator_list_idParameter);

                    DbParameter deliveryplan_curator_list_idParameter = cmd.CreateParameter();
                    deliveryplan_curator_list_idParameter.ParameterName = "deliveryplan_curator_list_id";
                    deliveryplan_curator_list_idParameter.Direction = ParameterDirection.Input;
                    deliveryplan_curator_list_idParameter.DbType = DbType.String;
                    if (deliveryplan_curator_list_id != null)
                    {
                        deliveryplan_curator_list_idParameter.Value = deliveryplan_curator_list_id;
                    }
                    else
                    {
                        deliveryplan_curator_list_idParameter.Size = -1;
                        deliveryplan_curator_list_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(deliveryplan_curator_list_idParameter);

                    DbParameter project_curator_idParameter = cmd.CreateParameter();
                    project_curator_idParameter.ParameterName = "project_curator_id";
                    project_curator_idParameter.Direction = ParameterDirection.Input;
                    project_curator_idParameter.DbType = DbType.Int32;
                    project_curator_idParameter.Precision = 10;
                    project_curator_idParameter.Scale = 0;
                    if (project_curator_id.HasValue)
                    {
                        project_curator_idParameter.Value = project_curator_id.Value;
                    }
                    else
                    {
                        project_curator_idParameter.Size = -1;
                        project_curator_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_curator_idParameter);

                    DbParameter stocks_curator_idParameter = cmd.CreateParameter();
                    stocks_curator_idParameter.ParameterName = "stocks_curator_id";
                    stocks_curator_idParameter.Direction = ParameterDirection.Input;
                    stocks_curator_idParameter.DbType = DbType.Int32;
                    stocks_curator_idParameter.Precision = 10;
                    stocks_curator_idParameter.Scale = 0;
                    if (stocks_curator_id.HasValue)
                    {
                        stocks_curator_idParameter.Value = stocks_curator_id.Value;
                    }
                    else
                    {
                        stocks_curator_idParameter.Size = -1;
                        stocks_curator_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stocks_curator_idParameter);

                    DbParameter storage_contractParameter = cmd.CreateParameter();
                    storage_contractParameter.ParameterName = "storage_contract";
                    storage_contractParameter.Direction = ParameterDirection.Input;
                    storage_contractParameter.DbType = DbType.String;
                    if (storage_contract != null)
                    {
                        storage_contractParameter.Value = storage_contract;
                    }
                    else
                    {
                        storage_contractParameter.Size = -1;
                        storage_contractParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(storage_contractParameter);

                    DbParameter storage_contract_finish_dateParameter = cmd.CreateParameter();
                    storage_contract_finish_dateParameter.ParameterName = "storage_contract_finish_date";
                    storage_contract_finish_dateParameter.Direction = ParameterDirection.Input;
                    storage_contract_finish_dateParameter.DbType = DbType.DateTime;
                    if (storage_contract_finish_date.HasValue)
                    {
                        storage_contract_finish_dateParameter.Value = storage_contract_finish_date.Value;
                    }
                    else
                    {
                        storage_contract_finish_dateParameter.Size = -1;
                        storage_contract_finish_dateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(storage_contract_finish_dateParameter);

                    DbParameter non_project_supplier_approve_requiredParameter = cmd.CreateParameter();
                    non_project_supplier_approve_requiredParameter.ParameterName = "non_project_supplier_approve_required";
                    non_project_supplier_approve_requiredParameter.Direction = ParameterDirection.Input;
                    non_project_supplier_approve_requiredParameter.DbType = DbType.Boolean;
                    if (non_project_supplier_approve_required.HasValue)
                    {
                        non_project_supplier_approve_requiredParameter.Value = non_project_supplier_approve_required.Value;
                    }
                    else
                    {
                        non_project_supplier_approve_requiredParameter.Size = -1;
                        non_project_supplier_approve_requiredParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(non_project_supplier_approve_requiredParameter);

                    DbParameter rss_match_type_idParameter = cmd.CreateParameter();
                    rss_match_type_idParameter.ParameterName = "rss_match_type_id";
                    rss_match_type_idParameter.Direction = ParameterDirection.Input;
                    rss_match_type_idParameter.DbType = DbType.Int32;
                    rss_match_type_idParameter.Precision = 10;
                    rss_match_type_idParameter.Scale = 0;
                    if (rss_match_type_id.HasValue)
                    {
                        rss_match_type_idParameter.Value = rss_match_type_id.Value;
                    }
                    else
                    {
                        rss_match_type_idParameter.Size = -1;
                        rss_match_type_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(rss_match_type_idParameter);

                    DbParameter tpsu_division_idParameter = cmd.CreateParameter();
                    tpsu_division_idParameter.ParameterName = "tpsu_division_id";
                    tpsu_division_idParameter.Direction = ParameterDirection.Input;
                    tpsu_division_idParameter.DbType = DbType.Int32;
                    tpsu_division_idParameter.Precision = 10;
                    tpsu_division_idParameter.Scale = 0;
                    if (tpsu_division_id.HasValue)
                    {
                        tpsu_division_idParameter.Value = tpsu_division_id.Value;
                    }
                    else
                    {
                        tpsu_division_idParameter.Size = -1;
                        tpsu_division_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(tpsu_division_idParameter);

                    DbParameter subcontractor_info_list_idParameter = cmd.CreateParameter();
                    subcontractor_info_list_idParameter.ParameterName = "subcontractor_info_list_id";
                    subcontractor_info_list_idParameter.Direction = ParameterDirection.Input;
                    subcontractor_info_list_idParameter.DbType = DbType.String;
                    if (subcontractor_info_list_id != null)
                    {
                        subcontractor_info_list_idParameter.Value = subcontractor_info_list_id;
                    }
                    else
                    {
                        subcontractor_info_list_idParameter.Size = -1;
                        subcontractor_info_list_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subcontractor_info_list_idParameter);

                    DbParameter is_documentation_percentParameter = cmd.CreateParameter();
                    is_documentation_percentParameter.ParameterName = "is_documentation_percent";
                    is_documentation_percentParameter.Direction = ParameterDirection.Input;
                    is_documentation_percentParameter.DbType = DbType.String;
                    if (is_documentation_percent != null)
                    {
                        is_documentation_percentParameter.Value = is_documentation_percent;
                    }
                    else
                    {
                        is_documentation_percentParameter.Size = -1;
                        is_documentation_percentParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_documentation_percentParameter);

                    DbParameter is_documentationParameter = cmd.CreateParameter();
                    is_documentationParameter.ParameterName = "is_documentation";
                    is_documentationParameter.Direction = ParameterDirection.Input;
                    is_documentationParameter.DbType = DbType.String;
                    if (is_documentation != null)
                    {
                        is_documentationParameter.Value = is_documentation;
                    }
                    else
                    {
                        is_documentationParameter.Size = -1;
                        is_documentationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_documentationParameter);

                    DbParameter is_change_documentation_percentParameter = cmd.CreateParameter();
                    is_change_documentation_percentParameter.ParameterName = "is_change_documentation_percent";
                    is_change_documentation_percentParameter.Direction = ParameterDirection.Input;
                    is_change_documentation_percentParameter.DbType = DbType.String;
                    if (is_change_documentation_percent != null)
                    {
                        is_change_documentation_percentParameter.Value = is_change_documentation_percent;
                    }
                    else
                    {
                        is_change_documentation_percentParameter.Size = -1;
                        is_change_documentation_percentParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_change_documentation_percentParameter);

                    DbParameter is_change_documentationParameter = cmd.CreateParameter();
                    is_change_documentationParameter.ParameterName = "is_change_documentation";
                    is_change_documentationParameter.Direction = ParameterDirection.Input;
                    is_change_documentationParameter.DbType = DbType.String;
                    if (is_change_documentation != null)
                    {
                        is_change_documentationParameter.Value = is_change_documentation;
                    }
                    else
                    {
                        is_change_documentationParameter.Size = -1;
                        is_change_documentationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_change_documentationParameter);

                    DbParameter total_sum_gkParameter = cmd.CreateParameter();
                    total_sum_gkParameter.ParameterName = "total_sum_gk";
                    total_sum_gkParameter.Direction = ParameterDirection.Input;
                    total_sum_gkParameter.DbType = DbType.Double;
                    total_sum_gkParameter.Precision = 53;
                    if (total_sum_gk.HasValue)
                    {
                        total_sum_gkParameter.Value = total_sum_gk.Value;
                    }
                    else
                    {
                        total_sum_gkParameter.Size = -1;
                        total_sum_gkParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(total_sum_gkParameter);

                    DbParameter total_sum_directParameter = cmd.CreateParameter();
                    total_sum_directParameter.ParameterName = "total_sum_direct";
                    total_sum_directParameter.Direction = ParameterDirection.Input;
                    total_sum_directParameter.DbType = DbType.Double;
                    total_sum_directParameter.Precision = 53;
                    if (total_sum_direct.HasValue)
                    {
                        total_sum_directParameter.Value = total_sum_direct.Value;
                    }
                    else
                    {
                        total_sum_directParameter.Size = -1;
                        total_sum_directParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(total_sum_directParameter);

                    DbParameter advance_infoParameter = cmd.CreateParameter();
                    advance_infoParameter.ParameterName = "advance_info";
                    advance_infoParameter.Direction = ParameterDirection.Input;
                    advance_infoParameter.DbType = DbType.Double;
                    advance_infoParameter.Precision = 53;
                    if (advance_info.HasValue)
                    {
                        advance_infoParameter.Value = advance_info.Value;
                    }
                    else
                    {
                        advance_infoParameter.Size = -1;
                        advance_infoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(advance_infoParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> APL_UPDATE_PROJECT2Async (System.Nullable<int> id, string project_description, string project_short_description, System.Nullable<int> project_type_id, System.Nullable<int> project_state_id, System.Nullable<int> customer_id, System.Nullable<int> designer_id, System.Nullable<int> normative_delivery_time, System.Nullable<double> start, System.Nullable<double> finish, System.Nullable<int> year1, System.Nullable<int> year2, System.Nullable<System.DateTime> finish_date, System.Nullable<int> build_curator_id, string build_curator_list_id, System.Nullable<int> package_curator_id, System.Nullable<int> supply_curator_id, string supply_curator_list_id, string deliveryplan_curator_list_id, System.Nullable<int> project_curator_id, System.Nullable<int> stocks_curator_id, string storage_contract, System.Nullable<System.DateTime> storage_contract_finish_date, System.Nullable<bool> non_project_supplier_approve_required, System.Nullable<int> rss_match_type_id, System.Nullable<int> tpsu_division_id, string subcontractor_info_list_id, string is_documentation_percent, string is_documentation, string is_change_documentation_percent, string is_change_documentation, System.Nullable<double> total_sum_gk, System.Nullable<double> total_sum_direct, System.Nullable<double> advance_info, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_PROJECT2";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter project_descriptionParameter = cmd.CreateParameter();
                    project_descriptionParameter.ParameterName = "project_description";
                    project_descriptionParameter.Direction = ParameterDirection.Input;
                    project_descriptionParameter.DbType = DbType.String;
                    if (project_description != null)
                    {
                        project_descriptionParameter.Value = project_description;
                    }
                    else
                    {
                        project_descriptionParameter.Size = -1;
                        project_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_descriptionParameter);

                    DbParameter project_short_descriptionParameter = cmd.CreateParameter();
                    project_short_descriptionParameter.ParameterName = "project_short_description";
                    project_short_descriptionParameter.Direction = ParameterDirection.Input;
                    project_short_descriptionParameter.DbType = DbType.String;
                    project_short_descriptionParameter.Size = 510;
                    if (project_short_description != null)
                    {
                        project_short_descriptionParameter.Value = project_short_description;
                    }
                    else
                    {
                        project_short_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_short_descriptionParameter);

                    DbParameter project_type_idParameter = cmd.CreateParameter();
                    project_type_idParameter.ParameterName = "project_type_id";
                    project_type_idParameter.Direction = ParameterDirection.Input;
                    project_type_idParameter.DbType = DbType.Int32;
                    project_type_idParameter.Precision = 10;
                    project_type_idParameter.Scale = 0;
                    if (project_type_id.HasValue)
                    {
                        project_type_idParameter.Value = project_type_id.Value;
                    }
                    else
                    {
                        project_type_idParameter.Size = -1;
                        project_type_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_type_idParameter);

                    DbParameter project_state_idParameter = cmd.CreateParameter();
                    project_state_idParameter.ParameterName = "project_state_id";
                    project_state_idParameter.Direction = ParameterDirection.Input;
                    project_state_idParameter.DbType = DbType.Int32;
                    project_state_idParameter.Precision = 10;
                    project_state_idParameter.Scale = 0;
                    if (project_state_id.HasValue)
                    {
                        project_state_idParameter.Value = project_state_id.Value;
                    }
                    else
                    {
                        project_state_idParameter.Size = -1;
                        project_state_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_state_idParameter);

                    DbParameter customer_idParameter = cmd.CreateParameter();
                    customer_idParameter.ParameterName = "customer_id";
                    customer_idParameter.Direction = ParameterDirection.Input;
                    customer_idParameter.DbType = DbType.Int32;
                    customer_idParameter.Precision = 10;
                    customer_idParameter.Scale = 0;
                    if (customer_id.HasValue)
                    {
                        customer_idParameter.Value = customer_id.Value;
                    }
                    else
                    {
                        customer_idParameter.Size = -1;
                        customer_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(customer_idParameter);

                    DbParameter designer_idParameter = cmd.CreateParameter();
                    designer_idParameter.ParameterName = "designer_id";
                    designer_idParameter.Direction = ParameterDirection.Input;
                    designer_idParameter.DbType = DbType.Int32;
                    designer_idParameter.Precision = 10;
                    designer_idParameter.Scale = 0;
                    if (designer_id.HasValue)
                    {
                        designer_idParameter.Value = designer_id.Value;
                    }
                    else
                    {
                        designer_idParameter.Size = -1;
                        designer_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(designer_idParameter);

                    DbParameter normative_delivery_timeParameter = cmd.CreateParameter();
                    normative_delivery_timeParameter.ParameterName = "normative_delivery_time";
                    normative_delivery_timeParameter.Direction = ParameterDirection.Input;
                    normative_delivery_timeParameter.DbType = DbType.Int32;
                    normative_delivery_timeParameter.Precision = 10;
                    normative_delivery_timeParameter.Scale = 0;
                    if (normative_delivery_time.HasValue)
                    {
                        normative_delivery_timeParameter.Value = normative_delivery_time.Value;
                    }
                    else
                    {
                        normative_delivery_timeParameter.Size = -1;
                        normative_delivery_timeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(normative_delivery_timeParameter);

                    DbParameter startParameter = cmd.CreateParameter();
                    startParameter.ParameterName = "start";
                    startParameter.Direction = ParameterDirection.Input;
                    startParameter.DbType = DbType.Double;
                    startParameter.Precision = 53;
                    if (start.HasValue)
                    {
                        startParameter.Value = start.Value;
                    }
                    else
                    {
                        startParameter.Size = -1;
                        startParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startParameter);

                    DbParameter finishParameter = cmd.CreateParameter();
                    finishParameter.ParameterName = "finish";
                    finishParameter.Direction = ParameterDirection.Input;
                    finishParameter.DbType = DbType.Double;
                    finishParameter.Precision = 53;
                    if (finish.HasValue)
                    {
                        finishParameter.Value = finish.Value;
                    }
                    else
                    {
                        finishParameter.Size = -1;
                        finishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finishParameter);

                    DbParameter year1Parameter = cmd.CreateParameter();
                    year1Parameter.ParameterName = "year1";
                    year1Parameter.Direction = ParameterDirection.Input;
                    year1Parameter.DbType = DbType.Int32;
                    year1Parameter.Precision = 10;
                    year1Parameter.Scale = 0;
                    if (year1.HasValue)
                    {
                        year1Parameter.Value = year1.Value;
                    }
                    else
                    {
                        year1Parameter.Size = -1;
                        year1Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(year1Parameter);

                    DbParameter year2Parameter = cmd.CreateParameter();
                    year2Parameter.ParameterName = "year2";
                    year2Parameter.Direction = ParameterDirection.Input;
                    year2Parameter.DbType = DbType.Int32;
                    year2Parameter.Precision = 10;
                    year2Parameter.Scale = 0;
                    if (year2.HasValue)
                    {
                        year2Parameter.Value = year2.Value;
                    }
                    else
                    {
                        year2Parameter.Size = -1;
                        year2Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(year2Parameter);

                    DbParameter finish_dateParameter = cmd.CreateParameter();
                    finish_dateParameter.ParameterName = "finish_date";
                    finish_dateParameter.Direction = ParameterDirection.Input;
                    finish_dateParameter.DbType = DbType.DateTime;
                    if (finish_date.HasValue)
                    {
                        finish_dateParameter.Value = finish_date.Value;
                    }
                    else
                    {
                        finish_dateParameter.Size = -1;
                        finish_dateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finish_dateParameter);

                    DbParameter build_curator_idParameter = cmd.CreateParameter();
                    build_curator_idParameter.ParameterName = "build_curator_id";
                    build_curator_idParameter.Direction = ParameterDirection.Input;
                    build_curator_idParameter.DbType = DbType.Int32;
                    build_curator_idParameter.Precision = 10;
                    build_curator_idParameter.Scale = 0;
                    if (build_curator_id.HasValue)
                    {
                        build_curator_idParameter.Value = build_curator_id.Value;
                    }
                    else
                    {
                        build_curator_idParameter.Size = -1;
                        build_curator_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(build_curator_idParameter);

                    DbParameter build_curator_list_idParameter = cmd.CreateParameter();
                    build_curator_list_idParameter.ParameterName = "build_curator_list_id";
                    build_curator_list_idParameter.Direction = ParameterDirection.Input;
                    build_curator_list_idParameter.DbType = DbType.String;
                    if (build_curator_list_id != null)
                    {
                        build_curator_list_idParameter.Value = build_curator_list_id;
                    }
                    else
                    {
                        build_curator_list_idParameter.Size = -1;
                        build_curator_list_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(build_curator_list_idParameter);

                    DbParameter package_curator_idParameter = cmd.CreateParameter();
                    package_curator_idParameter.ParameterName = "package_curator_id";
                    package_curator_idParameter.Direction = ParameterDirection.Input;
                    package_curator_idParameter.DbType = DbType.Int32;
                    package_curator_idParameter.Precision = 10;
                    package_curator_idParameter.Scale = 0;
                    if (package_curator_id.HasValue)
                    {
                        package_curator_idParameter.Value = package_curator_id.Value;
                    }
                    else
                    {
                        package_curator_idParameter.Size = -1;
                        package_curator_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(package_curator_idParameter);

                    DbParameter supply_curator_idParameter = cmd.CreateParameter();
                    supply_curator_idParameter.ParameterName = "supply_curator_id";
                    supply_curator_idParameter.Direction = ParameterDirection.Input;
                    supply_curator_idParameter.DbType = DbType.Int32;
                    supply_curator_idParameter.Precision = 10;
                    supply_curator_idParameter.Scale = 0;
                    if (supply_curator_id.HasValue)
                    {
                        supply_curator_idParameter.Value = supply_curator_id.Value;
                    }
                    else
                    {
                        supply_curator_idParameter.Size = -1;
                        supply_curator_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(supply_curator_idParameter);

                    DbParameter supply_curator_list_idParameter = cmd.CreateParameter();
                    supply_curator_list_idParameter.ParameterName = "supply_curator_list_id";
                    supply_curator_list_idParameter.Direction = ParameterDirection.Input;
                    supply_curator_list_idParameter.DbType = DbType.String;
                    if (supply_curator_list_id != null)
                    {
                        supply_curator_list_idParameter.Value = supply_curator_list_id;
                    }
                    else
                    {
                        supply_curator_list_idParameter.Size = -1;
                        supply_curator_list_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(supply_curator_list_idParameter);

                    DbParameter deliveryplan_curator_list_idParameter = cmd.CreateParameter();
                    deliveryplan_curator_list_idParameter.ParameterName = "deliveryplan_curator_list_id";
                    deliveryplan_curator_list_idParameter.Direction = ParameterDirection.Input;
                    deliveryplan_curator_list_idParameter.DbType = DbType.String;
                    if (deliveryplan_curator_list_id != null)
                    {
                        deliveryplan_curator_list_idParameter.Value = deliveryplan_curator_list_id;
                    }
                    else
                    {
                        deliveryplan_curator_list_idParameter.Size = -1;
                        deliveryplan_curator_list_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(deliveryplan_curator_list_idParameter);

                    DbParameter project_curator_idParameter = cmd.CreateParameter();
                    project_curator_idParameter.ParameterName = "project_curator_id";
                    project_curator_idParameter.Direction = ParameterDirection.Input;
                    project_curator_idParameter.DbType = DbType.Int32;
                    project_curator_idParameter.Precision = 10;
                    project_curator_idParameter.Scale = 0;
                    if (project_curator_id.HasValue)
                    {
                        project_curator_idParameter.Value = project_curator_id.Value;
                    }
                    else
                    {
                        project_curator_idParameter.Size = -1;
                        project_curator_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_curator_idParameter);

                    DbParameter stocks_curator_idParameter = cmd.CreateParameter();
                    stocks_curator_idParameter.ParameterName = "stocks_curator_id";
                    stocks_curator_idParameter.Direction = ParameterDirection.Input;
                    stocks_curator_idParameter.DbType = DbType.Int32;
                    stocks_curator_idParameter.Precision = 10;
                    stocks_curator_idParameter.Scale = 0;
                    if (stocks_curator_id.HasValue)
                    {
                        stocks_curator_idParameter.Value = stocks_curator_id.Value;
                    }
                    else
                    {
                        stocks_curator_idParameter.Size = -1;
                        stocks_curator_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stocks_curator_idParameter);

                    DbParameter storage_contractParameter = cmd.CreateParameter();
                    storage_contractParameter.ParameterName = "storage_contract";
                    storage_contractParameter.Direction = ParameterDirection.Input;
                    storage_contractParameter.DbType = DbType.String;
                    if (storage_contract != null)
                    {
                        storage_contractParameter.Value = storage_contract;
                    }
                    else
                    {
                        storage_contractParameter.Size = -1;
                        storage_contractParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(storage_contractParameter);

                    DbParameter storage_contract_finish_dateParameter = cmd.CreateParameter();
                    storage_contract_finish_dateParameter.ParameterName = "storage_contract_finish_date";
                    storage_contract_finish_dateParameter.Direction = ParameterDirection.Input;
                    storage_contract_finish_dateParameter.DbType = DbType.DateTime;
                    if (storage_contract_finish_date.HasValue)
                    {
                        storage_contract_finish_dateParameter.Value = storage_contract_finish_date.Value;
                    }
                    else
                    {
                        storage_contract_finish_dateParameter.Size = -1;
                        storage_contract_finish_dateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(storage_contract_finish_dateParameter);

                    DbParameter non_project_supplier_approve_requiredParameter = cmd.CreateParameter();
                    non_project_supplier_approve_requiredParameter.ParameterName = "non_project_supplier_approve_required";
                    non_project_supplier_approve_requiredParameter.Direction = ParameterDirection.Input;
                    non_project_supplier_approve_requiredParameter.DbType = DbType.Boolean;
                    if (non_project_supplier_approve_required.HasValue)
                    {
                        non_project_supplier_approve_requiredParameter.Value = non_project_supplier_approve_required.Value;
                    }
                    else
                    {
                        non_project_supplier_approve_requiredParameter.Size = -1;
                        non_project_supplier_approve_requiredParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(non_project_supplier_approve_requiredParameter);

                    DbParameter rss_match_type_idParameter = cmd.CreateParameter();
                    rss_match_type_idParameter.ParameterName = "rss_match_type_id";
                    rss_match_type_idParameter.Direction = ParameterDirection.Input;
                    rss_match_type_idParameter.DbType = DbType.Int32;
                    rss_match_type_idParameter.Precision = 10;
                    rss_match_type_idParameter.Scale = 0;
                    if (rss_match_type_id.HasValue)
                    {
                        rss_match_type_idParameter.Value = rss_match_type_id.Value;
                    }
                    else
                    {
                        rss_match_type_idParameter.Size = -1;
                        rss_match_type_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(rss_match_type_idParameter);

                    DbParameter tpsu_division_idParameter = cmd.CreateParameter();
                    tpsu_division_idParameter.ParameterName = "tpsu_division_id";
                    tpsu_division_idParameter.Direction = ParameterDirection.Input;
                    tpsu_division_idParameter.DbType = DbType.Int32;
                    tpsu_division_idParameter.Precision = 10;
                    tpsu_division_idParameter.Scale = 0;
                    if (tpsu_division_id.HasValue)
                    {
                        tpsu_division_idParameter.Value = tpsu_division_id.Value;
                    }
                    else
                    {
                        tpsu_division_idParameter.Size = -1;
                        tpsu_division_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(tpsu_division_idParameter);

                    DbParameter subcontractor_info_list_idParameter = cmd.CreateParameter();
                    subcontractor_info_list_idParameter.ParameterName = "subcontractor_info_list_id";
                    subcontractor_info_list_idParameter.Direction = ParameterDirection.Input;
                    subcontractor_info_list_idParameter.DbType = DbType.String;
                    if (subcontractor_info_list_id != null)
                    {
                        subcontractor_info_list_idParameter.Value = subcontractor_info_list_id;
                    }
                    else
                    {
                        subcontractor_info_list_idParameter.Size = -1;
                        subcontractor_info_list_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subcontractor_info_list_idParameter);

                    DbParameter is_documentation_percentParameter = cmd.CreateParameter();
                    is_documentation_percentParameter.ParameterName = "is_documentation_percent";
                    is_documentation_percentParameter.Direction = ParameterDirection.Input;
                    is_documentation_percentParameter.DbType = DbType.String;
                    if (is_documentation_percent != null)
                    {
                        is_documentation_percentParameter.Value = is_documentation_percent;
                    }
                    else
                    {
                        is_documentation_percentParameter.Size = -1;
                        is_documentation_percentParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_documentation_percentParameter);

                    DbParameter is_documentationParameter = cmd.CreateParameter();
                    is_documentationParameter.ParameterName = "is_documentation";
                    is_documentationParameter.Direction = ParameterDirection.Input;
                    is_documentationParameter.DbType = DbType.String;
                    if (is_documentation != null)
                    {
                        is_documentationParameter.Value = is_documentation;
                    }
                    else
                    {
                        is_documentationParameter.Size = -1;
                        is_documentationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_documentationParameter);

                    DbParameter is_change_documentation_percentParameter = cmd.CreateParameter();
                    is_change_documentation_percentParameter.ParameterName = "is_change_documentation_percent";
                    is_change_documentation_percentParameter.Direction = ParameterDirection.Input;
                    is_change_documentation_percentParameter.DbType = DbType.String;
                    if (is_change_documentation_percent != null)
                    {
                        is_change_documentation_percentParameter.Value = is_change_documentation_percent;
                    }
                    else
                    {
                        is_change_documentation_percentParameter.Size = -1;
                        is_change_documentation_percentParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_change_documentation_percentParameter);

                    DbParameter is_change_documentationParameter = cmd.CreateParameter();
                    is_change_documentationParameter.ParameterName = "is_change_documentation";
                    is_change_documentationParameter.Direction = ParameterDirection.Input;
                    is_change_documentationParameter.DbType = DbType.String;
                    if (is_change_documentation != null)
                    {
                        is_change_documentationParameter.Value = is_change_documentation;
                    }
                    else
                    {
                        is_change_documentationParameter.Size = -1;
                        is_change_documentationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_change_documentationParameter);

                    DbParameter total_sum_gkParameter = cmd.CreateParameter();
                    total_sum_gkParameter.ParameterName = "total_sum_gk";
                    total_sum_gkParameter.Direction = ParameterDirection.Input;
                    total_sum_gkParameter.DbType = DbType.Double;
                    total_sum_gkParameter.Precision = 53;
                    if (total_sum_gk.HasValue)
                    {
                        total_sum_gkParameter.Value = total_sum_gk.Value;
                    }
                    else
                    {
                        total_sum_gkParameter.Size = -1;
                        total_sum_gkParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(total_sum_gkParameter);

                    DbParameter total_sum_directParameter = cmd.CreateParameter();
                    total_sum_directParameter.ParameterName = "total_sum_direct";
                    total_sum_directParameter.Direction = ParameterDirection.Input;
                    total_sum_directParameter.DbType = DbType.Double;
                    total_sum_directParameter.Precision = 53;
                    if (total_sum_direct.HasValue)
                    {
                        total_sum_directParameter.Value = total_sum_direct.Value;
                    }
                    else
                    {
                        total_sum_directParameter.Size = -1;
                        total_sum_directParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(total_sum_directParameter);

                    DbParameter advance_infoParameter = cmd.CreateParameter();
                    advance_infoParameter.ParameterName = "advance_info";
                    advance_infoParameter.Direction = ParameterDirection.Input;
                    advance_infoParameter.DbType = DbType.Double;
                    advance_infoParameter.Precision = 53;
                    if (advance_info.HasValue)
                    {
                        advance_infoParameter.Value = advance_info.Value;
                    }
                    else
                    {
                        advance_infoParameter.Size = -1;
                        advance_infoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(advance_infoParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_SELECT_LINKResult> UI_SELECT_LINK (string action, string controller, string param)
        {

            List<UI_SELECT_LINKResult> result = new List<UI_SELECT_LINKResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK";

                    DbParameter actionParameter = cmd.CreateParameter();
                    actionParameter.ParameterName = "action";
                    actionParameter.Direction = ParameterDirection.Input;
                    actionParameter.DbType = DbType.String;
                    if (action != null)
                    {
                        actionParameter.Value = action;
                    }
                    else
                    {
                        actionParameter.Size = -1;
                        actionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(actionParameter);

                    DbParameter controllerParameter = cmd.CreateParameter();
                    controllerParameter.ParameterName = "controller";
                    controllerParameter.Direction = ParameterDirection.Input;
                    controllerParameter.DbType = DbType.String;
                    if (controller != null)
                    {
                        controllerParameter.Value = controller;
                    }
                    else
                    {
                        controllerParameter.Size = -1;
                        controllerParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(controllerParameter);

                    DbParameter paramParameter = cmd.CreateParameter();
                    paramParameter.ParameterName = "param";
                    paramParameter.Direction = ParameterDirection.Input;
                    paramParameter.DbType = DbType.String;
                    if (param != null)
                    {
                        paramParameter.Value = param;
                    }
                    else
                    {
                        paramParameter.Size = -1;
                        paramParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(paramParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINKResult row = new UI_SELECT_LINKResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("legend") && !reader.IsDBNull(reader.GetOrdinal("legend")))
                                row.legend = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legend")), typeof(string));
                            else
                                row.legend = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_SELECT_LINKResult>> UI_SELECT_LINKAsync (string action, string controller, string param)
        {

            List<UI_SELECT_LINKResult> result = new List<UI_SELECT_LINKResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_LINK";

                    DbParameter actionParameter = cmd.CreateParameter();
                    actionParameter.ParameterName = "action";
                    actionParameter.Direction = ParameterDirection.Input;
                    actionParameter.DbType = DbType.String;
                    if (action != null)
                    {
                        actionParameter.Value = action;
                    }
                    else
                    {
                        actionParameter.Size = -1;
                        actionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(actionParameter);

                    DbParameter controllerParameter = cmd.CreateParameter();
                    controllerParameter.ParameterName = "controller";
                    controllerParameter.Direction = ParameterDirection.Input;
                    controllerParameter.DbType = DbType.String;
                    if (controller != null)
                    {
                        controllerParameter.Value = controller;
                    }
                    else
                    {
                        controllerParameter.Size = -1;
                        controllerParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(controllerParameter);

                    DbParameter paramParameter = cmd.CreateParameter();
                    paramParameter.ParameterName = "param";
                    paramParameter.Direction = ParameterDirection.Input;
                    paramParameter.DbType = DbType.String;
                    if (param != null)
                    {
                        paramParameter.Value = param;
                    }
                    else
                    {
                        paramParameter.Size = -1;
                        paramParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(paramParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_LINKResult row = new UI_SELECT_LINKResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("legend") && !reader.IsDBNull(reader.GetOrdinal("legend")))
                                row.legend = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legend")), typeof(string));
                            else
                                row.legend = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_SELECT_DROPDOWN_TXTResult> UI_SELECT_DROPDOWN_TXT (string dropdown, string param, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_SELECT_DROPDOWN_TXTResult> result = new List<UI_SELECT_DROPDOWN_TXTResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_DROPDOWN_TXT";

                    DbParameter dropdownParameter = cmd.CreateParameter();
                    dropdownParameter.ParameterName = "dropdown";
                    dropdownParameter.Direction = ParameterDirection.Input;
                    dropdownParameter.DbType = DbType.String;
                    if (dropdown != null)
                    {
                        dropdownParameter.Value = dropdown;
                    }
                    else
                    {
                        dropdownParameter.Size = -1;
                        dropdownParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(dropdownParameter);

                    DbParameter paramParameter = cmd.CreateParameter();
                    paramParameter.ParameterName = "param";
                    paramParameter.Direction = ParameterDirection.Input;
                    paramParameter.DbType = DbType.String;
                    if (param != null)
                    {
                        paramParameter.Value = param;
                    }
                    else
                    {
                        paramParameter.Size = -1;
                        paramParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(paramParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_DROPDOWN_TXTResult row = new UI_SELECT_DROPDOWN_TXTResult();
                            if (fieldNames.Contains("guid") && !reader.IsDBNull(reader.GetOrdinal("guid")))
                                row.guid = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"guid")), typeof(string));
                            else
                                row.guid = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_SELECT_DROPDOWN_TXTResult>> UI_SELECT_DROPDOWN_TXTAsync (string dropdown, string param, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_SELECT_DROPDOWN_TXTResult> result = new List<UI_SELECT_DROPDOWN_TXTResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_DROPDOWN_TXT";

                    DbParameter dropdownParameter = cmd.CreateParameter();
                    dropdownParameter.ParameterName = "dropdown";
                    dropdownParameter.Direction = ParameterDirection.Input;
                    dropdownParameter.DbType = DbType.String;
                    if (dropdown != null)
                    {
                        dropdownParameter.Value = dropdown;
                    }
                    else
                    {
                        dropdownParameter.Size = -1;
                        dropdownParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(dropdownParameter);

                    DbParameter paramParameter = cmd.CreateParameter();
                    paramParameter.ParameterName = "param";
                    paramParameter.Direction = ParameterDirection.Input;
                    paramParameter.DbType = DbType.String;
                    if (param != null)
                    {
                        paramParameter.Value = param;
                    }
                    else
                    {
                        paramParameter.Size = -1;
                        paramParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(paramParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_DROPDOWN_TXTResult row = new UI_SELECT_DROPDOWN_TXTResult();
                            if (fieldNames.Contains("guid") && !reader.IsDBNull(reader.GetOrdinal("guid")))
                                row.guid = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"guid")), typeof(string));
                            else
                                row.guid = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> APL_UPDATE_OBJECT2 (System.Nullable<int> id, System.Nullable<int> project_id, string description, System.Nullable<double> start, System.Nullable<double> finish, string project_1c_guid, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_OBJECT2";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter startParameter = cmd.CreateParameter();
                    startParameter.ParameterName = "start";
                    startParameter.Direction = ParameterDirection.Input;
                    startParameter.DbType = DbType.Double;
                    startParameter.Precision = 53;
                    if (start.HasValue)
                    {
                        startParameter.Value = start.Value;
                    }
                    else
                    {
                        startParameter.Size = -1;
                        startParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startParameter);

                    DbParameter finishParameter = cmd.CreateParameter();
                    finishParameter.ParameterName = "finish";
                    finishParameter.Direction = ParameterDirection.Input;
                    finishParameter.DbType = DbType.Double;
                    finishParameter.Precision = 53;
                    if (finish.HasValue)
                    {
                        finishParameter.Value = finish.Value;
                    }
                    else
                    {
                        finishParameter.Size = -1;
                        finishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finishParameter);

                    DbParameter project_1c_guidParameter = cmd.CreateParameter();
                    project_1c_guidParameter.ParameterName = "project_1c_guid";
                    project_1c_guidParameter.Direction = ParameterDirection.Input;
                    project_1c_guidParameter.DbType = DbType.String;
                    if (project_1c_guid != null)
                    {
                        project_1c_guidParameter.Value = project_1c_guid;
                    }
                    else
                    {
                        project_1c_guidParameter.Size = -1;
                        project_1c_guidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_1c_guidParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> APL_UPDATE_OBJECT2Async (System.Nullable<int> id, System.Nullable<int> project_id, string description, System.Nullable<double> start, System.Nullable<double> finish, string project_1c_guid, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_OBJECT2";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter startParameter = cmd.CreateParameter();
                    startParameter.ParameterName = "start";
                    startParameter.Direction = ParameterDirection.Input;
                    startParameter.DbType = DbType.Double;
                    startParameter.Precision = 53;
                    if (start.HasValue)
                    {
                        startParameter.Value = start.Value;
                    }
                    else
                    {
                        startParameter.Size = -1;
                        startParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startParameter);

                    DbParameter finishParameter = cmd.CreateParameter();
                    finishParameter.ParameterName = "finish";
                    finishParameter.Direction = ParameterDirection.Input;
                    finishParameter.DbType = DbType.Double;
                    finishParameter.Precision = 53;
                    if (finish.HasValue)
                    {
                        finishParameter.Value = finish.Value;
                    }
                    else
                    {
                        finishParameter.Size = -1;
                        finishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finishParameter);

                    DbParameter project_1c_guidParameter = cmd.CreateParameter();
                    project_1c_guidParameter.ParameterName = "project_1c_guid";
                    project_1c_guidParameter.Direction = ParameterDirection.Input;
                    project_1c_guidParameter.DbType = DbType.String;
                    if (project_1c_guid != null)
                    {
                        project_1c_guidParameter.Value = project_1c_guid;
                    }
                    else
                    {
                        project_1c_guidParameter.Size = -1;
                        project_1c_guidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_1c_guidParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> APL_UPDATE_SUBOBJECT2 (System.Nullable<int> id, System.Nullable<int> object_id, string description, System.Nullable<double> start, System.Nullable<double> finish, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_SUBOBJECT2";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter object_idParameter = cmd.CreateParameter();
                    object_idParameter.ParameterName = "object_id";
                    object_idParameter.Direction = ParameterDirection.Input;
                    object_idParameter.DbType = DbType.Int32;
                    object_idParameter.Precision = 10;
                    object_idParameter.Scale = 0;
                    if (object_id.HasValue)
                    {
                        object_idParameter.Value = object_id.Value;
                    }
                    else
                    {
                        object_idParameter.Size = -1;
                        object_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(object_idParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter startParameter = cmd.CreateParameter();
                    startParameter.ParameterName = "start";
                    startParameter.Direction = ParameterDirection.Input;
                    startParameter.DbType = DbType.Double;
                    startParameter.Precision = 53;
                    if (start.HasValue)
                    {
                        startParameter.Value = start.Value;
                    }
                    else
                    {
                        startParameter.Size = -1;
                        startParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startParameter);

                    DbParameter finishParameter = cmd.CreateParameter();
                    finishParameter.ParameterName = "finish";
                    finishParameter.Direction = ParameterDirection.Input;
                    finishParameter.DbType = DbType.Double;
                    finishParameter.Precision = 53;
                    if (finish.HasValue)
                    {
                        finishParameter.Value = finish.Value;
                    }
                    else
                    {
                        finishParameter.Size = -1;
                        finishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finishParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> APL_UPDATE_SUBOBJECT2Async (System.Nullable<int> id, System.Nullable<int> object_id, string description, System.Nullable<double> start, System.Nullable<double> finish, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_SUBOBJECT2";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter object_idParameter = cmd.CreateParameter();
                    object_idParameter.ParameterName = "object_id";
                    object_idParameter.Direction = ParameterDirection.Input;
                    object_idParameter.DbType = DbType.Int32;
                    object_idParameter.Precision = 10;
                    object_idParameter.Scale = 0;
                    if (object_id.HasValue)
                    {
                        object_idParameter.Value = object_id.Value;
                    }
                    else
                    {
                        object_idParameter.Size = -1;
                        object_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(object_idParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter startParameter = cmd.CreateParameter();
                    startParameter.ParameterName = "start";
                    startParameter.Direction = ParameterDirection.Input;
                    startParameter.DbType = DbType.Double;
                    startParameter.Precision = 53;
                    if (start.HasValue)
                    {
                        startParameter.Value = start.Value;
                    }
                    else
                    {
                        startParameter.Size = -1;
                        startParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startParameter);

                    DbParameter finishParameter = cmd.CreateParameter();
                    finishParameter.ParameterName = "finish";
                    finishParameter.Direction = ParameterDirection.Input;
                    finishParameter.DbType = DbType.Double;
                    finishParameter.Precision = 53;
                    if (finish.HasValue)
                    {
                        finishParameter.Value = finish.Value;
                    }
                    else
                    {
                        finishParameter.Size = -1;
                        finishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finishParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> OMC_UPDATE_FORM_ITEM_PARAMS (string rss_items_id_list, string svr_items_id_list, string decline_comment, System.Nullable<bool> for_pricing, System.Nullable<int> price_manager_id, string add_info, System.Nullable<int> delivery_type_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_UPDATE_FORM_ITEM_PARAMS";

                    DbParameter rss_items_id_listParameter = cmd.CreateParameter();
                    rss_items_id_listParameter.ParameterName = "rss_items_id_list";
                    rss_items_id_listParameter.Direction = ParameterDirection.Input;
                    rss_items_id_listParameter.DbType = DbType.String;
                    if (rss_items_id_list != null)
                    {
                        rss_items_id_listParameter.Value = rss_items_id_list;
                    }
                    else
                    {
                        rss_items_id_listParameter.Size = -1;
                        rss_items_id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(rss_items_id_listParameter);

                    DbParameter svr_items_id_listParameter = cmd.CreateParameter();
                    svr_items_id_listParameter.ParameterName = "svr_items_id_list";
                    svr_items_id_listParameter.Direction = ParameterDirection.Input;
                    svr_items_id_listParameter.DbType = DbType.String;
                    if (svr_items_id_list != null)
                    {
                        svr_items_id_listParameter.Value = svr_items_id_list;
                    }
                    else
                    {
                        svr_items_id_listParameter.Size = -1;
                        svr_items_id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(svr_items_id_listParameter);

                    DbParameter decline_commentParameter = cmd.CreateParameter();
                    decline_commentParameter.ParameterName = "decline_comment";
                    decline_commentParameter.Direction = ParameterDirection.Input;
                    decline_commentParameter.DbType = DbType.String;
                    if (decline_comment != null)
                    {
                        decline_commentParameter.Value = decline_comment;
                    }
                    else
                    {
                        decline_commentParameter.Size = -1;
                        decline_commentParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(decline_commentParameter);

                    DbParameter for_pricingParameter = cmd.CreateParameter();
                    for_pricingParameter.ParameterName = "for_pricing";
                    for_pricingParameter.Direction = ParameterDirection.Input;
                    for_pricingParameter.DbType = DbType.Boolean;
                    if (for_pricing.HasValue)
                    {
                        for_pricingParameter.Value = for_pricing.Value;
                    }
                    else
                    {
                        for_pricingParameter.Size = -1;
                        for_pricingParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(for_pricingParameter);

                    DbParameter price_manager_idParameter = cmd.CreateParameter();
                    price_manager_idParameter.ParameterName = "price_manager_id";
                    price_manager_idParameter.Direction = ParameterDirection.Input;
                    price_manager_idParameter.DbType = DbType.Int32;
                    price_manager_idParameter.Precision = 10;
                    price_manager_idParameter.Scale = 0;
                    if (price_manager_id.HasValue)
                    {
                        price_manager_idParameter.Value = price_manager_id.Value;
                    }
                    else
                    {
                        price_manager_idParameter.Size = -1;
                        price_manager_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(price_manager_idParameter);

                    DbParameter add_infoParameter = cmd.CreateParameter();
                    add_infoParameter.ParameterName = "add_info";
                    add_infoParameter.Direction = ParameterDirection.Input;
                    add_infoParameter.DbType = DbType.String;
                    if (add_info != null)
                    {
                        add_infoParameter.Value = add_info;
                    }
                    else
                    {
                        add_infoParameter.Size = -1;
                        add_infoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(add_infoParameter);

                    DbParameter delivery_type_idParameter = cmd.CreateParameter();
                    delivery_type_idParameter.ParameterName = "delivery_type_id";
                    delivery_type_idParameter.Direction = ParameterDirection.Input;
                    delivery_type_idParameter.DbType = DbType.Int32;
                    delivery_type_idParameter.Precision = 10;
                    delivery_type_idParameter.Scale = 0;
                    if (delivery_type_id.HasValue)
                    {
                        delivery_type_idParameter.Value = delivery_type_id.Value;
                    }
                    else
                    {
                        delivery_type_idParameter.Size = -1;
                        delivery_type_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> OMC_UPDATE_FORM_ITEM_PARAMSAsync (string rss_items_id_list, string svr_items_id_list, string decline_comment, System.Nullable<bool> for_pricing, System.Nullable<int> price_manager_id, string add_info, System.Nullable<int> delivery_type_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_UPDATE_FORM_ITEM_PARAMS";

                    DbParameter rss_items_id_listParameter = cmd.CreateParameter();
                    rss_items_id_listParameter.ParameterName = "rss_items_id_list";
                    rss_items_id_listParameter.Direction = ParameterDirection.Input;
                    rss_items_id_listParameter.DbType = DbType.String;
                    if (rss_items_id_list != null)
                    {
                        rss_items_id_listParameter.Value = rss_items_id_list;
                    }
                    else
                    {
                        rss_items_id_listParameter.Size = -1;
                        rss_items_id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(rss_items_id_listParameter);

                    DbParameter svr_items_id_listParameter = cmd.CreateParameter();
                    svr_items_id_listParameter.ParameterName = "svr_items_id_list";
                    svr_items_id_listParameter.Direction = ParameterDirection.Input;
                    svr_items_id_listParameter.DbType = DbType.String;
                    if (svr_items_id_list != null)
                    {
                        svr_items_id_listParameter.Value = svr_items_id_list;
                    }
                    else
                    {
                        svr_items_id_listParameter.Size = -1;
                        svr_items_id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(svr_items_id_listParameter);

                    DbParameter decline_commentParameter = cmd.CreateParameter();
                    decline_commentParameter.ParameterName = "decline_comment";
                    decline_commentParameter.Direction = ParameterDirection.Input;
                    decline_commentParameter.DbType = DbType.String;
                    if (decline_comment != null)
                    {
                        decline_commentParameter.Value = decline_comment;
                    }
                    else
                    {
                        decline_commentParameter.Size = -1;
                        decline_commentParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(decline_commentParameter);

                    DbParameter for_pricingParameter = cmd.CreateParameter();
                    for_pricingParameter.ParameterName = "for_pricing";
                    for_pricingParameter.Direction = ParameterDirection.Input;
                    for_pricingParameter.DbType = DbType.Boolean;
                    if (for_pricing.HasValue)
                    {
                        for_pricingParameter.Value = for_pricing.Value;
                    }
                    else
                    {
                        for_pricingParameter.Size = -1;
                        for_pricingParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(for_pricingParameter);

                    DbParameter price_manager_idParameter = cmd.CreateParameter();
                    price_manager_idParameter.ParameterName = "price_manager_id";
                    price_manager_idParameter.Direction = ParameterDirection.Input;
                    price_manager_idParameter.DbType = DbType.Int32;
                    price_manager_idParameter.Precision = 10;
                    price_manager_idParameter.Scale = 0;
                    if (price_manager_id.HasValue)
                    {
                        price_manager_idParameter.Value = price_manager_id.Value;
                    }
                    else
                    {
                        price_manager_idParameter.Size = -1;
                        price_manager_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(price_manager_idParameter);

                    DbParameter add_infoParameter = cmd.CreateParameter();
                    add_infoParameter.ParameterName = "add_info";
                    add_infoParameter.Direction = ParameterDirection.Input;
                    add_infoParameter.DbType = DbType.String;
                    if (add_info != null)
                    {
                        add_infoParameter.Value = add_info;
                    }
                    else
                    {
                        add_infoParameter.Size = -1;
                        add_infoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(add_infoParameter);

                    DbParameter delivery_type_idParameter = cmd.CreateParameter();
                    delivery_type_idParameter.ParameterName = "delivery_type_id";
                    delivery_type_idParameter.Direction = ParameterDirection.Input;
                    delivery_type_idParameter.DbType = DbType.Int32;
                    delivery_type_idParameter.Precision = 10;
                    delivery_type_idParameter.Scale = 0;
                    if (delivery_type_id.HasValue)
                    {
                        delivery_type_idParameter.Value = delivery_type_id.Value;
                    }
                    else
                    {
                        delivery_type_idParameter.Size = -1;
                        delivery_type_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<SYS_SELECT_OBJECT_LOGResult> SYS_SELECT_OBJECT_LOG (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, string object_type, System.Nullable<int> object_id)
        {

            List<SYS_SELECT_OBJECT_LOGResult> result = new List<SYS_SELECT_OBJECT_LOGResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_OBJECT_LOG";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter object_typeParameter = cmd.CreateParameter();
                    object_typeParameter.ParameterName = "object_type";
                    object_typeParameter.Direction = ParameterDirection.Input;
                    object_typeParameter.DbType = DbType.String;
                    object_typeParameter.Size = 510;
                    if (object_type != null)
                    {
                        object_typeParameter.Value = object_type;
                    }
                    else
                    {
                        object_typeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(object_typeParameter);

                    DbParameter object_idParameter = cmd.CreateParameter();
                    object_idParameter.ParameterName = "object_id";
                    object_idParameter.Direction = ParameterDirection.Input;
                    object_idParameter.DbType = DbType.Int32;
                    object_idParameter.Precision = 10;
                    object_idParameter.Scale = 0;
                    if (object_id.HasValue)
                    {
                        object_idParameter.Value = object_id.Value;
                    }
                    else
                    {
                        object_idParameter.Size = -1;
                        object_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(object_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_OBJECT_LOGResult row = new SYS_SELECT_OBJECT_LOGResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("object_type") && !reader.IsDBNull(reader.GetOrdinal("object_type")))
                                row.object_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_type")), typeof(string));
                            else
                                row.object_type = null;

                            if (fieldNames.Contains("object_id") && !reader.IsDBNull(reader.GetOrdinal("object_id")))
                                row.object_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_id")), typeof(int));
                            else
                                row.object_id = null;

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("action_type") && !reader.IsDBNull(reader.GetOrdinal("action_type")))
                                row.action_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_type")), typeof(string));
                            else
                                row.action_type = null;

                            if (fieldNames.Contains("action_description") && !reader.IsDBNull(reader.GetOrdinal("action_description")))
                                row.action_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_description")), typeof(string));
                            else
                                row.action_description = null;

                            if (fieldNames.Contains("action_date") && !reader.IsDBNull(reader.GetOrdinal("action_date")))
                                row.action_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("action_user_id") && !reader.IsDBNull(reader.GetOrdinal("action_user_id")))
                                row.action_user_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_user_id")), typeof(int));

                            if (fieldNames.Contains("action_user") && !reader.IsDBNull(reader.GetOrdinal("action_user")))
                                row.action_user = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_user")), typeof(string));
                            else
                                row.action_user = null;

                            if (fieldNames.Contains("action_real_user_id") && !reader.IsDBNull(reader.GetOrdinal("action_real_user_id")))
                                row.action_real_user_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_real_user_id")), typeof(int));
                            else
                                row.action_real_user_id = null;

                            if (fieldNames.Contains("action_real_user") && !reader.IsDBNull(reader.GetOrdinal("action_real_user")))
                                row.action_real_user = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_real_user")), typeof(string));
                            else
                                row.action_real_user = null;

                            if (fieldNames.Contains("attribute") && !reader.IsDBNull(reader.GetOrdinal("attribute")))
                                row.attribute = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"attribute")), typeof(string));
                            else
                                row.attribute = null;

                            if (fieldNames.Contains("last_value") && !reader.IsDBNull(reader.GetOrdinal("last_value")))
                                row.last_value = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_value")), typeof(string));
                            else
                                row.last_value = null;

                            if (fieldNames.Contains("new_value") && !reader.IsDBNull(reader.GetOrdinal("new_value")))
                                row.new_value = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_value")), typeof(string));
                            else
                                row.new_value = null;

                            if (fieldNames.Contains("add_attr_last_value") && !reader.IsDBNull(reader.GetOrdinal("add_attr_last_value")))
                                row.add_attr_last_value = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"add_attr_last_value")), typeof(string));
                            else
                                row.add_attr_last_value = null;

                            if (fieldNames.Contains("add_attr_new_value") && !reader.IsDBNull(reader.GetOrdinal("add_attr_new_value")))
                                row.add_attr_new_value = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"add_attr_new_value")), typeof(string));
                            else
                                row.add_attr_new_value = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SYS_SELECT_OBJECT_LOGResult>> SYS_SELECT_OBJECT_LOGAsync (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, string object_type, System.Nullable<int> object_id)
        {

            List<SYS_SELECT_OBJECT_LOGResult> result = new List<SYS_SELECT_OBJECT_LOGResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_OBJECT_LOG";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter object_typeParameter = cmd.CreateParameter();
                    object_typeParameter.ParameterName = "object_type";
                    object_typeParameter.Direction = ParameterDirection.Input;
                    object_typeParameter.DbType = DbType.String;
                    object_typeParameter.Size = 510;
                    if (object_type != null)
                    {
                        object_typeParameter.Value = object_type;
                    }
                    else
                    {
                        object_typeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(object_typeParameter);

                    DbParameter object_idParameter = cmd.CreateParameter();
                    object_idParameter.ParameterName = "object_id";
                    object_idParameter.Direction = ParameterDirection.Input;
                    object_idParameter.DbType = DbType.Int32;
                    object_idParameter.Precision = 10;
                    object_idParameter.Scale = 0;
                    if (object_id.HasValue)
                    {
                        object_idParameter.Value = object_id.Value;
                    }
                    else
                    {
                        object_idParameter.Size = -1;
                        object_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(object_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_OBJECT_LOGResult row = new SYS_SELECT_OBJECT_LOGResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("object_type") && !reader.IsDBNull(reader.GetOrdinal("object_type")))
                                row.object_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_type")), typeof(string));
                            else
                                row.object_type = null;

                            if (fieldNames.Contains("object_id") && !reader.IsDBNull(reader.GetOrdinal("object_id")))
                                row.object_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_id")), typeof(int));
                            else
                                row.object_id = null;

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("action_type") && !reader.IsDBNull(reader.GetOrdinal("action_type")))
                                row.action_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_type")), typeof(string));
                            else
                                row.action_type = null;

                            if (fieldNames.Contains("action_description") && !reader.IsDBNull(reader.GetOrdinal("action_description")))
                                row.action_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_description")), typeof(string));
                            else
                                row.action_description = null;

                            if (fieldNames.Contains("action_date") && !reader.IsDBNull(reader.GetOrdinal("action_date")))
                                row.action_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("action_user_id") && !reader.IsDBNull(reader.GetOrdinal("action_user_id")))
                                row.action_user_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_user_id")), typeof(int));

                            if (fieldNames.Contains("action_user") && !reader.IsDBNull(reader.GetOrdinal("action_user")))
                                row.action_user = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_user")), typeof(string));
                            else
                                row.action_user = null;

                            if (fieldNames.Contains("action_real_user_id") && !reader.IsDBNull(reader.GetOrdinal("action_real_user_id")))
                                row.action_real_user_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_real_user_id")), typeof(int));
                            else
                                row.action_real_user_id = null;

                            if (fieldNames.Contains("action_real_user") && !reader.IsDBNull(reader.GetOrdinal("action_real_user")))
                                row.action_real_user = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_real_user")), typeof(string));
                            else
                                row.action_real_user = null;

                            if (fieldNames.Contains("attribute") && !reader.IsDBNull(reader.GetOrdinal("attribute")))
                                row.attribute = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"attribute")), typeof(string));
                            else
                                row.attribute = null;

                            if (fieldNames.Contains("last_value") && !reader.IsDBNull(reader.GetOrdinal("last_value")))
                                row.last_value = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_value")), typeof(string));
                            else
                                row.last_value = null;

                            if (fieldNames.Contains("new_value") && !reader.IsDBNull(reader.GetOrdinal("new_value")))
                                row.new_value = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_value")), typeof(string));
                            else
                                row.new_value = null;

                            if (fieldNames.Contains("add_attr_last_value") && !reader.IsDBNull(reader.GetOrdinal("add_attr_last_value")))
                                row.add_attr_last_value = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"add_attr_last_value")), typeof(string));
                            else
                                row.add_attr_last_value = null;

                            if (fieldNames.Contains("add_attr_new_value") && !reader.IsDBNull(reader.GetOrdinal("add_attr_new_value")))
                                row.add_attr_new_value = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"add_attr_new_value")), typeof(string));
                            else
                                row.add_attr_new_value = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSResult> APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTS (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> id)
        {

            List<APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSResult> result = new List<APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSResult row = new APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("lno_id") && !reader.IsDBNull(reader.GetOrdinal("lno_id")))
                                row.lno_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_id")), typeof(int));

                            if (fieldNames.Contains("lno_description") && !reader.IsDBNull(reader.GetOrdinal("lno_description")))
                                row.lno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_description")), typeof(string));
                            else
                                row.lno_description = null;

                            if (fieldNames.Contains("start") && !reader.IsDBNull(reader.GetOrdinal("start")))
                                row.start = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start")), typeof(double));

                            if (fieldNames.Contains("finish") && !reader.IsDBNull(reader.GetOrdinal("finish")))
                                row.finish = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish")), typeof(double));
                            else
                                row.finish = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSResult>> APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSAsync (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> id)
        {

            List<APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSResult> result = new List<APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSResult row = new APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("lno_id") && !reader.IsDBNull(reader.GetOrdinal("lno_id")))
                                row.lno_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_id")), typeof(int));

                            if (fieldNames.Contains("lno_description") && !reader.IsDBNull(reader.GetOrdinal("lno_description")))
                                row.lno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_description")), typeof(string));
                            else
                                row.lno_description = null;

                            if (fieldNames.Contains("start") && !reader.IsDBNull(reader.GetOrdinal("start")))
                                row.start = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start")), typeof(double));

                            if (fieldNames.Contains("finish") && !reader.IsDBNull(reader.GetOrdinal("finish")))
                                row.finish = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish")), typeof(double));
                            else
                                row.finish = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> APL_UPDATE_PROJECT_LOGISTICAL_NETWORK_OBJECT2 (System.Nullable<int> id, System.Nullable<int> project_id, System.Nullable<int> lno_id, System.Nullable<double> start, System.Nullable<double> finish, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_PROJECT_LOGISTICAL_NETWORK_OBJECT2";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);

                    DbParameter lno_idParameter = cmd.CreateParameter();
                    lno_idParameter.ParameterName = "lno_id";
                    lno_idParameter.Direction = ParameterDirection.Input;
                    lno_idParameter.DbType = DbType.Int32;
                    lno_idParameter.Precision = 10;
                    lno_idParameter.Scale = 0;
                    if (lno_id.HasValue)
                    {
                        lno_idParameter.Value = lno_id.Value;
                    }
                    else
                    {
                        lno_idParameter.Size = -1;
                        lno_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(lno_idParameter);

                    DbParameter startParameter = cmd.CreateParameter();
                    startParameter.ParameterName = "start";
                    startParameter.Direction = ParameterDirection.Input;
                    startParameter.DbType = DbType.Double;
                    startParameter.Precision = 53;
                    if (start.HasValue)
                    {
                        startParameter.Value = start.Value;
                    }
                    else
                    {
                        startParameter.Size = -1;
                        startParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startParameter);

                    DbParameter finishParameter = cmd.CreateParameter();
                    finishParameter.ParameterName = "finish";
                    finishParameter.Direction = ParameterDirection.Input;
                    finishParameter.DbType = DbType.Double;
                    finishParameter.Precision = 53;
                    if (finish.HasValue)
                    {
                        finishParameter.Value = finish.Value;
                    }
                    else
                    {
                        finishParameter.Size = -1;
                        finishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finishParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> APL_UPDATE_PROJECT_LOGISTICAL_NETWORK_OBJECT2Async (System.Nullable<int> id, System.Nullable<int> project_id, System.Nullable<int> lno_id, System.Nullable<double> start, System.Nullable<double> finish, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_PROJECT_LOGISTICAL_NETWORK_OBJECT2";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);

                    DbParameter lno_idParameter = cmd.CreateParameter();
                    lno_idParameter.ParameterName = "lno_id";
                    lno_idParameter.Direction = ParameterDirection.Input;
                    lno_idParameter.DbType = DbType.Int32;
                    lno_idParameter.Precision = 10;
                    lno_idParameter.Scale = 0;
                    if (lno_id.HasValue)
                    {
                        lno_idParameter.Value = lno_id.Value;
                    }
                    else
                    {
                        lno_idParameter.Size = -1;
                        lno_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(lno_idParameter);

                    DbParameter startParameter = cmd.CreateParameter();
                    startParameter.ParameterName = "start";
                    startParameter.Direction = ParameterDirection.Input;
                    startParameter.DbType = DbType.Double;
                    startParameter.Precision = 53;
                    if (start.HasValue)
                    {
                        startParameter.Value = start.Value;
                    }
                    else
                    {
                        startParameter.Size = -1;
                        startParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startParameter);

                    DbParameter finishParameter = cmd.CreateParameter();
                    finishParameter.ParameterName = "finish";
                    finishParameter.Direction = ParameterDirection.Input;
                    finishParameter.DbType = DbType.Double;
                    finishParameter.Precision = 53;
                    if (finish.HasValue)
                    {
                        finishParameter.Value = finish.Value;
                    }
                    else
                    {
                        finishParameter.Size = -1;
                        finishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finishParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECTS_LOGISTICAL_NETWORK_OBJECTSResult> APL_SELECT_PROJECTS_LOGISTICAL_NETWORK_OBJECTS (System.Nullable<int> project_id, System.Nullable<int> page, System.Nullable<int> page_size, string sort_member, string sort_direction, System.Nullable<int> user_id)
        {

            List<APL_SELECT_PROJECTS_LOGISTICAL_NETWORK_OBJECTSResult> result = new List<APL_SELECT_PROJECTS_LOGISTICAL_NETWORK_OBJECTSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECTS_LOGISTICAL_NETWORK_OBJECTS";

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);

                    DbParameter pageParameter = cmd.CreateParameter();
                    pageParameter.ParameterName = "page";
                    pageParameter.Direction = ParameterDirection.Input;
                    pageParameter.DbType = DbType.Int32;
                    pageParameter.Precision = 10;
                    pageParameter.Scale = 0;
                    if (page.HasValue)
                    {
                        pageParameter.Value = page.Value;
                    }
                    else
                    {
                        pageParameter.Size = -1;
                        pageParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(pageParameter);

                    DbParameter page_sizeParameter = cmd.CreateParameter();
                    page_sizeParameter.ParameterName = "page_size";
                    page_sizeParameter.Direction = ParameterDirection.Input;
                    page_sizeParameter.DbType = DbType.Int32;
                    page_sizeParameter.Precision = 10;
                    page_sizeParameter.Scale = 0;
                    if (page_size.HasValue)
                    {
                        page_sizeParameter.Value = page_size.Value;
                    }
                    else
                    {
                        page_sizeParameter.Size = -1;
                        page_sizeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(page_sizeParameter);

                    DbParameter sort_memberParameter = cmd.CreateParameter();
                    sort_memberParameter.ParameterName = "sort_member";
                    sort_memberParameter.Direction = ParameterDirection.Input;
                    sort_memberParameter.DbType = DbType.String;
                    if (sort_member != null)
                    {
                        sort_memberParameter.Value = sort_member;
                    }
                    else
                    {
                        sort_memberParameter.Size = -1;
                        sort_memberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(sort_memberParameter);

                    DbParameter sort_directionParameter = cmd.CreateParameter();
                    sort_directionParameter.ParameterName = "sort_direction";
                    sort_directionParameter.Direction = ParameterDirection.Input;
                    sort_directionParameter.DbType = DbType.String;
                    if (sort_direction != null)
                    {
                        sort_directionParameter.Value = sort_direction;
                    }
                    else
                    {
                        sort_directionParameter.Size = -1;
                        sort_directionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(sort_directionParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECTS_LOGISTICAL_NETWORK_OBJECTSResult row = new APL_SELECT_PROJECTS_LOGISTICAL_NETWORK_OBJECTSResult();
                            if (fieldNames.Contains("row_count") && !reader.IsDBNull(reader.GetOrdinal("row_count")))
                                row.row_count = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"row_count")), typeof(int));
                            else
                                row.row_count = null;

                            if (fieldNames.Contains("rank") && !reader.IsDBNull(reader.GetOrdinal("rank")))
                                row.rank = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"rank")), typeof(long));
                            else
                                row.rank = null;

                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("logistical_network_object") && !reader.IsDBNull(reader.GetOrdinal("logistical_network_object")))
                                row.logistical_network_object = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"logistical_network_object")), typeof(string));
                            else
                                row.logistical_network_object = null;

                            if (fieldNames.Contains("project_logistical_network_object_start") && !reader.IsDBNull(reader.GetOrdinal("project_logistical_network_object_start")))
                                row.project_logistical_network_object_start = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_logistical_network_object_start")), typeof(double));
                            else
                                row.project_logistical_network_object_start = null;

                            if (fieldNames.Contains("project_logistical_network_object_finish") && !reader.IsDBNull(reader.GetOrdinal("project_logistical_network_object_finish")))
                                row.project_logistical_network_object_finish = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_logistical_network_object_finish")), typeof(double));
                            else
                                row.project_logistical_network_object_finish = null;

                            if (fieldNames.Contains("receiver_description") && !reader.IsDBNull(reader.GetOrdinal("receiver_description")))
                                row.receiver_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"receiver_description")), typeof(string));

                            if (fieldNames.Contains("project_descrtiption") && !reader.IsDBNull(reader.GetOrdinal("project_descrtiption")))
                                row.project_descrtiption = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_descrtiption")), typeof(string));
                            else
                                row.project_descrtiption = null;

                            if (fieldNames.Contains("checked") && !reader.IsDBNull(reader.GetOrdinal("checked")))
                                row.@checked = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"checked")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECTS_LOGISTICAL_NETWORK_OBJECTSResult>> APL_SELECT_PROJECTS_LOGISTICAL_NETWORK_OBJECTSAsync (System.Nullable<int> project_id, System.Nullable<int> page, System.Nullable<int> page_size, string sort_member, string sort_direction, System.Nullable<int> user_id)
        {

            List<APL_SELECT_PROJECTS_LOGISTICAL_NETWORK_OBJECTSResult> result = new List<APL_SELECT_PROJECTS_LOGISTICAL_NETWORK_OBJECTSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECTS_LOGISTICAL_NETWORK_OBJECTS";

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);

                    DbParameter pageParameter = cmd.CreateParameter();
                    pageParameter.ParameterName = "page";
                    pageParameter.Direction = ParameterDirection.Input;
                    pageParameter.DbType = DbType.Int32;
                    pageParameter.Precision = 10;
                    pageParameter.Scale = 0;
                    if (page.HasValue)
                    {
                        pageParameter.Value = page.Value;
                    }
                    else
                    {
                        pageParameter.Size = -1;
                        pageParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(pageParameter);

                    DbParameter page_sizeParameter = cmd.CreateParameter();
                    page_sizeParameter.ParameterName = "page_size";
                    page_sizeParameter.Direction = ParameterDirection.Input;
                    page_sizeParameter.DbType = DbType.Int32;
                    page_sizeParameter.Precision = 10;
                    page_sizeParameter.Scale = 0;
                    if (page_size.HasValue)
                    {
                        page_sizeParameter.Value = page_size.Value;
                    }
                    else
                    {
                        page_sizeParameter.Size = -1;
                        page_sizeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(page_sizeParameter);

                    DbParameter sort_memberParameter = cmd.CreateParameter();
                    sort_memberParameter.ParameterName = "sort_member";
                    sort_memberParameter.Direction = ParameterDirection.Input;
                    sort_memberParameter.DbType = DbType.String;
                    if (sort_member != null)
                    {
                        sort_memberParameter.Value = sort_member;
                    }
                    else
                    {
                        sort_memberParameter.Size = -1;
                        sort_memberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(sort_memberParameter);

                    DbParameter sort_directionParameter = cmd.CreateParameter();
                    sort_directionParameter.ParameterName = "sort_direction";
                    sort_directionParameter.Direction = ParameterDirection.Input;
                    sort_directionParameter.DbType = DbType.String;
                    if (sort_direction != null)
                    {
                        sort_directionParameter.Value = sort_direction;
                    }
                    else
                    {
                        sort_directionParameter.Size = -1;
                        sort_directionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(sort_directionParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECTS_LOGISTICAL_NETWORK_OBJECTSResult row = new APL_SELECT_PROJECTS_LOGISTICAL_NETWORK_OBJECTSResult();
                            if (fieldNames.Contains("row_count") && !reader.IsDBNull(reader.GetOrdinal("row_count")))
                                row.row_count = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"row_count")), typeof(int));
                            else
                                row.row_count = null;

                            if (fieldNames.Contains("rank") && !reader.IsDBNull(reader.GetOrdinal("rank")))
                                row.rank = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"rank")), typeof(long));
                            else
                                row.rank = null;

                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("logistical_network_object") && !reader.IsDBNull(reader.GetOrdinal("logistical_network_object")))
                                row.logistical_network_object = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"logistical_network_object")), typeof(string));
                            else
                                row.logistical_network_object = null;

                            if (fieldNames.Contains("project_logistical_network_object_start") && !reader.IsDBNull(reader.GetOrdinal("project_logistical_network_object_start")))
                                row.project_logistical_network_object_start = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_logistical_network_object_start")), typeof(double));
                            else
                                row.project_logistical_network_object_start = null;

                            if (fieldNames.Contains("project_logistical_network_object_finish") && !reader.IsDBNull(reader.GetOrdinal("project_logistical_network_object_finish")))
                                row.project_logistical_network_object_finish = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_logistical_network_object_finish")), typeof(double));
                            else
                                row.project_logistical_network_object_finish = null;

                            if (fieldNames.Contains("receiver_description") && !reader.IsDBNull(reader.GetOrdinal("receiver_description")))
                                row.receiver_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"receiver_description")), typeof(string));

                            if (fieldNames.Contains("project_descrtiption") && !reader.IsDBNull(reader.GetOrdinal("project_descrtiption")))
                                row.project_descrtiption = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_descrtiption")), typeof(string));
                            else
                                row.project_descrtiption = null;

                            if (fieldNames.Contains("checked") && !reader.IsDBNull(reader.GetOrdinal("checked")))
                                row.@checked = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"checked")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> APL_UPDATE_PROJECT_DOCUMENTATION2 (System.Nullable<int> id, System.Nullable<int> subobject_id, string project_documentation_code, System.Nullable<System.DateTime> project_documentation_date, System.Nullable<System.DateTime> date_receive, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_PROJECT_DOCUMENTATION2";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter subobject_idParameter = cmd.CreateParameter();
                    subobject_idParameter.ParameterName = "subobject_id";
                    subobject_idParameter.Direction = ParameterDirection.Input;
                    subobject_idParameter.DbType = DbType.Int32;
                    subobject_idParameter.Precision = 10;
                    subobject_idParameter.Scale = 0;
                    if (subobject_id.HasValue)
                    {
                        subobject_idParameter.Value = subobject_id.Value;
                    }
                    else
                    {
                        subobject_idParameter.Size = -1;
                        subobject_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subobject_idParameter);

                    DbParameter project_documentation_codeParameter = cmd.CreateParameter();
                    project_documentation_codeParameter.ParameterName = "project_documentation_code";
                    project_documentation_codeParameter.Direction = ParameterDirection.Input;
                    project_documentation_codeParameter.DbType = DbType.String;
                    if (project_documentation_code != null)
                    {
                        project_documentation_codeParameter.Value = project_documentation_code;
                    }
                    else
                    {
                        project_documentation_codeParameter.Size = -1;
                        project_documentation_codeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_documentation_codeParameter);

                    DbParameter project_documentation_dateParameter = cmd.CreateParameter();
                    project_documentation_dateParameter.ParameterName = "project_documentation_date";
                    project_documentation_dateParameter.Direction = ParameterDirection.Input;
                    project_documentation_dateParameter.DbType = DbType.DateTime;
                    if (project_documentation_date.HasValue)
                    {
                        project_documentation_dateParameter.Value = project_documentation_date.Value;
                    }
                    else
                    {
                        project_documentation_dateParameter.Size = -1;
                        project_documentation_dateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_documentation_dateParameter);

                    DbParameter date_receiveParameter = cmd.CreateParameter();
                    date_receiveParameter.ParameterName = "date_receive";
                    date_receiveParameter.Direction = ParameterDirection.Input;
                    date_receiveParameter.DbType = DbType.DateTime;
                    if (date_receive.HasValue)
                    {
                        date_receiveParameter.Value = date_receive.Value;
                    }
                    else
                    {
                        date_receiveParameter.Size = -1;
                        date_receiveParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(date_receiveParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> APL_UPDATE_PROJECT_DOCUMENTATION2Async (System.Nullable<int> id, System.Nullable<int> subobject_id, string project_documentation_code, System.Nullable<System.DateTime> project_documentation_date, System.Nullable<System.DateTime> date_receive, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_PROJECT_DOCUMENTATION2";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter subobject_idParameter = cmd.CreateParameter();
                    subobject_idParameter.ParameterName = "subobject_id";
                    subobject_idParameter.Direction = ParameterDirection.Input;
                    subobject_idParameter.DbType = DbType.Int32;
                    subobject_idParameter.Precision = 10;
                    subobject_idParameter.Scale = 0;
                    if (subobject_id.HasValue)
                    {
                        subobject_idParameter.Value = subobject_id.Value;
                    }
                    else
                    {
                        subobject_idParameter.Size = -1;
                        subobject_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subobject_idParameter);

                    DbParameter project_documentation_codeParameter = cmd.CreateParameter();
                    project_documentation_codeParameter.ParameterName = "project_documentation_code";
                    project_documentation_codeParameter.Direction = ParameterDirection.Input;
                    project_documentation_codeParameter.DbType = DbType.String;
                    if (project_documentation_code != null)
                    {
                        project_documentation_codeParameter.Value = project_documentation_code;
                    }
                    else
                    {
                        project_documentation_codeParameter.Size = -1;
                        project_documentation_codeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_documentation_codeParameter);

                    DbParameter project_documentation_dateParameter = cmd.CreateParameter();
                    project_documentation_dateParameter.ParameterName = "project_documentation_date";
                    project_documentation_dateParameter.Direction = ParameterDirection.Input;
                    project_documentation_dateParameter.DbType = DbType.DateTime;
                    if (project_documentation_date.HasValue)
                    {
                        project_documentation_dateParameter.Value = project_documentation_date.Value;
                    }
                    else
                    {
                        project_documentation_dateParameter.Size = -1;
                        project_documentation_dateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_documentation_dateParameter);

                    DbParameter date_receiveParameter = cmd.CreateParameter();
                    date_receiveParameter.ParameterName = "date_receive";
                    date_receiveParameter.Direction = ParameterDirection.Input;
                    date_receiveParameter.DbType = DbType.DateTime;
                    if (date_receive.HasValue)
                    {
                        date_receiveParameter.Value = date_receive.Value;
                    }
                    else
                    {
                        date_receiveParameter.Size = -1;
                        date_receiveParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(date_receiveParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> APL_UPDATE_PROJECT_STATIONING2 (System.Nullable<int> id, System.Nullable<int> subobject_id, System.Nullable<int> subcontractor_id, System.Nullable<double> start, System.Nullable<double> finish, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_PROJECT_STATIONING2";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter subobject_idParameter = cmd.CreateParameter();
                    subobject_idParameter.ParameterName = "subobject_id";
                    subobject_idParameter.Direction = ParameterDirection.Input;
                    subobject_idParameter.DbType = DbType.Int32;
                    subobject_idParameter.Precision = 10;
                    subobject_idParameter.Scale = 0;
                    if (subobject_id.HasValue)
                    {
                        subobject_idParameter.Value = subobject_id.Value;
                    }
                    else
                    {
                        subobject_idParameter.Size = -1;
                        subobject_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subobject_idParameter);

                    DbParameter subcontractor_idParameter = cmd.CreateParameter();
                    subcontractor_idParameter.ParameterName = "subcontractor_id";
                    subcontractor_idParameter.Direction = ParameterDirection.Input;
                    subcontractor_idParameter.DbType = DbType.Int32;
                    subcontractor_idParameter.Precision = 10;
                    subcontractor_idParameter.Scale = 0;
                    if (subcontractor_id.HasValue)
                    {
                        subcontractor_idParameter.Value = subcontractor_id.Value;
                    }
                    else
                    {
                        subcontractor_idParameter.Size = -1;
                        subcontractor_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subcontractor_idParameter);

                    DbParameter startParameter = cmd.CreateParameter();
                    startParameter.ParameterName = "start";
                    startParameter.Direction = ParameterDirection.Input;
                    startParameter.DbType = DbType.Double;
                    startParameter.Precision = 53;
                    if (start.HasValue)
                    {
                        startParameter.Value = start.Value;
                    }
                    else
                    {
                        startParameter.Size = -1;
                        startParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startParameter);

                    DbParameter finishParameter = cmd.CreateParameter();
                    finishParameter.ParameterName = "finish";
                    finishParameter.Direction = ParameterDirection.Input;
                    finishParameter.DbType = DbType.Double;
                    finishParameter.Precision = 53;
                    if (finish.HasValue)
                    {
                        finishParameter.Value = finish.Value;
                    }
                    else
                    {
                        finishParameter.Size = -1;
                        finishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finishParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> APL_UPDATE_PROJECT_STATIONING2Async (System.Nullable<int> id, System.Nullable<int> subobject_id, System.Nullable<int> subcontractor_id, System.Nullable<double> start, System.Nullable<double> finish, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_PROJECT_STATIONING2";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter subobject_idParameter = cmd.CreateParameter();
                    subobject_idParameter.ParameterName = "subobject_id";
                    subobject_idParameter.Direction = ParameterDirection.Input;
                    subobject_idParameter.DbType = DbType.Int32;
                    subobject_idParameter.Precision = 10;
                    subobject_idParameter.Scale = 0;
                    if (subobject_id.HasValue)
                    {
                        subobject_idParameter.Value = subobject_id.Value;
                    }
                    else
                    {
                        subobject_idParameter.Size = -1;
                        subobject_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subobject_idParameter);

                    DbParameter subcontractor_idParameter = cmd.CreateParameter();
                    subcontractor_idParameter.ParameterName = "subcontractor_id";
                    subcontractor_idParameter.Direction = ParameterDirection.Input;
                    subcontractor_idParameter.DbType = DbType.Int32;
                    subcontractor_idParameter.Precision = 10;
                    subcontractor_idParameter.Scale = 0;
                    if (subcontractor_id.HasValue)
                    {
                        subcontractor_idParameter.Value = subcontractor_id.Value;
                    }
                    else
                    {
                        subcontractor_idParameter.Size = -1;
                        subcontractor_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subcontractor_idParameter);

                    DbParameter startParameter = cmd.CreateParameter();
                    startParameter.ParameterName = "start";
                    startParameter.Direction = ParameterDirection.Input;
                    startParameter.DbType = DbType.Double;
                    startParameter.Precision = 53;
                    if (start.HasValue)
                    {
                        startParameter.Value = start.Value;
                    }
                    else
                    {
                        startParameter.Size = -1;
                        startParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startParameter);

                    DbParameter finishParameter = cmd.CreateParameter();
                    finishParameter.ParameterName = "finish";
                    finishParameter.Direction = ParameterDirection.Input;
                    finishParameter.DbType = DbType.Double;
                    finishParameter.Precision = 53;
                    if (finish.HasValue)
                    {
                        finishParameter.Value = finish.Value;
                    }
                    else
                    {
                        finishParameter.Size = -1;
                        finishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finishParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECTS_STATIONINGS2Result> APL_SELECT_PROJECTS_STATIONINGS2 (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> id)
        {

            List<APL_SELECT_PROJECTS_STATIONINGS2Result> result = new List<APL_SELECT_PROJECTS_STATIONINGS2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECTS_STATIONINGS2";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECTS_STATIONINGS2Result row = new APL_SELECT_PROJECTS_STATIONINGS2Result();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("start") && !reader.IsDBNull(reader.GetOrdinal("start")))
                                row.start = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start")), typeof(double));

                            if (fieldNames.Contains("finish") && !reader.IsDBNull(reader.GetOrdinal("finish")))
                                row.finish = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish")), typeof(double));
                            else
                                row.finish = null;

                            if (fieldNames.Contains("subcontractor_id") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_id")))
                                row.subcontractor_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_id")), typeof(int));
                            else
                                row.subcontractor_id = null;

                            if (fieldNames.Contains("subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_description")))
                                row.subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_description")), typeof(string));
                            else
                                row.subcontractor_description = null;

                            if (fieldNames.Contains("stations") && !reader.IsDBNull(reader.GetOrdinal("stations")))
                                row.stations = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stations")), typeof(string));
                            else
                                row.stations = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECTS_STATIONINGS2Result>> APL_SELECT_PROJECTS_STATIONINGS2Async (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> id)
        {

            List<APL_SELECT_PROJECTS_STATIONINGS2Result> result = new List<APL_SELECT_PROJECTS_STATIONINGS2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECTS_STATIONINGS2";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECTS_STATIONINGS2Result row = new APL_SELECT_PROJECTS_STATIONINGS2Result();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("start") && !reader.IsDBNull(reader.GetOrdinal("start")))
                                row.start = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start")), typeof(double));

                            if (fieldNames.Contains("finish") && !reader.IsDBNull(reader.GetOrdinal("finish")))
                                row.finish = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish")), typeof(double));
                            else
                                row.finish = null;

                            if (fieldNames.Contains("subcontractor_id") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_id")))
                                row.subcontractor_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_id")), typeof(int));
                            else
                                row.subcontractor_id = null;

                            if (fieldNames.Contains("subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_description")))
                                row.subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_description")), typeof(string));
                            else
                                row.subcontractor_description = null;

                            if (fieldNames.Contains("stations") && !reader.IsDBNull(reader.GetOrdinal("stations")))
                                row.stations = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stations")), typeof(string));
                            else
                                row.stations = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECT_DOCUMENTATIONSResult> APL_SELECT_PROJECT_DOCUMENTATIONS (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> subobject_id)
        {

            List<APL_SELECT_PROJECT_DOCUMENTATIONSResult> result = new List<APL_SELECT_PROJECT_DOCUMENTATIONSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_DOCUMENTATIONS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter subobject_idParameter = cmd.CreateParameter();
                    subobject_idParameter.ParameterName = "subobject_id";
                    subobject_idParameter.Direction = ParameterDirection.Input;
                    subobject_idParameter.DbType = DbType.Int32;
                    subobject_idParameter.Precision = 10;
                    subobject_idParameter.Scale = 0;
                    if (subobject_id.HasValue)
                    {
                        subobject_idParameter.Value = subobject_id.Value;
                    }
                    else
                    {
                        subobject_idParameter.Size = -1;
                        subobject_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subobject_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_DOCUMENTATIONSResult row = new APL_SELECT_PROJECT_DOCUMENTATIONSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));
                            else
                                row.id = null;

                            if (fieldNames.Contains("project_documentation_id") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_id")))
                                row.project_documentation_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_id")), typeof(int));

                            if (fieldNames.Contains("revision_id") && !reader.IsDBNull(reader.GetOrdinal("revision_id")))
                                row.revision_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_id")), typeof(int));

                            if (fieldNames.Contains("subobject_id") && !reader.IsDBNull(reader.GetOrdinal("subobject_id")))
                                row.subobject_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_id")), typeof(int));
                            else
                                row.subobject_id = null;

                            if (fieldNames.Contains("parent_id") && !reader.IsDBNull(reader.GetOrdinal("parent_id")))
                                row.parent_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"parent_id")), typeof(int));
                            else
                                row.parent_id = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("project_documentation_date") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_date")))
                                row.project_documentation_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_date")), typeof(System.DateTime));
                            else
                                row.project_documentation_date = null;

                            if (fieldNames.Contains("date_receive") && !reader.IsDBNull(reader.GetOrdinal("date_receive")))
                                row.date_receive = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"date_receive")), typeof(System.DateTime));
                            else
                                row.date_receive = null;

                            if (fieldNames.Contains("is_parent") && !reader.IsDBNull(reader.GetOrdinal("is_parent")))
                                row.is_parent = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_parent")), typeof(int));

                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("outline_level") && !reader.IsDBNull(reader.GetOrdinal("outline_level")))
                                row.outline_level = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"outline_level")), typeof(int));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_DOCUMENTATIONSResult>> APL_SELECT_PROJECT_DOCUMENTATIONSAsync (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> subobject_id)
        {

            List<APL_SELECT_PROJECT_DOCUMENTATIONSResult> result = new List<APL_SELECT_PROJECT_DOCUMENTATIONSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_DOCUMENTATIONS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter subobject_idParameter = cmd.CreateParameter();
                    subobject_idParameter.ParameterName = "subobject_id";
                    subobject_idParameter.Direction = ParameterDirection.Input;
                    subobject_idParameter.DbType = DbType.Int32;
                    subobject_idParameter.Precision = 10;
                    subobject_idParameter.Scale = 0;
                    if (subobject_id.HasValue)
                    {
                        subobject_idParameter.Value = subobject_id.Value;
                    }
                    else
                    {
                        subobject_idParameter.Size = -1;
                        subobject_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subobject_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_DOCUMENTATIONSResult row = new APL_SELECT_PROJECT_DOCUMENTATIONSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));
                            else
                                row.id = null;

                            if (fieldNames.Contains("project_documentation_id") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_id")))
                                row.project_documentation_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_id")), typeof(int));

                            if (fieldNames.Contains("revision_id") && !reader.IsDBNull(reader.GetOrdinal("revision_id")))
                                row.revision_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_id")), typeof(int));

                            if (fieldNames.Contains("subobject_id") && !reader.IsDBNull(reader.GetOrdinal("subobject_id")))
                                row.subobject_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_id")), typeof(int));
                            else
                                row.subobject_id = null;

                            if (fieldNames.Contains("parent_id") && !reader.IsDBNull(reader.GetOrdinal("parent_id")))
                                row.parent_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"parent_id")), typeof(int));
                            else
                                row.parent_id = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("project_documentation_date") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_date")))
                                row.project_documentation_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_date")), typeof(System.DateTime));
                            else
                                row.project_documentation_date = null;

                            if (fieldNames.Contains("date_receive") && !reader.IsDBNull(reader.GetOrdinal("date_receive")))
                                row.date_receive = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"date_receive")), typeof(System.DateTime));
                            else
                                row.date_receive = null;

                            if (fieldNames.Contains("is_parent") && !reader.IsDBNull(reader.GetOrdinal("is_parent")))
                                row.is_parent = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_parent")), typeof(int));

                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("outline_level") && !reader.IsDBNull(reader.GetOrdinal("outline_level")))
                                row.outline_level = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"outline_level")), typeof(int));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECT_REQUIREMENT_CHANGE_REQUESTS2Result> APL_SELECT_PROJECT_REQUIREMENT_CHANGE_REQUESTS2 (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<bool> only_active, System.Nullable<bool> is_not_for_approve)
        {

            List<APL_SELECT_PROJECT_REQUIREMENT_CHANGE_REQUESTS2Result> result = new List<APL_SELECT_PROJECT_REQUIREMENT_CHANGE_REQUESTS2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_REQUIREMENT_CHANGE_REQUESTS2";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter only_activeParameter = cmd.CreateParameter();
                    only_activeParameter.ParameterName = "only_active";
                    only_activeParameter.Direction = ParameterDirection.Input;
                    only_activeParameter.DbType = DbType.Boolean;
                    if (only_active.HasValue)
                    {
                        only_activeParameter.Value = only_active.Value;
                    }
                    else
                    {
                        only_activeParameter.Size = -1;
                        only_activeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(only_activeParameter);

                    DbParameter is_not_for_approveParameter = cmd.CreateParameter();
                    is_not_for_approveParameter.ParameterName = "is_not_for_approve";
                    is_not_for_approveParameter.Direction = ParameterDirection.Input;
                    is_not_for_approveParameter.DbType = DbType.Boolean;
                    if (is_not_for_approve.HasValue)
                    {
                        is_not_for_approveParameter.Value = is_not_for_approve.Value;
                    }
                    else
                    {
                        is_not_for_approveParameter.Size = -1;
                        is_not_for_approveParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_not_for_approveParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_REQUIREMENT_CHANGE_REQUESTS2Result row = new APL_SELECT_PROJECT_REQUIREMENT_CHANGE_REQUESTS2Result();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("project_documentation") && !reader.IsDBNull(reader.GetOrdinal("project_documentation")))
                                row.project_documentation = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation")), typeof(string));
                            else
                                row.project_documentation = null;

                            if (fieldNames.Contains("revision_number") && !reader.IsDBNull(reader.GetOrdinal("revision_number")))
                                row.revision_number = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_number")), typeof(int));
                            else
                                row.revision_number = null;

                            if (fieldNames.Contains("inventory_object_description") && !reader.IsDBNull(reader.GetOrdinal("inventory_object_description")))
                                row.inventory_object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"inventory_object_description")), typeof(string));
                            else
                                row.inventory_object_description = null;

                            if (fieldNames.Contains("inventory_object_package_contents") && !reader.IsDBNull(reader.GetOrdinal("inventory_object_package_contents")))
                                row.inventory_object_package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"inventory_object_package_contents")), typeof(string));
                            else
                                row.inventory_object_package_contents = null;

                            if (fieldNames.Contains("inventory_object_additional_properties") && !reader.IsDBNull(reader.GetOrdinal("inventory_object_additional_properties")))
                                row.inventory_object_additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"inventory_object_additional_properties")), typeof(string));
                            else
                                row.inventory_object_additional_properties = null;

                            if (fieldNames.Contains("inventory_object_manufacturer_description") && !reader.IsDBNull(reader.GetOrdinal("inventory_object_manufacturer_description")))
                                row.inventory_object_manufacturer_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"inventory_object_manufacturer_description")), typeof(string));
                            else
                                row.inventory_object_manufacturer_description = null;

                            if (fieldNames.Contains("unit") && !reader.IsDBNull(reader.GetOrdinal("unit")))
                                row.unit = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit")), typeof(string));
                            else
                                row.unit = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(string));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("state") && !reader.IsDBNull(reader.GetOrdinal("state")))
                                row.state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"state")), typeof(string));
                            else
                                row.state = null;

                            if (fieldNames.Contains("station") && !reader.IsDBNull(reader.GetOrdinal("station")))
                                row.station = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"station")), typeof(string));

                            if (fieldNames.Contains("request_date") && !reader.IsDBNull(reader.GetOrdinal("request_date")))
                                row.request_date = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"request_date")), typeof(string));
                            else
                                row.request_date = null;

                            if (fieldNames.Contains("request_user") && !reader.IsDBNull(reader.GetOrdinal("request_user")))
                                row.request_user = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"request_user")), typeof(string));
                            else
                                row.request_user = null;

                            if (fieldNames.Contains("approve_date") && !reader.IsDBNull(reader.GetOrdinal("approve_date")))
                                row.approve_date = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"approve_date")), typeof(string));
                            else
                                row.approve_date = null;

                            if (fieldNames.Contains("approve_user") && !reader.IsDBNull(reader.GetOrdinal("approve_user")))
                                row.approve_user = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"approve_user")), typeof(string));
                            else
                                row.approve_user = null;

                            if (fieldNames.Contains("approve_state") && !reader.IsDBNull(reader.GetOrdinal("approve_state")))
                                row.approve_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"approve_state")), typeof(string));

                            if (fieldNames.Contains("approve_note") && !reader.IsDBNull(reader.GetOrdinal("approve_note")))
                                row.approve_note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"approve_note")), typeof(string));
                            else
                                row.approve_note = null;

                            if (fieldNames.Contains("order_information") && !reader.IsDBNull(reader.GetOrdinal("order_information")))
                                row.order_information = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_information")), typeof(string));
                            else
                                row.order_information = null;

                            if (fieldNames.Contains("specification_information") && !reader.IsDBNull(reader.GetOrdinal("specification_information")))
                                row.specification_information = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"specification_information")), typeof(string));
                            else
                                row.specification_information = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("summary2") && !reader.IsDBNull(reader.GetOrdinal("summary2")))
                                row.summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary2")), typeof(string));
                            else
                                row.summary2 = null;

                            if (fieldNames.Contains("is_not_for_approve") && !reader.IsDBNull(reader.GetOrdinal("is_not_for_approve")))
                                row.is_not_for_approve = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_not_for_approve")), typeof(int));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_REQUIREMENT_CHANGE_REQUESTS2Result>> APL_SELECT_PROJECT_REQUIREMENT_CHANGE_REQUESTS2Async (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<bool> only_active, System.Nullable<bool> is_not_for_approve)
        {

            List<APL_SELECT_PROJECT_REQUIREMENT_CHANGE_REQUESTS2Result> result = new List<APL_SELECT_PROJECT_REQUIREMENT_CHANGE_REQUESTS2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_REQUIREMENT_CHANGE_REQUESTS2";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter only_activeParameter = cmd.CreateParameter();
                    only_activeParameter.ParameterName = "only_active";
                    only_activeParameter.Direction = ParameterDirection.Input;
                    only_activeParameter.DbType = DbType.Boolean;
                    if (only_active.HasValue)
                    {
                        only_activeParameter.Value = only_active.Value;
                    }
                    else
                    {
                        only_activeParameter.Size = -1;
                        only_activeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(only_activeParameter);

                    DbParameter is_not_for_approveParameter = cmd.CreateParameter();
                    is_not_for_approveParameter.ParameterName = "is_not_for_approve";
                    is_not_for_approveParameter.Direction = ParameterDirection.Input;
                    is_not_for_approveParameter.DbType = DbType.Boolean;
                    if (is_not_for_approve.HasValue)
                    {
                        is_not_for_approveParameter.Value = is_not_for_approve.Value;
                    }
                    else
                    {
                        is_not_for_approveParameter.Size = -1;
                        is_not_for_approveParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_not_for_approveParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_REQUIREMENT_CHANGE_REQUESTS2Result row = new APL_SELECT_PROJECT_REQUIREMENT_CHANGE_REQUESTS2Result();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("project_documentation") && !reader.IsDBNull(reader.GetOrdinal("project_documentation")))
                                row.project_documentation = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation")), typeof(string));
                            else
                                row.project_documentation = null;

                            if (fieldNames.Contains("revision_number") && !reader.IsDBNull(reader.GetOrdinal("revision_number")))
                                row.revision_number = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_number")), typeof(int));
                            else
                                row.revision_number = null;

                            if (fieldNames.Contains("inventory_object_description") && !reader.IsDBNull(reader.GetOrdinal("inventory_object_description")))
                                row.inventory_object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"inventory_object_description")), typeof(string));
                            else
                                row.inventory_object_description = null;

                            if (fieldNames.Contains("inventory_object_package_contents") && !reader.IsDBNull(reader.GetOrdinal("inventory_object_package_contents")))
                                row.inventory_object_package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"inventory_object_package_contents")), typeof(string));
                            else
                                row.inventory_object_package_contents = null;

                            if (fieldNames.Contains("inventory_object_additional_properties") && !reader.IsDBNull(reader.GetOrdinal("inventory_object_additional_properties")))
                                row.inventory_object_additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"inventory_object_additional_properties")), typeof(string));
                            else
                                row.inventory_object_additional_properties = null;

                            if (fieldNames.Contains("inventory_object_manufacturer_description") && !reader.IsDBNull(reader.GetOrdinal("inventory_object_manufacturer_description")))
                                row.inventory_object_manufacturer_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"inventory_object_manufacturer_description")), typeof(string));
                            else
                                row.inventory_object_manufacturer_description = null;

                            if (fieldNames.Contains("unit") && !reader.IsDBNull(reader.GetOrdinal("unit")))
                                row.unit = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit")), typeof(string));
                            else
                                row.unit = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(string));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("state") && !reader.IsDBNull(reader.GetOrdinal("state")))
                                row.state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"state")), typeof(string));
                            else
                                row.state = null;

                            if (fieldNames.Contains("station") && !reader.IsDBNull(reader.GetOrdinal("station")))
                                row.station = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"station")), typeof(string));

                            if (fieldNames.Contains("request_date") && !reader.IsDBNull(reader.GetOrdinal("request_date")))
                                row.request_date = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"request_date")), typeof(string));
                            else
                                row.request_date = null;

                            if (fieldNames.Contains("request_user") && !reader.IsDBNull(reader.GetOrdinal("request_user")))
                                row.request_user = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"request_user")), typeof(string));
                            else
                                row.request_user = null;

                            if (fieldNames.Contains("approve_date") && !reader.IsDBNull(reader.GetOrdinal("approve_date")))
                                row.approve_date = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"approve_date")), typeof(string));
                            else
                                row.approve_date = null;

                            if (fieldNames.Contains("approve_user") && !reader.IsDBNull(reader.GetOrdinal("approve_user")))
                                row.approve_user = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"approve_user")), typeof(string));
                            else
                                row.approve_user = null;

                            if (fieldNames.Contains("approve_state") && !reader.IsDBNull(reader.GetOrdinal("approve_state")))
                                row.approve_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"approve_state")), typeof(string));

                            if (fieldNames.Contains("approve_note") && !reader.IsDBNull(reader.GetOrdinal("approve_note")))
                                row.approve_note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"approve_note")), typeof(string));
                            else
                                row.approve_note = null;

                            if (fieldNames.Contains("order_information") && !reader.IsDBNull(reader.GetOrdinal("order_information")))
                                row.order_information = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_information")), typeof(string));
                            else
                                row.order_information = null;

                            if (fieldNames.Contains("specification_information") && !reader.IsDBNull(reader.GetOrdinal("specification_information")))
                                row.specification_information = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"specification_information")), typeof(string));
                            else
                                row.specification_information = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("summary2") && !reader.IsDBNull(reader.GetOrdinal("summary2")))
                                row.summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary2")), typeof(string));
                            else
                                row.summary2 = null;

                            if (fieldNames.Contains("is_not_for_approve") && !reader.IsDBNull(reader.GetOrdinal("is_not_for_approve")))
                                row.is_not_for_approve = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_not_for_approve")), typeof(int));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_OBJECT_SUBCONTRACTORSResult> APL_SELECT_OBJECT_SUBCONTRACTORS (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> id)
        {

            List<APL_SELECT_OBJECT_SUBCONTRACTORSResult> result = new List<APL_SELECT_OBJECT_SUBCONTRACTORSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_OBJECT_SUBCONTRACTORS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_OBJECT_SUBCONTRACTORSResult row = new APL_SELECT_OBJECT_SUBCONTRACTORSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("subcontractor_id") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_id")))
                                row.subcontractor_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_id")), typeof(int));

                            if (fieldNames.Contains("subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_description")))
                                row.subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_description")), typeof(string));
                            else
                                row.subcontractor_description = null;

                            if (fieldNames.Contains("start") && !reader.IsDBNull(reader.GetOrdinal("start")))
                                row.start = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start")), typeof(double));
                            else
                                row.start = null;

                            if (fieldNames.Contains("finish") && !reader.IsDBNull(reader.GetOrdinal("finish")))
                                row.finish = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish")), typeof(double));
                            else
                                row.finish = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_OBJECT_SUBCONTRACTORSResult>> APL_SELECT_OBJECT_SUBCONTRACTORSAsync (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> id)
        {

            List<APL_SELECT_OBJECT_SUBCONTRACTORSResult> result = new List<APL_SELECT_OBJECT_SUBCONTRACTORSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_OBJECT_SUBCONTRACTORS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_OBJECT_SUBCONTRACTORSResult row = new APL_SELECT_OBJECT_SUBCONTRACTORSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("subcontractor_id") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_id")))
                                row.subcontractor_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_id")), typeof(int));

                            if (fieldNames.Contains("subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_description")))
                                row.subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_description")), typeof(string));
                            else
                                row.subcontractor_description = null;

                            if (fieldNames.Contains("start") && !reader.IsDBNull(reader.GetOrdinal("start")))
                                row.start = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start")), typeof(double));
                            else
                                row.start = null;

                            if (fieldNames.Contains("finish") && !reader.IsDBNull(reader.GetOrdinal("finish")))
                                row.finish = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish")), typeof(double));
                            else
                                row.finish = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> APL_UPDATE_OBJECT_SUBCONTRACTOR (System.Nullable<int> id, System.Nullable<int> object_id, System.Nullable<int> subcontractor_id, System.Nullable<double> start, System.Nullable<double> finish, System.Nullable<bool> change_subcontractor_ps, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_OBJECT_SUBCONTRACTOR";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter object_idParameter = cmd.CreateParameter();
                    object_idParameter.ParameterName = "object_id";
                    object_idParameter.Direction = ParameterDirection.Input;
                    object_idParameter.DbType = DbType.Int32;
                    object_idParameter.Precision = 10;
                    object_idParameter.Scale = 0;
                    if (object_id.HasValue)
                    {
                        object_idParameter.Value = object_id.Value;
                    }
                    else
                    {
                        object_idParameter.Size = -1;
                        object_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(object_idParameter);

                    DbParameter subcontractor_idParameter = cmd.CreateParameter();
                    subcontractor_idParameter.ParameterName = "subcontractor_id";
                    subcontractor_idParameter.Direction = ParameterDirection.Input;
                    subcontractor_idParameter.DbType = DbType.Int32;
                    subcontractor_idParameter.Precision = 10;
                    subcontractor_idParameter.Scale = 0;
                    if (subcontractor_id.HasValue)
                    {
                        subcontractor_idParameter.Value = subcontractor_id.Value;
                    }
                    else
                    {
                        subcontractor_idParameter.Size = -1;
                        subcontractor_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subcontractor_idParameter);

                    DbParameter startParameter = cmd.CreateParameter();
                    startParameter.ParameterName = "start";
                    startParameter.Direction = ParameterDirection.Input;
                    startParameter.DbType = DbType.Double;
                    startParameter.Precision = 53;
                    if (start.HasValue)
                    {
                        startParameter.Value = start.Value;
                    }
                    else
                    {
                        startParameter.Size = -1;
                        startParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startParameter);

                    DbParameter finishParameter = cmd.CreateParameter();
                    finishParameter.ParameterName = "finish";
                    finishParameter.Direction = ParameterDirection.Input;
                    finishParameter.DbType = DbType.Double;
                    finishParameter.Precision = 53;
                    if (finish.HasValue)
                    {
                        finishParameter.Value = finish.Value;
                    }
                    else
                    {
                        finishParameter.Size = -1;
                        finishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finishParameter);

                    DbParameter change_subcontractor_psParameter = cmd.CreateParameter();
                    change_subcontractor_psParameter.ParameterName = "change_subcontractor_ps";
                    change_subcontractor_psParameter.Direction = ParameterDirection.Input;
                    change_subcontractor_psParameter.DbType = DbType.Boolean;
                    if (change_subcontractor_ps.HasValue)
                    {
                        change_subcontractor_psParameter.Value = change_subcontractor_ps.Value;
                    }
                    else
                    {
                        change_subcontractor_psParameter.Size = -1;
                        change_subcontractor_psParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(change_subcontractor_psParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> APL_UPDATE_OBJECT_SUBCONTRACTORAsync (System.Nullable<int> id, System.Nullable<int> object_id, System.Nullable<int> subcontractor_id, System.Nullable<double> start, System.Nullable<double> finish, System.Nullable<bool> change_subcontractor_ps, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_OBJECT_SUBCONTRACTOR";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter object_idParameter = cmd.CreateParameter();
                    object_idParameter.ParameterName = "object_id";
                    object_idParameter.Direction = ParameterDirection.Input;
                    object_idParameter.DbType = DbType.Int32;
                    object_idParameter.Precision = 10;
                    object_idParameter.Scale = 0;
                    if (object_id.HasValue)
                    {
                        object_idParameter.Value = object_id.Value;
                    }
                    else
                    {
                        object_idParameter.Size = -1;
                        object_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(object_idParameter);

                    DbParameter subcontractor_idParameter = cmd.CreateParameter();
                    subcontractor_idParameter.ParameterName = "subcontractor_id";
                    subcontractor_idParameter.Direction = ParameterDirection.Input;
                    subcontractor_idParameter.DbType = DbType.Int32;
                    subcontractor_idParameter.Precision = 10;
                    subcontractor_idParameter.Scale = 0;
                    if (subcontractor_id.HasValue)
                    {
                        subcontractor_idParameter.Value = subcontractor_id.Value;
                    }
                    else
                    {
                        subcontractor_idParameter.Size = -1;
                        subcontractor_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subcontractor_idParameter);

                    DbParameter startParameter = cmd.CreateParameter();
                    startParameter.ParameterName = "start";
                    startParameter.Direction = ParameterDirection.Input;
                    startParameter.DbType = DbType.Double;
                    startParameter.Precision = 53;
                    if (start.HasValue)
                    {
                        startParameter.Value = start.Value;
                    }
                    else
                    {
                        startParameter.Size = -1;
                        startParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startParameter);

                    DbParameter finishParameter = cmd.CreateParameter();
                    finishParameter.ParameterName = "finish";
                    finishParameter.Direction = ParameterDirection.Input;
                    finishParameter.DbType = DbType.Double;
                    finishParameter.Precision = 53;
                    if (finish.HasValue)
                    {
                        finishParameter.Value = finish.Value;
                    }
                    else
                    {
                        finishParameter.Size = -1;
                        finishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finishParameter);

                    DbParameter change_subcontractor_psParameter = cmd.CreateParameter();
                    change_subcontractor_psParameter.ParameterName = "change_subcontractor_ps";
                    change_subcontractor_psParameter.Direction = ParameterDirection.Input;
                    change_subcontractor_psParameter.DbType = DbType.Boolean;
                    if (change_subcontractor_ps.HasValue)
                    {
                        change_subcontractor_psParameter.Value = change_subcontractor_ps.Value;
                    }
                    else
                    {
                        change_subcontractor_psParameter.Size = -1;
                        change_subcontractor_psParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(change_subcontractor_psParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> OMC_COMMIT_RSS_CHANGES (System.Nullable<int> form_id, string items_id_list, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_COMMIT_RSS_CHANGES";

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);

                    DbParameter items_id_listParameter = cmd.CreateParameter();
                    items_id_listParameter.ParameterName = "items_id_list";
                    items_id_listParameter.Direction = ParameterDirection.Input;
                    items_id_listParameter.DbType = DbType.String;
                    if (items_id_list != null)
                    {
                        items_id_listParameter.Value = items_id_list;
                    }
                    else
                    {
                        items_id_listParameter.Size = -1;
                        items_id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(items_id_listParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> OMC_COMMIT_RSS_CHANGESAsync (System.Nullable<int> form_id, string items_id_list, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_COMMIT_RSS_CHANGES";

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);

                    DbParameter items_id_listParameter = cmd.CreateParameter();
                    items_id_listParameter.ParameterName = "items_id_list";
                    items_id_listParameter.Direction = ParameterDirection.Input;
                    items_id_listParameter.DbType = DbType.String;
                    if (items_id_list != null)
                    {
                        items_id_listParameter.Value = items_id_list;
                    }
                    else
                    {
                        items_id_listParameter.Size = -1;
                        items_id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(items_id_listParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> OMC_COMMIT_SVR_CHANGES (System.Nullable<int> form_id, string items_id_list, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_COMMIT_SVR_CHANGES";

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);

                    DbParameter items_id_listParameter = cmd.CreateParameter();
                    items_id_listParameter.ParameterName = "items_id_list";
                    items_id_listParameter.Direction = ParameterDirection.Input;
                    items_id_listParameter.DbType = DbType.String;
                    if (items_id_list != null)
                    {
                        items_id_listParameter.Value = items_id_list;
                    }
                    else
                    {
                        items_id_listParameter.Size = -1;
                        items_id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(items_id_listParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> OMC_COMMIT_SVR_CHANGESAsync (System.Nullable<int> form_id, string items_id_list, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_COMMIT_SVR_CHANGES";

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);

                    DbParameter items_id_listParameter = cmd.CreateParameter();
                    items_id_listParameter.ParameterName = "items_id_list";
                    items_id_listParameter.Direction = ParameterDirection.Input;
                    items_id_listParameter.DbType = DbType.String;
                    if (items_id_list != null)
                    {
                        items_id_listParameter.Value = items_id_list;
                    }
                    else
                    {
                        items_id_listParameter.Size = -1;
                        items_id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(items_id_listParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> OMC_COMMIT_SVR_CHANGES_MANUAL (System.Nullable<int> deleted_item_id, System.Nullable<int> added_item_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_COMMIT_SVR_CHANGES_MANUAL";

                    DbParameter deleted_item_idParameter = cmd.CreateParameter();
                    deleted_item_idParameter.ParameterName = "deleted_item_id";
                    deleted_item_idParameter.Direction = ParameterDirection.Input;
                    deleted_item_idParameter.DbType = DbType.Int32;
                    deleted_item_idParameter.Precision = 10;
                    deleted_item_idParameter.Scale = 0;
                    if (deleted_item_id.HasValue)
                    {
                        deleted_item_idParameter.Value = deleted_item_id.Value;
                    }
                    else
                    {
                        deleted_item_idParameter.Size = -1;
                        deleted_item_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(deleted_item_idParameter);

                    DbParameter added_item_idParameter = cmd.CreateParameter();
                    added_item_idParameter.ParameterName = "added_item_id";
                    added_item_idParameter.Direction = ParameterDirection.Input;
                    added_item_idParameter.DbType = DbType.Int32;
                    added_item_idParameter.Precision = 10;
                    added_item_idParameter.Scale = 0;
                    if (added_item_id.HasValue)
                    {
                        added_item_idParameter.Value = added_item_id.Value;
                    }
                    else
                    {
                        added_item_idParameter.Size = -1;
                        added_item_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(added_item_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> OMC_COMMIT_SVR_CHANGES_MANUALAsync (System.Nullable<int> deleted_item_id, System.Nullable<int> added_item_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_COMMIT_SVR_CHANGES_MANUAL";

                    DbParameter deleted_item_idParameter = cmd.CreateParameter();
                    deleted_item_idParameter.ParameterName = "deleted_item_id";
                    deleted_item_idParameter.Direction = ParameterDirection.Input;
                    deleted_item_idParameter.DbType = DbType.Int32;
                    deleted_item_idParameter.Precision = 10;
                    deleted_item_idParameter.Scale = 0;
                    if (deleted_item_id.HasValue)
                    {
                        deleted_item_idParameter.Value = deleted_item_id.Value;
                    }
                    else
                    {
                        deleted_item_idParameter.Size = -1;
                        deleted_item_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(deleted_item_idParameter);

                    DbParameter added_item_idParameter = cmd.CreateParameter();
                    added_item_idParameter.ParameterName = "added_item_id";
                    added_item_idParameter.Direction = ParameterDirection.Input;
                    added_item_idParameter.DbType = DbType.Int32;
                    added_item_idParameter.Precision = 10;
                    added_item_idParameter.Scale = 0;
                    if (added_item_id.HasValue)
                    {
                        added_item_idParameter.Value = added_item_id.Value;
                    }
                    else
                    {
                        added_item_idParameter.Size = -1;
                        added_item_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(added_item_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> OMC_INSERT_RSS_ARCHIVE (System.Nullable<int> form_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_INSERT_RSS_ARCHIVE";

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> OMC_INSERT_RSS_ARCHIVEAsync (System.Nullable<int> form_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_INSERT_RSS_ARCHIVE";

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> OMC_INSERT_SVR_ARCHIVE (System.Nullable<int> form_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_INSERT_SVR_ARCHIVE";

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> OMC_INSERT_SVR_ARCHIVEAsync (System.Nullable<int> form_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_INSERT_SVR_ARCHIVE";

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> OMC_INSERT_SVR_LOADING_ITEM (System.Nullable<int> loading_id, System.Nullable<int> project_id, string number, string resource_code, string description, string unit_description, string quantity_description, string price_description, string summa_description, string local_estimate_number, string project_documentation_code, string turnover, string phase, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_INSERT_SVR_LOADING_ITEM";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);

                    DbParameter numberParameter = cmd.CreateParameter();
                    numberParameter.ParameterName = "number";
                    numberParameter.Direction = ParameterDirection.Input;
                    numberParameter.DbType = DbType.String;
                    if (number != null)
                    {
                        numberParameter.Value = number;
                    }
                    else
                    {
                        numberParameter.Size = -1;
                        numberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(numberParameter);

                    DbParameter resource_codeParameter = cmd.CreateParameter();
                    resource_codeParameter.ParameterName = "resource_code";
                    resource_codeParameter.Direction = ParameterDirection.Input;
                    resource_codeParameter.DbType = DbType.String;
                    if (resource_code != null)
                    {
                        resource_codeParameter.Value = resource_code;
                    }
                    else
                    {
                        resource_codeParameter.Size = -1;
                        resource_codeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(resource_codeParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter unit_descriptionParameter = cmd.CreateParameter();
                    unit_descriptionParameter.ParameterName = "unit_description";
                    unit_descriptionParameter.Direction = ParameterDirection.Input;
                    unit_descriptionParameter.DbType = DbType.String;
                    if (unit_description != null)
                    {
                        unit_descriptionParameter.Value = unit_description;
                    }
                    else
                    {
                        unit_descriptionParameter.Size = -1;
                        unit_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(unit_descriptionParameter);

                    DbParameter quantity_descriptionParameter = cmd.CreateParameter();
                    quantity_descriptionParameter.ParameterName = "quantity_description";
                    quantity_descriptionParameter.Direction = ParameterDirection.Input;
                    quantity_descriptionParameter.DbType = DbType.String;
                    if (quantity_description != null)
                    {
                        quantity_descriptionParameter.Value = quantity_description;
                    }
                    else
                    {
                        quantity_descriptionParameter.Size = -1;
                        quantity_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(quantity_descriptionParameter);

                    DbParameter price_descriptionParameter = cmd.CreateParameter();
                    price_descriptionParameter.ParameterName = "price_description";
                    price_descriptionParameter.Direction = ParameterDirection.Input;
                    price_descriptionParameter.DbType = DbType.String;
                    if (price_description != null)
                    {
                        price_descriptionParameter.Value = price_description;
                    }
                    else
                    {
                        price_descriptionParameter.Size = -1;
                        price_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(price_descriptionParameter);

                    DbParameter summa_descriptionParameter = cmd.CreateParameter();
                    summa_descriptionParameter.ParameterName = "summa_description";
                    summa_descriptionParameter.Direction = ParameterDirection.Input;
                    summa_descriptionParameter.DbType = DbType.String;
                    if (summa_description != null)
                    {
                        summa_descriptionParameter.Value = summa_description;
                    }
                    else
                    {
                        summa_descriptionParameter.Size = -1;
                        summa_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(summa_descriptionParameter);

                    DbParameter local_estimate_numberParameter = cmd.CreateParameter();
                    local_estimate_numberParameter.ParameterName = "local_estimate_number";
                    local_estimate_numberParameter.Direction = ParameterDirection.Input;
                    local_estimate_numberParameter.DbType = DbType.String;
                    if (local_estimate_number != null)
                    {
                        local_estimate_numberParameter.Value = local_estimate_number;
                    }
                    else
                    {
                        local_estimate_numberParameter.Size = -1;
                        local_estimate_numberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(local_estimate_numberParameter);

                    DbParameter project_documentation_codeParameter = cmd.CreateParameter();
                    project_documentation_codeParameter.ParameterName = "project_documentation_code";
                    project_documentation_codeParameter.Direction = ParameterDirection.Input;
                    project_documentation_codeParameter.DbType = DbType.String;
                    if (project_documentation_code != null)
                    {
                        project_documentation_codeParameter.Value = project_documentation_code;
                    }
                    else
                    {
                        project_documentation_codeParameter.Size = -1;
                        project_documentation_codeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_documentation_codeParameter);

                    DbParameter turnoverParameter = cmd.CreateParameter();
                    turnoverParameter.ParameterName = "turnover";
                    turnoverParameter.Direction = ParameterDirection.Input;
                    turnoverParameter.DbType = DbType.String;
                    if (turnover != null)
                    {
                        turnoverParameter.Value = turnover;
                    }
                    else
                    {
                        turnoverParameter.Size = -1;
                        turnoverParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(turnoverParameter);

                    DbParameter phaseParameter = cmd.CreateParameter();
                    phaseParameter.ParameterName = "phase";
                    phaseParameter.Direction = ParameterDirection.Input;
                    phaseParameter.DbType = DbType.String;
                    if (phase != null)
                    {
                        phaseParameter.Value = phase;
                    }
                    else
                    {
                        phaseParameter.Size = -1;
                        phaseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(phaseParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> OMC_INSERT_SVR_LOADING_ITEMAsync (System.Nullable<int> loading_id, System.Nullable<int> project_id, string number, string resource_code, string description, string unit_description, string quantity_description, string price_description, string summa_description, string local_estimate_number, string project_documentation_code, string turnover, string phase, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_INSERT_SVR_LOADING_ITEM";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);

                    DbParameter numberParameter = cmd.CreateParameter();
                    numberParameter.ParameterName = "number";
                    numberParameter.Direction = ParameterDirection.Input;
                    numberParameter.DbType = DbType.String;
                    if (number != null)
                    {
                        numberParameter.Value = number;
                    }
                    else
                    {
                        numberParameter.Size = -1;
                        numberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(numberParameter);

                    DbParameter resource_codeParameter = cmd.CreateParameter();
                    resource_codeParameter.ParameterName = "resource_code";
                    resource_codeParameter.Direction = ParameterDirection.Input;
                    resource_codeParameter.DbType = DbType.String;
                    if (resource_code != null)
                    {
                        resource_codeParameter.Value = resource_code;
                    }
                    else
                    {
                        resource_codeParameter.Size = -1;
                        resource_codeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(resource_codeParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter unit_descriptionParameter = cmd.CreateParameter();
                    unit_descriptionParameter.ParameterName = "unit_description";
                    unit_descriptionParameter.Direction = ParameterDirection.Input;
                    unit_descriptionParameter.DbType = DbType.String;
                    if (unit_description != null)
                    {
                        unit_descriptionParameter.Value = unit_description;
                    }
                    else
                    {
                        unit_descriptionParameter.Size = -1;
                        unit_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(unit_descriptionParameter);

                    DbParameter quantity_descriptionParameter = cmd.CreateParameter();
                    quantity_descriptionParameter.ParameterName = "quantity_description";
                    quantity_descriptionParameter.Direction = ParameterDirection.Input;
                    quantity_descriptionParameter.DbType = DbType.String;
                    if (quantity_description != null)
                    {
                        quantity_descriptionParameter.Value = quantity_description;
                    }
                    else
                    {
                        quantity_descriptionParameter.Size = -1;
                        quantity_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(quantity_descriptionParameter);

                    DbParameter price_descriptionParameter = cmd.CreateParameter();
                    price_descriptionParameter.ParameterName = "price_description";
                    price_descriptionParameter.Direction = ParameterDirection.Input;
                    price_descriptionParameter.DbType = DbType.String;
                    if (price_description != null)
                    {
                        price_descriptionParameter.Value = price_description;
                    }
                    else
                    {
                        price_descriptionParameter.Size = -1;
                        price_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(price_descriptionParameter);

                    DbParameter summa_descriptionParameter = cmd.CreateParameter();
                    summa_descriptionParameter.ParameterName = "summa_description";
                    summa_descriptionParameter.Direction = ParameterDirection.Input;
                    summa_descriptionParameter.DbType = DbType.String;
                    if (summa_description != null)
                    {
                        summa_descriptionParameter.Value = summa_description;
                    }
                    else
                    {
                        summa_descriptionParameter.Size = -1;
                        summa_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(summa_descriptionParameter);

                    DbParameter local_estimate_numberParameter = cmd.CreateParameter();
                    local_estimate_numberParameter.ParameterName = "local_estimate_number";
                    local_estimate_numberParameter.Direction = ParameterDirection.Input;
                    local_estimate_numberParameter.DbType = DbType.String;
                    if (local_estimate_number != null)
                    {
                        local_estimate_numberParameter.Value = local_estimate_number;
                    }
                    else
                    {
                        local_estimate_numberParameter.Size = -1;
                        local_estimate_numberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(local_estimate_numberParameter);

                    DbParameter project_documentation_codeParameter = cmd.CreateParameter();
                    project_documentation_codeParameter.ParameterName = "project_documentation_code";
                    project_documentation_codeParameter.Direction = ParameterDirection.Input;
                    project_documentation_codeParameter.DbType = DbType.String;
                    if (project_documentation_code != null)
                    {
                        project_documentation_codeParameter.Value = project_documentation_code;
                    }
                    else
                    {
                        project_documentation_codeParameter.Size = -1;
                        project_documentation_codeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_documentation_codeParameter);

                    DbParameter turnoverParameter = cmd.CreateParameter();
                    turnoverParameter.ParameterName = "turnover";
                    turnoverParameter.Direction = ParameterDirection.Input;
                    turnoverParameter.DbType = DbType.String;
                    if (turnover != null)
                    {
                        turnoverParameter.Value = turnover;
                    }
                    else
                    {
                        turnoverParameter.Size = -1;
                        turnoverParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(turnoverParameter);

                    DbParameter phaseParameter = cmd.CreateParameter();
                    phaseParameter.ParameterName = "phase";
                    phaseParameter.Direction = ParameterDirection.Input;
                    phaseParameter.DbType = DbType.String;
                    if (phase != null)
                    {
                        phaseParameter.Value = phase;
                    }
                    else
                    {
                        phaseParameter.Size = -1;
                        phaseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(phaseParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> OMC_INSERT_FORM_DELIVERY_TYPE_LOADING_ITEM (System.Nullable<int> loading_id, System.Nullable<int> form_id, string item_code, string delivery_type_1, string delivery_type_2, string delivery_type_3, string delivery_type_4, string delivery_type_5, string delivery_type_6, string delivery_type_7, string delivery_type_8, string delivery_type_9, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_INSERT_FORM_DELIVERY_TYPE_LOADING_ITEM";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);

                    DbParameter item_codeParameter = cmd.CreateParameter();
                    item_codeParameter.ParameterName = "item_code";
                    item_codeParameter.Direction = ParameterDirection.Input;
                    item_codeParameter.DbType = DbType.String;
                    item_codeParameter.Size = 510;
                    if (item_code != null)
                    {
                        item_codeParameter.Value = item_code;
                    }
                    else
                    {
                        item_codeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(item_codeParameter);

                    DbParameter delivery_type_1Parameter = cmd.CreateParameter();
                    delivery_type_1Parameter.ParameterName = "delivery_type_1";
                    delivery_type_1Parameter.Direction = ParameterDirection.Input;
                    delivery_type_1Parameter.DbType = DbType.String;
                    if (delivery_type_1 != null)
                    {
                        delivery_type_1Parameter.Value = delivery_type_1;
                    }
                    else
                    {
                        delivery_type_1Parameter.Size = -1;
                        delivery_type_1Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_1Parameter);

                    DbParameter delivery_type_2Parameter = cmd.CreateParameter();
                    delivery_type_2Parameter.ParameterName = "delivery_type_2";
                    delivery_type_2Parameter.Direction = ParameterDirection.Input;
                    delivery_type_2Parameter.DbType = DbType.String;
                    if (delivery_type_2 != null)
                    {
                        delivery_type_2Parameter.Value = delivery_type_2;
                    }
                    else
                    {
                        delivery_type_2Parameter.Size = -1;
                        delivery_type_2Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_2Parameter);

                    DbParameter delivery_type_3Parameter = cmd.CreateParameter();
                    delivery_type_3Parameter.ParameterName = "delivery_type_3";
                    delivery_type_3Parameter.Direction = ParameterDirection.Input;
                    delivery_type_3Parameter.DbType = DbType.String;
                    if (delivery_type_3 != null)
                    {
                        delivery_type_3Parameter.Value = delivery_type_3;
                    }
                    else
                    {
                        delivery_type_3Parameter.Size = -1;
                        delivery_type_3Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_3Parameter);

                    DbParameter delivery_type_4Parameter = cmd.CreateParameter();
                    delivery_type_4Parameter.ParameterName = "delivery_type_4";
                    delivery_type_4Parameter.Direction = ParameterDirection.Input;
                    delivery_type_4Parameter.DbType = DbType.String;
                    if (delivery_type_4 != null)
                    {
                        delivery_type_4Parameter.Value = delivery_type_4;
                    }
                    else
                    {
                        delivery_type_4Parameter.Size = -1;
                        delivery_type_4Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_4Parameter);

                    DbParameter delivery_type_5Parameter = cmd.CreateParameter();
                    delivery_type_5Parameter.ParameterName = "delivery_type_5";
                    delivery_type_5Parameter.Direction = ParameterDirection.Input;
                    delivery_type_5Parameter.DbType = DbType.String;
                    if (delivery_type_5 != null)
                    {
                        delivery_type_5Parameter.Value = delivery_type_5;
                    }
                    else
                    {
                        delivery_type_5Parameter.Size = -1;
                        delivery_type_5Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_5Parameter);

                    DbParameter delivery_type_6Parameter = cmd.CreateParameter();
                    delivery_type_6Parameter.ParameterName = "delivery_type_6";
                    delivery_type_6Parameter.Direction = ParameterDirection.Input;
                    delivery_type_6Parameter.DbType = DbType.String;
                    if (delivery_type_6 != null)
                    {
                        delivery_type_6Parameter.Value = delivery_type_6;
                    }
                    else
                    {
                        delivery_type_6Parameter.Size = -1;
                        delivery_type_6Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_6Parameter);

                    DbParameter delivery_type_7Parameter = cmd.CreateParameter();
                    delivery_type_7Parameter.ParameterName = "delivery_type_7";
                    delivery_type_7Parameter.Direction = ParameterDirection.Input;
                    delivery_type_7Parameter.DbType = DbType.String;
                    if (delivery_type_7 != null)
                    {
                        delivery_type_7Parameter.Value = delivery_type_7;
                    }
                    else
                    {
                        delivery_type_7Parameter.Size = -1;
                        delivery_type_7Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_7Parameter);

                    DbParameter delivery_type_8Parameter = cmd.CreateParameter();
                    delivery_type_8Parameter.ParameterName = "delivery_type_8";
                    delivery_type_8Parameter.Direction = ParameterDirection.Input;
                    delivery_type_8Parameter.DbType = DbType.String;
                    if (delivery_type_8 != null)
                    {
                        delivery_type_8Parameter.Value = delivery_type_8;
                    }
                    else
                    {
                        delivery_type_8Parameter.Size = -1;
                        delivery_type_8Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_8Parameter);

                    DbParameter delivery_type_9Parameter = cmd.CreateParameter();
                    delivery_type_9Parameter.ParameterName = "delivery_type_9";
                    delivery_type_9Parameter.Direction = ParameterDirection.Input;
                    delivery_type_9Parameter.DbType = DbType.String;
                    if (delivery_type_9 != null)
                    {
                        delivery_type_9Parameter.Value = delivery_type_9;
                    }
                    else
                    {
                        delivery_type_9Parameter.Size = -1;
                        delivery_type_9Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_9Parameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> OMC_INSERT_FORM_DELIVERY_TYPE_LOADING_ITEMAsync (System.Nullable<int> loading_id, System.Nullable<int> form_id, string item_code, string delivery_type_1, string delivery_type_2, string delivery_type_3, string delivery_type_4, string delivery_type_5, string delivery_type_6, string delivery_type_7, string delivery_type_8, string delivery_type_9, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_INSERT_FORM_DELIVERY_TYPE_LOADING_ITEM";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);

                    DbParameter item_codeParameter = cmd.CreateParameter();
                    item_codeParameter.ParameterName = "item_code";
                    item_codeParameter.Direction = ParameterDirection.Input;
                    item_codeParameter.DbType = DbType.String;
                    item_codeParameter.Size = 510;
                    if (item_code != null)
                    {
                        item_codeParameter.Value = item_code;
                    }
                    else
                    {
                        item_codeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(item_codeParameter);

                    DbParameter delivery_type_1Parameter = cmd.CreateParameter();
                    delivery_type_1Parameter.ParameterName = "delivery_type_1";
                    delivery_type_1Parameter.Direction = ParameterDirection.Input;
                    delivery_type_1Parameter.DbType = DbType.String;
                    if (delivery_type_1 != null)
                    {
                        delivery_type_1Parameter.Value = delivery_type_1;
                    }
                    else
                    {
                        delivery_type_1Parameter.Size = -1;
                        delivery_type_1Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_1Parameter);

                    DbParameter delivery_type_2Parameter = cmd.CreateParameter();
                    delivery_type_2Parameter.ParameterName = "delivery_type_2";
                    delivery_type_2Parameter.Direction = ParameterDirection.Input;
                    delivery_type_2Parameter.DbType = DbType.String;
                    if (delivery_type_2 != null)
                    {
                        delivery_type_2Parameter.Value = delivery_type_2;
                    }
                    else
                    {
                        delivery_type_2Parameter.Size = -1;
                        delivery_type_2Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_2Parameter);

                    DbParameter delivery_type_3Parameter = cmd.CreateParameter();
                    delivery_type_3Parameter.ParameterName = "delivery_type_3";
                    delivery_type_3Parameter.Direction = ParameterDirection.Input;
                    delivery_type_3Parameter.DbType = DbType.String;
                    if (delivery_type_3 != null)
                    {
                        delivery_type_3Parameter.Value = delivery_type_3;
                    }
                    else
                    {
                        delivery_type_3Parameter.Size = -1;
                        delivery_type_3Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_3Parameter);

                    DbParameter delivery_type_4Parameter = cmd.CreateParameter();
                    delivery_type_4Parameter.ParameterName = "delivery_type_4";
                    delivery_type_4Parameter.Direction = ParameterDirection.Input;
                    delivery_type_4Parameter.DbType = DbType.String;
                    if (delivery_type_4 != null)
                    {
                        delivery_type_4Parameter.Value = delivery_type_4;
                    }
                    else
                    {
                        delivery_type_4Parameter.Size = -1;
                        delivery_type_4Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_4Parameter);

                    DbParameter delivery_type_5Parameter = cmd.CreateParameter();
                    delivery_type_5Parameter.ParameterName = "delivery_type_5";
                    delivery_type_5Parameter.Direction = ParameterDirection.Input;
                    delivery_type_5Parameter.DbType = DbType.String;
                    if (delivery_type_5 != null)
                    {
                        delivery_type_5Parameter.Value = delivery_type_5;
                    }
                    else
                    {
                        delivery_type_5Parameter.Size = -1;
                        delivery_type_5Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_5Parameter);

                    DbParameter delivery_type_6Parameter = cmd.CreateParameter();
                    delivery_type_6Parameter.ParameterName = "delivery_type_6";
                    delivery_type_6Parameter.Direction = ParameterDirection.Input;
                    delivery_type_6Parameter.DbType = DbType.String;
                    if (delivery_type_6 != null)
                    {
                        delivery_type_6Parameter.Value = delivery_type_6;
                    }
                    else
                    {
                        delivery_type_6Parameter.Size = -1;
                        delivery_type_6Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_6Parameter);

                    DbParameter delivery_type_7Parameter = cmd.CreateParameter();
                    delivery_type_7Parameter.ParameterName = "delivery_type_7";
                    delivery_type_7Parameter.Direction = ParameterDirection.Input;
                    delivery_type_7Parameter.DbType = DbType.String;
                    if (delivery_type_7 != null)
                    {
                        delivery_type_7Parameter.Value = delivery_type_7;
                    }
                    else
                    {
                        delivery_type_7Parameter.Size = -1;
                        delivery_type_7Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_7Parameter);

                    DbParameter delivery_type_8Parameter = cmd.CreateParameter();
                    delivery_type_8Parameter.ParameterName = "delivery_type_8";
                    delivery_type_8Parameter.Direction = ParameterDirection.Input;
                    delivery_type_8Parameter.DbType = DbType.String;
                    if (delivery_type_8 != null)
                    {
                        delivery_type_8Parameter.Value = delivery_type_8;
                    }
                    else
                    {
                        delivery_type_8Parameter.Size = -1;
                        delivery_type_8Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_8Parameter);

                    DbParameter delivery_type_9Parameter = cmd.CreateParameter();
                    delivery_type_9Parameter.ParameterName = "delivery_type_9";
                    delivery_type_9Parameter.Direction = ParameterDirection.Input;
                    delivery_type_9Parameter.DbType = DbType.String;
                    if (delivery_type_9 != null)
                    {
                        delivery_type_9Parameter.Value = delivery_type_9;
                    }
                    else
                    {
                        delivery_type_9Parameter.Size = -1;
                        delivery_type_9Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_9Parameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_REPORT_FORM_RSS_DELIVERY_TYPE_DIFFERENCEResult> OMC_REPORT_FORM_RSS_DELIVERY_TYPE_DIFFERENCE (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id)
        {

            List<OMC_REPORT_FORM_RSS_DELIVERY_TYPE_DIFFERENCEResult> result = new List<OMC_REPORT_FORM_RSS_DELIVERY_TYPE_DIFFERENCEResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_REPORT_FORM_RSS_DELIVERY_TYPE_DIFFERENCE";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_REPORT_FORM_RSS_DELIVERY_TYPE_DIFFERENCEResult row = new OMC_REPORT_FORM_RSS_DELIVERY_TYPE_DIFFERENCEResult();
                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_description")))
                                row.subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_description")), typeof(string));
                            else
                                row.subcontractor_description = null;

                            if (fieldNames.Contains("lno_description") && !reader.IsDBNull(reader.GetOrdinal("lno_description")))
                                row.lno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_description")), typeof(string));
                            else
                                row.lno_description = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));
                            else
                                row.ekk_code = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("additional_properties") && !reader.IsDBNull(reader.GetOrdinal("additional_properties")))
                                row.additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_properties")), typeof(string));
                            else
                                row.additional_properties = null;

                            if (fieldNames.Contains("package_contents") && !reader.IsDBNull(reader.GetOrdinal("package_contents")))
                                row.package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_contents")), typeof(string));
                            else
                                row.package_contents = null;

                            if (fieldNames.Contains("manufacturer") && !reader.IsDBNull(reader.GetOrdinal("manufacturer")))
                                row.manufacturer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"manufacturer")), typeof(string));
                            else
                                row.manufacturer = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("summary2") && !reader.IsDBNull(reader.GetOrdinal("summary2")))
                                row.summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary2")), typeof(string));
                            else
                                row.summary2 = null;

                            if (fieldNames.Contains("rss_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("rss_delivery_type")))
                                row.rss_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"rss_delivery_type")), typeof(string));
                            else
                                row.rss_delivery_type = null;

                            if (fieldNames.Contains("suggested_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type")))
                                row.suggested_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type")), typeof(string));
                            else
                                row.suggested_delivery_type = null;

                            if (fieldNames.Contains("delivery_type") && !reader.IsDBNull(reader.GetOrdinal("delivery_type")))
                                row.delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type")), typeof(string));
                            else
                                row.delivery_type = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_REPORT_FORM_RSS_DELIVERY_TYPE_DIFFERENCEResult>> OMC_REPORT_FORM_RSS_DELIVERY_TYPE_DIFFERENCEAsync (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id)
        {

            List<OMC_REPORT_FORM_RSS_DELIVERY_TYPE_DIFFERENCEResult> result = new List<OMC_REPORT_FORM_RSS_DELIVERY_TYPE_DIFFERENCEResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_REPORT_FORM_RSS_DELIVERY_TYPE_DIFFERENCE";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_REPORT_FORM_RSS_DELIVERY_TYPE_DIFFERENCEResult row = new OMC_REPORT_FORM_RSS_DELIVERY_TYPE_DIFFERENCEResult();
                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_description")))
                                row.subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_description")), typeof(string));
                            else
                                row.subcontractor_description = null;

                            if (fieldNames.Contains("lno_description") && !reader.IsDBNull(reader.GetOrdinal("lno_description")))
                                row.lno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_description")), typeof(string));
                            else
                                row.lno_description = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));
                            else
                                row.ekk_code = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("additional_properties") && !reader.IsDBNull(reader.GetOrdinal("additional_properties")))
                                row.additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_properties")), typeof(string));
                            else
                                row.additional_properties = null;

                            if (fieldNames.Contains("package_contents") && !reader.IsDBNull(reader.GetOrdinal("package_contents")))
                                row.package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_contents")), typeof(string));
                            else
                                row.package_contents = null;

                            if (fieldNames.Contains("manufacturer") && !reader.IsDBNull(reader.GetOrdinal("manufacturer")))
                                row.manufacturer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"manufacturer")), typeof(string));
                            else
                                row.manufacturer = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("summary2") && !reader.IsDBNull(reader.GetOrdinal("summary2")))
                                row.summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary2")), typeof(string));
                            else
                                row.summary2 = null;

                            if (fieldNames.Contains("rss_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("rss_delivery_type")))
                                row.rss_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"rss_delivery_type")), typeof(string));
                            else
                                row.rss_delivery_type = null;

                            if (fieldNames.Contains("suggested_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type")))
                                row.suggested_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type")), typeof(string));
                            else
                                row.suggested_delivery_type = null;

                            if (fieldNames.Contains("delivery_type") && !reader.IsDBNull(reader.GetOrdinal("delivery_type")))
                                row.delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type")), typeof(string));
                            else
                                row.delivery_type = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_REPORT_FORM_RSS_SUBCONTRACTOR_ITEMSResult> OMC_REPORT_FORM_RSS_SUBCONTRACTOR_ITEMS (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id)
        {

            List<OMC_REPORT_FORM_RSS_SUBCONTRACTOR_ITEMSResult> result = new List<OMC_REPORT_FORM_RSS_SUBCONTRACTOR_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_REPORT_FORM_RSS_SUBCONTRACTOR_ITEMS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_REPORT_FORM_RSS_SUBCONTRACTOR_ITEMSResult row = new OMC_REPORT_FORM_RSS_SUBCONTRACTOR_ITEMSResult();
                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_description")))
                                row.subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_description")), typeof(string));
                            else
                                row.subcontractor_description = null;

                            if (fieldNames.Contains("lno_description") && !reader.IsDBNull(reader.GetOrdinal("lno_description")))
                                row.lno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_description")), typeof(string));
                            else
                                row.lno_description = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("revision_number") && !reader.IsDBNull(reader.GetOrdinal("revision_number")))
                                row.revision_number = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_number")), typeof(int));
                            else
                                row.revision_number = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));
                            else
                                row.ekk_code = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("package_contents") && !reader.IsDBNull(reader.GetOrdinal("package_contents")))
                                row.package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_contents")), typeof(string));
                            else
                                row.package_contents = null;

                            if (fieldNames.Contains("additional_properties") && !reader.IsDBNull(reader.GetOrdinal("additional_properties")))
                                row.additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_properties")), typeof(string));
                            else
                                row.additional_properties = null;

                            if (fieldNames.Contains("manufacturer") && !reader.IsDBNull(reader.GetOrdinal("manufacturer")))
                                row.manufacturer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"manufacturer")), typeof(string));
                            else
                                row.manufacturer = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("mass_per_unit") && !reader.IsDBNull(reader.GetOrdinal("mass_per_unit")))
                                row.mass_per_unit = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_per_unit")), typeof(double));
                            else
                                row.mass_per_unit = null;

                            if (fieldNames.Contains("mass_size") && !reader.IsDBNull(reader.GetOrdinal("mass_size")))
                                row.mass_size = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_size")), typeof(string));
                            else
                                row.mass_size = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("summary2") && !reader.IsDBNull(reader.GetOrdinal("summary2")))
                                row.summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary2")), typeof(string));
                            else
                                row.summary2 = null;

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal("price")))
                                row.price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(decimal));

                            if (fieldNames.Contains("supplier_description") && !reader.IsDBNull(reader.GetOrdinal("supplier_description")))
                                row.supplier_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supplier_description")), typeof(string));

                            if (fieldNames.Contains("delivery_base") && !reader.IsDBNull(reader.GetOrdinal("delivery_base")))
                                row.delivery_base = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_base")), typeof(string));

                            if (fieldNames.Contains("price_source_number") && !reader.IsDBNull(reader.GetOrdinal("price_source_number")))
                                row.price_source_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_source_number")), typeof(string));

                            if (fieldNames.Contains("comment") && !reader.IsDBNull(reader.GetOrdinal("comment")))
                                row.comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comment")), typeof(string));

                            if (fieldNames.Contains("price_source_link") && !reader.IsDBNull(reader.GetOrdinal("price_source_link")))
                                row.price_source_link = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_source_link")), typeof(string));

                            if (fieldNames.Contains("price_source") && !reader.IsDBNull(reader.GetOrdinal("price_source")))
                                row.price_source = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_source")), typeof(string));

                            if (fieldNames.Contains("price_source_year") && !reader.IsDBNull(reader.GetOrdinal("price_source_year")))
                                row.price_source_year = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_source_year")), typeof(int));

                            if (fieldNames.Contains("delivery_to_zhd_price") && !reader.IsDBNull(reader.GetOrdinal("delivery_to_zhd_price")))
                                row.delivery_to_zhd_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_to_zhd_price")), typeof(decimal));

                            if (fieldNames.Contains("delivery_from_zhd_to_object_price") && !reader.IsDBNull(reader.GetOrdinal("delivery_from_zhd_to_object_price")))
                                row.delivery_from_zhd_to_object_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_from_zhd_to_object_price")), typeof(decimal));

                            if (fieldNames.Contains("delivery_auto_to_object_price") && !reader.IsDBNull(reader.GetOrdinal("delivery_auto_to_object_price")))
                                row.delivery_auto_to_object_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_auto_to_object_price")), typeof(decimal));

                            if (fieldNames.Contains("prr_price") && !reader.IsDBNull(reader.GetOrdinal("prr_price")))
                                row.prr_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prr_price")), typeof(decimal));

                            if (fieldNames.Contains("package_price") && !reader.IsDBNull(reader.GetOrdinal("package_price")))
                                row.package_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_price")), typeof(decimal));

                            if (fieldNames.Contains("storage_price") && !reader.IsDBNull(reader.GetOrdinal("storage_price")))
                                row.storage_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"storage_price")), typeof(decimal));

                            if (fieldNames.Contains("total_price") && !reader.IsDBNull(reader.GetOrdinal("total_price")))
                                row.total_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_price")), typeof(decimal));

                            if (fieldNames.Contains("summa") && !reader.IsDBNull(reader.GetOrdinal("summa")))
                                row.summa = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summa")), typeof(decimal));

                            if (fieldNames.Contains("total_summa") && !reader.IsDBNull(reader.GetOrdinal("total_summa")))
                                row.total_summa = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_summa")), typeof(decimal));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_REPORT_FORM_RSS_SUBCONTRACTOR_ITEMSResult>> OMC_REPORT_FORM_RSS_SUBCONTRACTOR_ITEMSAsync (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id)
        {

            List<OMC_REPORT_FORM_RSS_SUBCONTRACTOR_ITEMSResult> result = new List<OMC_REPORT_FORM_RSS_SUBCONTRACTOR_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_REPORT_FORM_RSS_SUBCONTRACTOR_ITEMS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_REPORT_FORM_RSS_SUBCONTRACTOR_ITEMSResult row = new OMC_REPORT_FORM_RSS_SUBCONTRACTOR_ITEMSResult();
                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_description")))
                                row.subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_description")), typeof(string));
                            else
                                row.subcontractor_description = null;

                            if (fieldNames.Contains("lno_description") && !reader.IsDBNull(reader.GetOrdinal("lno_description")))
                                row.lno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_description")), typeof(string));
                            else
                                row.lno_description = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("revision_number") && !reader.IsDBNull(reader.GetOrdinal("revision_number")))
                                row.revision_number = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_number")), typeof(int));
                            else
                                row.revision_number = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));
                            else
                                row.ekk_code = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("package_contents") && !reader.IsDBNull(reader.GetOrdinal("package_contents")))
                                row.package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_contents")), typeof(string));
                            else
                                row.package_contents = null;

                            if (fieldNames.Contains("additional_properties") && !reader.IsDBNull(reader.GetOrdinal("additional_properties")))
                                row.additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_properties")), typeof(string));
                            else
                                row.additional_properties = null;

                            if (fieldNames.Contains("manufacturer") && !reader.IsDBNull(reader.GetOrdinal("manufacturer")))
                                row.manufacturer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"manufacturer")), typeof(string));
                            else
                                row.manufacturer = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("mass_per_unit") && !reader.IsDBNull(reader.GetOrdinal("mass_per_unit")))
                                row.mass_per_unit = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_per_unit")), typeof(double));
                            else
                                row.mass_per_unit = null;

                            if (fieldNames.Contains("mass_size") && !reader.IsDBNull(reader.GetOrdinal("mass_size")))
                                row.mass_size = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_size")), typeof(string));
                            else
                                row.mass_size = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("summary2") && !reader.IsDBNull(reader.GetOrdinal("summary2")))
                                row.summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary2")), typeof(string));
                            else
                                row.summary2 = null;

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal("price")))
                                row.price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(decimal));

                            if (fieldNames.Contains("supplier_description") && !reader.IsDBNull(reader.GetOrdinal("supplier_description")))
                                row.supplier_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supplier_description")), typeof(string));

                            if (fieldNames.Contains("delivery_base") && !reader.IsDBNull(reader.GetOrdinal("delivery_base")))
                                row.delivery_base = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_base")), typeof(string));

                            if (fieldNames.Contains("price_source_number") && !reader.IsDBNull(reader.GetOrdinal("price_source_number")))
                                row.price_source_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_source_number")), typeof(string));

                            if (fieldNames.Contains("comment") && !reader.IsDBNull(reader.GetOrdinal("comment")))
                                row.comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comment")), typeof(string));

                            if (fieldNames.Contains("price_source_link") && !reader.IsDBNull(reader.GetOrdinal("price_source_link")))
                                row.price_source_link = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_source_link")), typeof(string));

                            if (fieldNames.Contains("price_source") && !reader.IsDBNull(reader.GetOrdinal("price_source")))
                                row.price_source = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_source")), typeof(string));

                            if (fieldNames.Contains("price_source_year") && !reader.IsDBNull(reader.GetOrdinal("price_source_year")))
                                row.price_source_year = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_source_year")), typeof(int));

                            if (fieldNames.Contains("delivery_to_zhd_price") && !reader.IsDBNull(reader.GetOrdinal("delivery_to_zhd_price")))
                                row.delivery_to_zhd_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_to_zhd_price")), typeof(decimal));

                            if (fieldNames.Contains("delivery_from_zhd_to_object_price") && !reader.IsDBNull(reader.GetOrdinal("delivery_from_zhd_to_object_price")))
                                row.delivery_from_zhd_to_object_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_from_zhd_to_object_price")), typeof(decimal));

                            if (fieldNames.Contains("delivery_auto_to_object_price") && !reader.IsDBNull(reader.GetOrdinal("delivery_auto_to_object_price")))
                                row.delivery_auto_to_object_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_auto_to_object_price")), typeof(decimal));

                            if (fieldNames.Contains("prr_price") && !reader.IsDBNull(reader.GetOrdinal("prr_price")))
                                row.prr_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prr_price")), typeof(decimal));

                            if (fieldNames.Contains("package_price") && !reader.IsDBNull(reader.GetOrdinal("package_price")))
                                row.package_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_price")), typeof(decimal));

                            if (fieldNames.Contains("storage_price") && !reader.IsDBNull(reader.GetOrdinal("storage_price")))
                                row.storage_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"storage_price")), typeof(decimal));

                            if (fieldNames.Contains("total_price") && !reader.IsDBNull(reader.GetOrdinal("total_price")))
                                row.total_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_price")), typeof(decimal));

                            if (fieldNames.Contains("summa") && !reader.IsDBNull(reader.GetOrdinal("summa")))
                                row.summa = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summa")), typeof(decimal));

                            if (fieldNames.Contains("total_summa") && !reader.IsDBNull(reader.GetOrdinal("total_summa")))
                                row.total_summa = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_summa")), typeof(decimal));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_REPORT_FORM_SVR_DELIVERY_TYPE_DIFFERENCEResult> OMC_REPORT_FORM_SVR_DELIVERY_TYPE_DIFFERENCE (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id)
        {

            List<OMC_REPORT_FORM_SVR_DELIVERY_TYPE_DIFFERENCEResult> result = new List<OMC_REPORT_FORM_SVR_DELIVERY_TYPE_DIFFERENCEResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_REPORT_FORM_SVR_DELIVERY_TYPE_DIFFERENCE";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_REPORT_FORM_SVR_DELIVERY_TYPE_DIFFERENCEResult row = new OMC_REPORT_FORM_SVR_DELIVERY_TYPE_DIFFERENCEResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("svr_delivery_type")))
                                row.svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"svr_delivery_type")), typeof(string));
                            else
                                row.svr_delivery_type = null;

                            if (fieldNames.Contains("suggested_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type")))
                                row.suggested_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type")), typeof(string));
                            else
                                row.suggested_delivery_type = null;

                            if (fieldNames.Contains("delivery_type") && !reader.IsDBNull(reader.GetOrdinal("delivery_type")))
                                row.delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type")), typeof(string));
                            else
                                row.delivery_type = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_REPORT_FORM_SVR_DELIVERY_TYPE_DIFFERENCEResult>> OMC_REPORT_FORM_SVR_DELIVERY_TYPE_DIFFERENCEAsync (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id)
        {

            List<OMC_REPORT_FORM_SVR_DELIVERY_TYPE_DIFFERENCEResult> result = new List<OMC_REPORT_FORM_SVR_DELIVERY_TYPE_DIFFERENCEResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_REPORT_FORM_SVR_DELIVERY_TYPE_DIFFERENCE";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_REPORT_FORM_SVR_DELIVERY_TYPE_DIFFERENCEResult row = new OMC_REPORT_FORM_SVR_DELIVERY_TYPE_DIFFERENCEResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("svr_delivery_type")))
                                row.svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"svr_delivery_type")), typeof(string));
                            else
                                row.svr_delivery_type = null;

                            if (fieldNames.Contains("suggested_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type")))
                                row.suggested_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type")), typeof(string));
                            else
                                row.suggested_delivery_type = null;

                            if (fieldNames.Contains("delivery_type") && !reader.IsDBNull(reader.GetOrdinal("delivery_type")))
                                row.delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type")), typeof(string));
                            else
                                row.delivery_type = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_REPORT_FORM_SVR_SUBCONTRACTOR_ITEMSResult> OMC_REPORT_FORM_SVR_SUBCONTRACTOR_ITEMS (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id)
        {

            List<OMC_REPORT_FORM_SVR_SUBCONTRACTOR_ITEMSResult> result = new List<OMC_REPORT_FORM_SVR_SUBCONTRACTOR_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_REPORT_FORM_SVR_SUBCONTRACTOR_ITEMS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_REPORT_FORM_SVR_SUBCONTRACTOR_ITEMSResult row = new OMC_REPORT_FORM_SVR_SUBCONTRACTOR_ITEMSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal("price")))
                                row.price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(double));
                            else
                                row.price = null;

                            if (fieldNames.Contains("summa") && !reader.IsDBNull(reader.GetOrdinal("summa")))
                                row.summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summa")), typeof(double));
                            else
                                row.summa = null;

                            if (fieldNames.Contains("turnover") && !reader.IsDBNull(reader.GetOrdinal("turnover")))
                                row.turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"turnover")), typeof(string));
                            else
                                row.turnover = null;

                            if (fieldNames.Contains("phase") && !reader.IsDBNull(reader.GetOrdinal("phase")))
                                row.phase = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phase")), typeof(string));
                            else
                                row.phase = null;

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal("price")))
                                row.price1 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(decimal));

                            if (fieldNames.Contains("supplier_description") && !reader.IsDBNull(reader.GetOrdinal("supplier_description")))
                                row.supplier_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supplier_description")), typeof(string));

                            if (fieldNames.Contains("delivery_base") && !reader.IsDBNull(reader.GetOrdinal("delivery_base")))
                                row.delivery_base = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_base")), typeof(string));

                            if (fieldNames.Contains("price_source_number") && !reader.IsDBNull(reader.GetOrdinal("price_source_number")))
                                row.price_source_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_source_number")), typeof(string));

                            if (fieldNames.Contains("comment") && !reader.IsDBNull(reader.GetOrdinal("comment")))
                                row.comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comment")), typeof(string));

                            if (fieldNames.Contains("price_source_link") && !reader.IsDBNull(reader.GetOrdinal("price_source_link")))
                                row.price_source_link = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_source_link")), typeof(string));

                            if (fieldNames.Contains("price_source") && !reader.IsDBNull(reader.GetOrdinal("price_source")))
                                row.price_source = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_source")), typeof(string));

                            if (fieldNames.Contains("price_source_year") && !reader.IsDBNull(reader.GetOrdinal("price_source_year")))
                                row.price_source_year = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_source_year")), typeof(int));

                            if (fieldNames.Contains("delivery_to_zhd_price") && !reader.IsDBNull(reader.GetOrdinal("delivery_to_zhd_price")))
                                row.delivery_to_zhd_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_to_zhd_price")), typeof(decimal));

                            if (fieldNames.Contains("delivery_from_zhd_to_object_price") && !reader.IsDBNull(reader.GetOrdinal("delivery_from_zhd_to_object_price")))
                                row.delivery_from_zhd_to_object_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_from_zhd_to_object_price")), typeof(decimal));

                            if (fieldNames.Contains("delivery_auto_to_object_price") && !reader.IsDBNull(reader.GetOrdinal("delivery_auto_to_object_price")))
                                row.delivery_auto_to_object_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_auto_to_object_price")), typeof(decimal));

                            if (fieldNames.Contains("prr_price") && !reader.IsDBNull(reader.GetOrdinal("prr_price")))
                                row.prr_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prr_price")), typeof(decimal));

                            if (fieldNames.Contains("package_price") && !reader.IsDBNull(reader.GetOrdinal("package_price")))
                                row.package_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_price")), typeof(decimal));

                            if (fieldNames.Contains("storage_price") && !reader.IsDBNull(reader.GetOrdinal("storage_price")))
                                row.storage_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"storage_price")), typeof(decimal));

                            if (fieldNames.Contains("total_price") && !reader.IsDBNull(reader.GetOrdinal("total_price")))
                                row.total_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_price")), typeof(decimal));

                            if (fieldNames.Contains("summa") && !reader.IsDBNull(reader.GetOrdinal("summa")))
                                row.summa1 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summa")), typeof(decimal));

                            if (fieldNames.Contains("total_summa") && !reader.IsDBNull(reader.GetOrdinal("total_summa")))
                                row.total_summa = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_summa")), typeof(decimal));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_REPORT_FORM_SVR_SUBCONTRACTOR_ITEMSResult>> OMC_REPORT_FORM_SVR_SUBCONTRACTOR_ITEMSAsync (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id)
        {

            List<OMC_REPORT_FORM_SVR_SUBCONTRACTOR_ITEMSResult> result = new List<OMC_REPORT_FORM_SVR_SUBCONTRACTOR_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_REPORT_FORM_SVR_SUBCONTRACTOR_ITEMS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_REPORT_FORM_SVR_SUBCONTRACTOR_ITEMSResult row = new OMC_REPORT_FORM_SVR_SUBCONTRACTOR_ITEMSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal("price")))
                                row.price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(double));
                            else
                                row.price = null;

                            if (fieldNames.Contains("summa") && !reader.IsDBNull(reader.GetOrdinal("summa")))
                                row.summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summa")), typeof(double));
                            else
                                row.summa = null;

                            if (fieldNames.Contains("turnover") && !reader.IsDBNull(reader.GetOrdinal("turnover")))
                                row.turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"turnover")), typeof(string));
                            else
                                row.turnover = null;

                            if (fieldNames.Contains("phase") && !reader.IsDBNull(reader.GetOrdinal("phase")))
                                row.phase = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phase")), typeof(string));
                            else
                                row.phase = null;

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal("price")))
                                row.price1 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(decimal));

                            if (fieldNames.Contains("supplier_description") && !reader.IsDBNull(reader.GetOrdinal("supplier_description")))
                                row.supplier_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supplier_description")), typeof(string));

                            if (fieldNames.Contains("delivery_base") && !reader.IsDBNull(reader.GetOrdinal("delivery_base")))
                                row.delivery_base = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_base")), typeof(string));

                            if (fieldNames.Contains("price_source_number") && !reader.IsDBNull(reader.GetOrdinal("price_source_number")))
                                row.price_source_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_source_number")), typeof(string));

                            if (fieldNames.Contains("comment") && !reader.IsDBNull(reader.GetOrdinal("comment")))
                                row.comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comment")), typeof(string));

                            if (fieldNames.Contains("price_source_link") && !reader.IsDBNull(reader.GetOrdinal("price_source_link")))
                                row.price_source_link = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_source_link")), typeof(string));

                            if (fieldNames.Contains("price_source") && !reader.IsDBNull(reader.GetOrdinal("price_source")))
                                row.price_source = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_source")), typeof(string));

                            if (fieldNames.Contains("price_source_year") && !reader.IsDBNull(reader.GetOrdinal("price_source_year")))
                                row.price_source_year = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_source_year")), typeof(int));

                            if (fieldNames.Contains("delivery_to_zhd_price") && !reader.IsDBNull(reader.GetOrdinal("delivery_to_zhd_price")))
                                row.delivery_to_zhd_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_to_zhd_price")), typeof(decimal));

                            if (fieldNames.Contains("delivery_from_zhd_to_object_price") && !reader.IsDBNull(reader.GetOrdinal("delivery_from_zhd_to_object_price")))
                                row.delivery_from_zhd_to_object_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_from_zhd_to_object_price")), typeof(decimal));

                            if (fieldNames.Contains("delivery_auto_to_object_price") && !reader.IsDBNull(reader.GetOrdinal("delivery_auto_to_object_price")))
                                row.delivery_auto_to_object_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_auto_to_object_price")), typeof(decimal));

                            if (fieldNames.Contains("prr_price") && !reader.IsDBNull(reader.GetOrdinal("prr_price")))
                                row.prr_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prr_price")), typeof(decimal));

                            if (fieldNames.Contains("package_price") && !reader.IsDBNull(reader.GetOrdinal("package_price")))
                                row.package_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_price")), typeof(decimal));

                            if (fieldNames.Contains("storage_price") && !reader.IsDBNull(reader.GetOrdinal("storage_price")))
                                row.storage_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"storage_price")), typeof(decimal));

                            if (fieldNames.Contains("total_price") && !reader.IsDBNull(reader.GetOrdinal("total_price")))
                                row.total_price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_price")), typeof(decimal));

                            if (fieldNames.Contains("summa") && !reader.IsDBNull(reader.GetOrdinal("summa")))
                                row.summa1 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summa")), typeof(decimal));

                            if (fieldNames.Contains("total_summa") && !reader.IsDBNull(reader.GetOrdinal("total_summa")))
                                row.total_summa = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_summa")), typeof(decimal));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_SELECT_FORM_RSS_ITEMSResult> OMC_SELECT_FORM_RSS_ITEMS (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id, System.Nullable<int> id, System.Nullable<bool> show_only_for_pricing)
        {

            List<OMC_SELECT_FORM_RSS_ITEMSResult> result = new List<OMC_SELECT_FORM_RSS_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_RSS_ITEMS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter show_only_for_pricingParameter = cmd.CreateParameter();
                    show_only_for_pricingParameter.ParameterName = "show_only_for_pricing";
                    show_only_for_pricingParameter.Direction = ParameterDirection.Input;
                    show_only_for_pricingParameter.DbType = DbType.Boolean;
                    if (show_only_for_pricing.HasValue)
                    {
                        show_only_for_pricingParameter.Value = show_only_for_pricing.Value;
                    }
                    else
                    {
                        show_only_for_pricingParameter.Size = -1;
                        show_only_for_pricingParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_only_for_pricingParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_RSS_ITEMSResult row = new OMC_SELECT_FORM_RSS_ITEMSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("form_id") && !reader.IsDBNull(reader.GetOrdinal("form_id")))
                                row.form_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_id")), typeof(int));
                            else
                                row.form_id = null;

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("subcontractor_id") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_id")))
                                row.subcontractor_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_id")), typeof(int));

                            if (fieldNames.Contains("subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_description")))
                                row.subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_description")), typeof(string));
                            else
                                row.subcontractor_description = null;

                            if (fieldNames.Contains("lno_id") && !reader.IsDBNull(reader.GetOrdinal("lno_id")))
                                row.lno_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_id")), typeof(int));

                            if (fieldNames.Contains("lno_description") && !reader.IsDBNull(reader.GetOrdinal("lno_description")))
                                row.lno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_description")), typeof(string));
                            else
                                row.lno_description = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("revision_number") && !reader.IsDBNull(reader.GetOrdinal("revision_number")))
                                row.revision_number = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_number")), typeof(int));
                            else
                                row.revision_number = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));
                            else
                                row.ekk_code = null;

                            if (fieldNames.Contains("price_manager_id") && !reader.IsDBNull(reader.GetOrdinal("price_manager_id")))
                                row.price_manager_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_id")), typeof(int));
                            else
                                row.price_manager_id = null;

                            if (fieldNames.Contains("price_manager_description") && !reader.IsDBNull(reader.GetOrdinal("price_manager_description")))
                                row.price_manager_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_description")), typeof(string));
                            else
                                row.price_manager_description = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("additional_properties") && !reader.IsDBNull(reader.GetOrdinal("additional_properties")))
                                row.additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_properties")), typeof(string));
                            else
                                row.additional_properties = null;

                            if (fieldNames.Contains("package_contents") && !reader.IsDBNull(reader.GetOrdinal("package_contents")))
                                row.package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_contents")), typeof(string));
                            else
                                row.package_contents = null;

                            if (fieldNames.Contains("manufacturer") && !reader.IsDBNull(reader.GetOrdinal("manufacturer")))
                                row.manufacturer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"manufacturer")), typeof(string));
                            else
                                row.manufacturer = null;

                            if (fieldNames.Contains("unit_id") && !reader.IsDBNull(reader.GetOrdinal("unit_id")))
                                row.unit_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_id")), typeof(int));

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("mass_per_unit") && !reader.IsDBNull(reader.GetOrdinal("mass_per_unit")))
                                row.mass_per_unit = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_per_unit")), typeof(double));
                            else
                                row.mass_per_unit = null;

                            if (fieldNames.Contains("mass_size") && !reader.IsDBNull(reader.GetOrdinal("mass_size")))
                                row.mass_size = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_size")), typeof(string));
                            else
                                row.mass_size = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("summary2") && !reader.IsDBNull(reader.GetOrdinal("summary2")))
                                row.summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary2")), typeof(string));
                            else
                                row.summary2 = null;

                            if (fieldNames.Contains("project_requirement_source") && !reader.IsDBNull(reader.GetOrdinal("project_requirement_source")))
                                row.project_requirement_source = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_requirement_source")), typeof(string));
                            else
                                row.project_requirement_source = null;

                            if (fieldNames.Contains("rss_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("rss_delivery_type_description")))
                                row.rss_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"rss_delivery_type_description")), typeof(string));
                            else
                                row.rss_delivery_type_description = null;

                            if (fieldNames.Contains("suggested_delivery_type_id") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_id")))
                                row.suggested_delivery_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_id")), typeof(int));
                            else
                                row.suggested_delivery_type_id = null;

                            if (fieldNames.Contains("suggested_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_description")))
                                row.suggested_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_description")), typeof(string));
                            else
                                row.suggested_delivery_type_description = null;

                            if (fieldNames.Contains("delivery_type_id") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_id")))
                                row.delivery_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_id")), typeof(int));
                            else
                                row.delivery_type_id = null;

                            if (fieldNames.Contains("delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_description")))
                                row.delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_description")), typeof(string));
                            else
                                row.delivery_type_description = null;

                            if (fieldNames.Contains("unsi_comment") && !reader.IsDBNull(reader.GetOrdinal("unsi_comment")))
                                row.unsi_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unsi_comment")), typeof(string));

                            if (fieldNames.Contains("dmtos_comment") && !reader.IsDBNull(reader.GetOrdinal("dmtos_comment")))
                                row.dmtos_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dmtos_comment")), typeof(string));
                            else
                                row.dmtos_comment = null;

                            if (fieldNames.Contains("chanhes_info") && !reader.IsDBNull(reader.GetOrdinal("chanhes_info")))
                                row.chanhes_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"chanhes_info")), typeof(string));

                            if (fieldNames.Contains("commit_changes_date") && !reader.IsDBNull(reader.GetOrdinal("commit_changes_date")))
                                row.commit_changes_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"commit_changes_date")), typeof(System.DateTime));
                            else
                                row.commit_changes_date = null;

                            if (fieldNames.Contains("project_requirement_state_id") && !reader.IsDBNull(reader.GetOrdinal("project_requirement_state_id")))
                                row.project_requirement_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_requirement_state_id")), typeof(int));

                            if (fieldNames.Contains("project_requirement_state_description") && !reader.IsDBNull(reader.GetOrdinal("project_requirement_state_description")))
                                row.project_requirement_state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_requirement_state_description")), typeof(string));
                            else
                                row.project_requirement_state_description = null;

                            if (fieldNames.Contains("for_pricing") && !reader.IsDBNull(reader.GetOrdinal("for_pricing")))
                                row.for_pricing = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"for_pricing")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_SELECT_FORM_RSS_ITEMSResult>> OMC_SELECT_FORM_RSS_ITEMSAsync (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id, System.Nullable<int> id, System.Nullable<bool> show_only_for_pricing)
        {

            List<OMC_SELECT_FORM_RSS_ITEMSResult> result = new List<OMC_SELECT_FORM_RSS_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_RSS_ITEMS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter show_only_for_pricingParameter = cmd.CreateParameter();
                    show_only_for_pricingParameter.ParameterName = "show_only_for_pricing";
                    show_only_for_pricingParameter.Direction = ParameterDirection.Input;
                    show_only_for_pricingParameter.DbType = DbType.Boolean;
                    if (show_only_for_pricing.HasValue)
                    {
                        show_only_for_pricingParameter.Value = show_only_for_pricing.Value;
                    }
                    else
                    {
                        show_only_for_pricingParameter.Size = -1;
                        show_only_for_pricingParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_only_for_pricingParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_RSS_ITEMSResult row = new OMC_SELECT_FORM_RSS_ITEMSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("form_id") && !reader.IsDBNull(reader.GetOrdinal("form_id")))
                                row.form_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_id")), typeof(int));
                            else
                                row.form_id = null;

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("subcontractor_id") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_id")))
                                row.subcontractor_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_id")), typeof(int));

                            if (fieldNames.Contains("subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_description")))
                                row.subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_description")), typeof(string));
                            else
                                row.subcontractor_description = null;

                            if (fieldNames.Contains("lno_id") && !reader.IsDBNull(reader.GetOrdinal("lno_id")))
                                row.lno_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_id")), typeof(int));

                            if (fieldNames.Contains("lno_description") && !reader.IsDBNull(reader.GetOrdinal("lno_description")))
                                row.lno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_description")), typeof(string));
                            else
                                row.lno_description = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("revision_number") && !reader.IsDBNull(reader.GetOrdinal("revision_number")))
                                row.revision_number = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_number")), typeof(int));
                            else
                                row.revision_number = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));
                            else
                                row.ekk_code = null;

                            if (fieldNames.Contains("price_manager_id") && !reader.IsDBNull(reader.GetOrdinal("price_manager_id")))
                                row.price_manager_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_id")), typeof(int));
                            else
                                row.price_manager_id = null;

                            if (fieldNames.Contains("price_manager_description") && !reader.IsDBNull(reader.GetOrdinal("price_manager_description")))
                                row.price_manager_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_description")), typeof(string));
                            else
                                row.price_manager_description = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("additional_properties") && !reader.IsDBNull(reader.GetOrdinal("additional_properties")))
                                row.additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_properties")), typeof(string));
                            else
                                row.additional_properties = null;

                            if (fieldNames.Contains("package_contents") && !reader.IsDBNull(reader.GetOrdinal("package_contents")))
                                row.package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_contents")), typeof(string));
                            else
                                row.package_contents = null;

                            if (fieldNames.Contains("manufacturer") && !reader.IsDBNull(reader.GetOrdinal("manufacturer")))
                                row.manufacturer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"manufacturer")), typeof(string));
                            else
                                row.manufacturer = null;

                            if (fieldNames.Contains("unit_id") && !reader.IsDBNull(reader.GetOrdinal("unit_id")))
                                row.unit_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_id")), typeof(int));

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("mass_per_unit") && !reader.IsDBNull(reader.GetOrdinal("mass_per_unit")))
                                row.mass_per_unit = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_per_unit")), typeof(double));
                            else
                                row.mass_per_unit = null;

                            if (fieldNames.Contains("mass_size") && !reader.IsDBNull(reader.GetOrdinal("mass_size")))
                                row.mass_size = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_size")), typeof(string));
                            else
                                row.mass_size = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("summary2") && !reader.IsDBNull(reader.GetOrdinal("summary2")))
                                row.summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary2")), typeof(string));
                            else
                                row.summary2 = null;

                            if (fieldNames.Contains("project_requirement_source") && !reader.IsDBNull(reader.GetOrdinal("project_requirement_source")))
                                row.project_requirement_source = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_requirement_source")), typeof(string));
                            else
                                row.project_requirement_source = null;

                            if (fieldNames.Contains("rss_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("rss_delivery_type_description")))
                                row.rss_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"rss_delivery_type_description")), typeof(string));
                            else
                                row.rss_delivery_type_description = null;

                            if (fieldNames.Contains("suggested_delivery_type_id") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_id")))
                                row.suggested_delivery_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_id")), typeof(int));
                            else
                                row.suggested_delivery_type_id = null;

                            if (fieldNames.Contains("suggested_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_description")))
                                row.suggested_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_description")), typeof(string));
                            else
                                row.suggested_delivery_type_description = null;

                            if (fieldNames.Contains("delivery_type_id") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_id")))
                                row.delivery_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_id")), typeof(int));
                            else
                                row.delivery_type_id = null;

                            if (fieldNames.Contains("delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_description")))
                                row.delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_description")), typeof(string));
                            else
                                row.delivery_type_description = null;

                            if (fieldNames.Contains("unsi_comment") && !reader.IsDBNull(reader.GetOrdinal("unsi_comment")))
                                row.unsi_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unsi_comment")), typeof(string));

                            if (fieldNames.Contains("dmtos_comment") && !reader.IsDBNull(reader.GetOrdinal("dmtos_comment")))
                                row.dmtos_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dmtos_comment")), typeof(string));
                            else
                                row.dmtos_comment = null;

                            if (fieldNames.Contains("chanhes_info") && !reader.IsDBNull(reader.GetOrdinal("chanhes_info")))
                                row.chanhes_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"chanhes_info")), typeof(string));

                            if (fieldNames.Contains("commit_changes_date") && !reader.IsDBNull(reader.GetOrdinal("commit_changes_date")))
                                row.commit_changes_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"commit_changes_date")), typeof(System.DateTime));
                            else
                                row.commit_changes_date = null;

                            if (fieldNames.Contains("project_requirement_state_id") && !reader.IsDBNull(reader.GetOrdinal("project_requirement_state_id")))
                                row.project_requirement_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_requirement_state_id")), typeof(int));

                            if (fieldNames.Contains("project_requirement_state_description") && !reader.IsDBNull(reader.GetOrdinal("project_requirement_state_description")))
                                row.project_requirement_state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_requirement_state_description")), typeof(string));
                            else
                                row.project_requirement_state_description = null;

                            if (fieldNames.Contains("for_pricing") && !reader.IsDBNull(reader.GetOrdinal("for_pricing")))
                                row.for_pricing = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"for_pricing")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_SELECT_FORM_RSS_ITEMS_DIFFResult> OMC_SELECT_FORM_RSS_ITEMS_DIFF (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id)
        {

            List<OMC_SELECT_FORM_RSS_ITEMS_DIFFResult> result = new List<OMC_SELECT_FORM_RSS_ITEMS_DIFFResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_RSS_ITEMS_DIFF";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_RSS_ITEMS_DIFFResult row = new OMC_SELECT_FORM_RSS_ITEMS_DIFFResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(string));
                            else
                                row.id = null;

                            if (fieldNames.Contains("form_item_id") && !reader.IsDBNull(reader.GetOrdinal("form_item_id")))
                                row.form_item_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_item_id")), typeof(int));
                            else
                                row.form_item_id = null;

                            if (fieldNames.Contains("prslno_id") && !reader.IsDBNull(reader.GetOrdinal("prslno_id")))
                                row.prslno_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prslno_id")), typeof(int));

                            if (fieldNames.Contains("form_id") && !reader.IsDBNull(reader.GetOrdinal("form_id")))
                                row.form_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_id")), typeof(int));
                            else
                                row.form_id = null;

                            if (fieldNames.Contains("project_id") && !reader.IsDBNull(reader.GetOrdinal("project_id")))
                                row.project_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_id")), typeof(int));

                            if (fieldNames.Contains("diff_type") && !reader.IsDBNull(reader.GetOrdinal("diff_type")))
                                row.diff_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"diff_type")), typeof(string));

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("last_object_description") && !reader.IsDBNull(reader.GetOrdinal("last_object_description")))
                                row.last_object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_object_description")), typeof(string));
                            else
                                row.last_object_description = null;

                            if (fieldNames.Contains("new_object_description") && !reader.IsDBNull(reader.GetOrdinal("new_object_description")))
                                row.new_object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_object_description")), typeof(string));
                            else
                                row.new_object_description = null;

                            if (fieldNames.Contains("color_object_description") && !reader.IsDBNull(reader.GetOrdinal("color_object_description")))
                                row.color_object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_object_description")), typeof(string));
                            else
                                row.color_object_description = null;

                            if (fieldNames.Contains("last_subobject_description") && !reader.IsDBNull(reader.GetOrdinal("last_subobject_description")))
                                row.last_subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_subobject_description")), typeof(string));
                            else
                                row.last_subobject_description = null;

                            if (fieldNames.Contains("new_subobject_description") && !reader.IsDBNull(reader.GetOrdinal("new_subobject_description")))
                                row.new_subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_subobject_description")), typeof(string));
                            else
                                row.new_subobject_description = null;

                            if (fieldNames.Contains("color_subobject_description") && !reader.IsDBNull(reader.GetOrdinal("color_subobject_description")))
                                row.color_subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_subobject_description")), typeof(string));
                            else
                                row.color_subobject_description = null;

                            if (fieldNames.Contains("last_subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("last_subcontractor_description")))
                                row.last_subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_subcontractor_description")), typeof(string));
                            else
                                row.last_subcontractor_description = null;

                            if (fieldNames.Contains("new_subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("new_subcontractor_description")))
                                row.new_subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_subcontractor_description")), typeof(string));
                            else
                                row.new_subcontractor_description = null;

                            if (fieldNames.Contains("color_subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("color_subcontractor_description")))
                                row.color_subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_subcontractor_description")), typeof(string));
                            else
                                row.color_subcontractor_description = null;

                            if (fieldNames.Contains("last_lno_description") && !reader.IsDBNull(reader.GetOrdinal("last_lno_description")))
                                row.last_lno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_lno_description")), typeof(string));
                            else
                                row.last_lno_description = null;

                            if (fieldNames.Contains("new_lno_description") && !reader.IsDBNull(reader.GetOrdinal("new_lno_description")))
                                row.new_lno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_lno_description")), typeof(string));
                            else
                                row.new_lno_description = null;

                            if (fieldNames.Contains("color_lno_description") && !reader.IsDBNull(reader.GetOrdinal("color_lno_description")))
                                row.color_lno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_lno_description")), typeof(string));
                            else
                                row.color_lno_description = null;

                            if (fieldNames.Contains("last_project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("last_project_documentation_code")))
                                row.last_project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_project_documentation_code")), typeof(string));
                            else
                                row.last_project_documentation_code = null;

                            if (fieldNames.Contains("new_project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("new_project_documentation_code")))
                                row.new_project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_project_documentation_code")), typeof(string));
                            else
                                row.new_project_documentation_code = null;

                            if (fieldNames.Contains("color_project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("color_project_documentation_code")))
                                row.color_project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_project_documentation_code")), typeof(string));
                            else
                                row.color_project_documentation_code = null;

                            if (fieldNames.Contains("last_revision_number") && !reader.IsDBNull(reader.GetOrdinal("last_revision_number")))
                                row.last_revision_number = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_revision_number")), typeof(int));
                            else
                                row.last_revision_number = null;

                            if (fieldNames.Contains("new_revision_number") && !reader.IsDBNull(reader.GetOrdinal("new_revision_number")))
                                row.new_revision_number = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_revision_number")), typeof(int));
                            else
                                row.new_revision_number = null;

                            if (fieldNames.Contains("color_revision_number") && !reader.IsDBNull(reader.GetOrdinal("color_revision_number")))
                                row.color_revision_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_revision_number")), typeof(string));
                            else
                                row.color_revision_number = null;

                            if (fieldNames.Contains("last_description") && !reader.IsDBNull(reader.GetOrdinal("last_description")))
                                row.last_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_description")), typeof(string));
                            else
                                row.last_description = null;

                            if (fieldNames.Contains("new_description") && !reader.IsDBNull(reader.GetOrdinal("new_description")))
                                row.new_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_description")), typeof(string));
                            else
                                row.new_description = null;

                            if (fieldNames.Contains("color_description") && !reader.IsDBNull(reader.GetOrdinal("color_description")))
                                row.color_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_description")), typeof(string));
                            else
                                row.color_description = null;

                            if (fieldNames.Contains("last_additional_properties") && !reader.IsDBNull(reader.GetOrdinal("last_additional_properties")))
                                row.last_additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_additional_properties")), typeof(string));
                            else
                                row.last_additional_properties = null;

                            if (fieldNames.Contains("new_additional_properties") && !reader.IsDBNull(reader.GetOrdinal("new_additional_properties")))
                                row.new_additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_additional_properties")), typeof(string));
                            else
                                row.new_additional_properties = null;

                            if (fieldNames.Contains("color_additional_properties") && !reader.IsDBNull(reader.GetOrdinal("color_additional_properties")))
                                row.color_additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_additional_properties")), typeof(string));
                            else
                                row.color_additional_properties = null;

                            if (fieldNames.Contains("last_package_contents") && !reader.IsDBNull(reader.GetOrdinal("last_package_contents")))
                                row.last_package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_package_contents")), typeof(string));
                            else
                                row.last_package_contents = null;

                            if (fieldNames.Contains("new_package_contents") && !reader.IsDBNull(reader.GetOrdinal("new_package_contents")))
                                row.new_package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_package_contents")), typeof(string));
                            else
                                row.new_package_contents = null;

                            if (fieldNames.Contains("color_package_contents") && !reader.IsDBNull(reader.GetOrdinal("color_package_contents")))
                                row.color_package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_package_contents")), typeof(string));
                            else
                                row.color_package_contents = null;

                            if (fieldNames.Contains("last_manufacturer") && !reader.IsDBNull(reader.GetOrdinal("last_manufacturer")))
                                row.last_manufacturer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_manufacturer")), typeof(string));
                            else
                                row.last_manufacturer = null;

                            if (fieldNames.Contains("new_manufacturer") && !reader.IsDBNull(reader.GetOrdinal("new_manufacturer")))
                                row.new_manufacturer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_manufacturer")), typeof(string));
                            else
                                row.new_manufacturer = null;

                            if (fieldNames.Contains("color_manufacturer") && !reader.IsDBNull(reader.GetOrdinal("color_manufacturer")))
                                row.color_manufacturer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_manufacturer")), typeof(string));
                            else
                                row.color_manufacturer = null;

                            if (fieldNames.Contains("last_unit_description") && !reader.IsDBNull(reader.GetOrdinal("last_unit_description")))
                                row.last_unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_unit_description")), typeof(string));
                            else
                                row.last_unit_description = null;

                            if (fieldNames.Contains("new_unit_description") && !reader.IsDBNull(reader.GetOrdinal("new_unit_description")))
                                row.new_unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_unit_description")), typeof(string));
                            else
                                row.new_unit_description = null;

                            if (fieldNames.Contains("color_unit_description") && !reader.IsDBNull(reader.GetOrdinal("color_unit_description")))
                                row.color_unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_unit_description")), typeof(string));
                            else
                                row.color_unit_description = null;

                            if (fieldNames.Contains("last_quantity") && !reader.IsDBNull(reader.GetOrdinal("last_quantity")))
                                row.last_quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_quantity")), typeof(double));
                            else
                                row.last_quantity = null;

                            if (fieldNames.Contains("new_quantity") && !reader.IsDBNull(reader.GetOrdinal("new_quantity")))
                                row.new_quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_quantity")), typeof(double));
                            else
                                row.new_quantity = null;

                            if (fieldNames.Contains("color_quantity") && !reader.IsDBNull(reader.GetOrdinal("color_quantity")))
                                row.color_quantity = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_quantity")), typeof(string));
                            else
                                row.color_quantity = null;

                            if (fieldNames.Contains("last_mass_per_unit") && !reader.IsDBNull(reader.GetOrdinal("last_mass_per_unit")))
                                row.last_mass_per_unit = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_mass_per_unit")), typeof(double));
                            else
                                row.last_mass_per_unit = null;

                            if (fieldNames.Contains("new_mass_per_unit") && !reader.IsDBNull(reader.GetOrdinal("new_mass_per_unit")))
                                row.new_mass_per_unit = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_mass_per_unit")), typeof(double));
                            else
                                row.new_mass_per_unit = null;

                            if (fieldNames.Contains("color_mass_per_unit") && !reader.IsDBNull(reader.GetOrdinal("color_mass_per_unit")))
                                row.color_mass_per_unit = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_mass_per_unit")), typeof(string));
                            else
                                row.color_mass_per_unit = null;

                            if (fieldNames.Contains("last_mass_size") && !reader.IsDBNull(reader.GetOrdinal("last_mass_size")))
                                row.last_mass_size = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_mass_size")), typeof(string));
                            else
                                row.last_mass_size = null;

                            if (fieldNames.Contains("new_mass_size") && !reader.IsDBNull(reader.GetOrdinal("new_mass_size")))
                                row.new_mass_size = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_mass_size")), typeof(string));
                            else
                                row.new_mass_size = null;

                            if (fieldNames.Contains("color_mass_size") && !reader.IsDBNull(reader.GetOrdinal("color_mass_size")))
                                row.color_mass_size = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_mass_size")), typeof(string));
                            else
                                row.color_mass_size = null;

                            if (fieldNames.Contains("last_summary") && !reader.IsDBNull(reader.GetOrdinal("last_summary")))
                                row.last_summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_summary")), typeof(string));
                            else
                                row.last_summary = null;

                            if (fieldNames.Contains("new_summary") && !reader.IsDBNull(reader.GetOrdinal("new_summary")))
                                row.new_summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_summary")), typeof(string));
                            else
                                row.new_summary = null;

                            if (fieldNames.Contains("color_summary") && !reader.IsDBNull(reader.GetOrdinal("color_summary")))
                                row.color_summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_summary")), typeof(string));
                            else
                                row.color_summary = null;

                            if (fieldNames.Contains("last_summary2") && !reader.IsDBNull(reader.GetOrdinal("last_summary2")))
                                row.last_summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_summary2")), typeof(string));
                            else
                                row.last_summary2 = null;

                            if (fieldNames.Contains("new_summary2") && !reader.IsDBNull(reader.GetOrdinal("new_summary2")))
                                row.new_summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_summary2")), typeof(string));
                            else
                                row.new_summary2 = null;

                            if (fieldNames.Contains("color_summary2") && !reader.IsDBNull(reader.GetOrdinal("color_summary2")))
                                row.color_summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_summary2")), typeof(string));
                            else
                                row.color_summary2 = null;

                            if (fieldNames.Contains("last_project_requirement_source") && !reader.IsDBNull(reader.GetOrdinal("last_project_requirement_source")))
                                row.last_project_requirement_source = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_project_requirement_source")), typeof(string));
                            else
                                row.last_project_requirement_source = null;

                            if (fieldNames.Contains("new_project_requirement_source") && !reader.IsDBNull(reader.GetOrdinal("new_project_requirement_source")))
                                row.new_project_requirement_source = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_project_requirement_source")), typeof(string));
                            else
                                row.new_project_requirement_source = null;

                            if (fieldNames.Contains("color_project_requirement_source") && !reader.IsDBNull(reader.GetOrdinal("color_project_requirement_source")))
                                row.color_project_requirement_source = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_project_requirement_source")), typeof(string));
                            else
                                row.color_project_requirement_source = null;

                            if (fieldNames.Contains("last_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("last_delivery_type_description")))
                                row.last_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_delivery_type_description")), typeof(string));
                            else
                                row.last_delivery_type_description = null;

                            if (fieldNames.Contains("new_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("new_delivery_type_description")))
                                row.new_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_delivery_type_description")), typeof(string));
                            else
                                row.new_delivery_type_description = null;

                            if (fieldNames.Contains("color_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("color_delivery_type_description")))
                                row.color_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_delivery_type_description")), typeof(string));
                            else
                                row.color_delivery_type_description = null;

                            if (fieldNames.Contains("last_project_requirement_state_description") && !reader.IsDBNull(reader.GetOrdinal("last_project_requirement_state_description")))
                                row.last_project_requirement_state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_project_requirement_state_description")), typeof(string));
                            else
                                row.last_project_requirement_state_description = null;

                            if (fieldNames.Contains("new_project_requirement_state_description") && !reader.IsDBNull(reader.GetOrdinal("new_project_requirement_state_description")))
                                row.new_project_requirement_state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_project_requirement_state_description")), typeof(string));
                            else
                                row.new_project_requirement_state_description = null;

                            if (fieldNames.Contains("color_project_requirement_state_description") && !reader.IsDBNull(reader.GetOrdinal("color_project_requirement_state_description")))
                                row.color_project_requirement_state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_project_requirement_state_description")), typeof(string));
                            else
                                row.color_project_requirement_state_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_SELECT_FORM_RSS_ITEMS_DIFFResult>> OMC_SELECT_FORM_RSS_ITEMS_DIFFAsync (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id)
        {

            List<OMC_SELECT_FORM_RSS_ITEMS_DIFFResult> result = new List<OMC_SELECT_FORM_RSS_ITEMS_DIFFResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_RSS_ITEMS_DIFF";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_RSS_ITEMS_DIFFResult row = new OMC_SELECT_FORM_RSS_ITEMS_DIFFResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(string));
                            else
                                row.id = null;

                            if (fieldNames.Contains("form_item_id") && !reader.IsDBNull(reader.GetOrdinal("form_item_id")))
                                row.form_item_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_item_id")), typeof(int));
                            else
                                row.form_item_id = null;

                            if (fieldNames.Contains("prslno_id") && !reader.IsDBNull(reader.GetOrdinal("prslno_id")))
                                row.prslno_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prslno_id")), typeof(int));

                            if (fieldNames.Contains("form_id") && !reader.IsDBNull(reader.GetOrdinal("form_id")))
                                row.form_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_id")), typeof(int));
                            else
                                row.form_id = null;

                            if (fieldNames.Contains("project_id") && !reader.IsDBNull(reader.GetOrdinal("project_id")))
                                row.project_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_id")), typeof(int));

                            if (fieldNames.Contains("diff_type") && !reader.IsDBNull(reader.GetOrdinal("diff_type")))
                                row.diff_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"diff_type")), typeof(string));

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("last_object_description") && !reader.IsDBNull(reader.GetOrdinal("last_object_description")))
                                row.last_object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_object_description")), typeof(string));
                            else
                                row.last_object_description = null;

                            if (fieldNames.Contains("new_object_description") && !reader.IsDBNull(reader.GetOrdinal("new_object_description")))
                                row.new_object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_object_description")), typeof(string));
                            else
                                row.new_object_description = null;

                            if (fieldNames.Contains("color_object_description") && !reader.IsDBNull(reader.GetOrdinal("color_object_description")))
                                row.color_object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_object_description")), typeof(string));
                            else
                                row.color_object_description = null;

                            if (fieldNames.Contains("last_subobject_description") && !reader.IsDBNull(reader.GetOrdinal("last_subobject_description")))
                                row.last_subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_subobject_description")), typeof(string));
                            else
                                row.last_subobject_description = null;

                            if (fieldNames.Contains("new_subobject_description") && !reader.IsDBNull(reader.GetOrdinal("new_subobject_description")))
                                row.new_subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_subobject_description")), typeof(string));
                            else
                                row.new_subobject_description = null;

                            if (fieldNames.Contains("color_subobject_description") && !reader.IsDBNull(reader.GetOrdinal("color_subobject_description")))
                                row.color_subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_subobject_description")), typeof(string));
                            else
                                row.color_subobject_description = null;

                            if (fieldNames.Contains("last_subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("last_subcontractor_description")))
                                row.last_subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_subcontractor_description")), typeof(string));
                            else
                                row.last_subcontractor_description = null;

                            if (fieldNames.Contains("new_subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("new_subcontractor_description")))
                                row.new_subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_subcontractor_description")), typeof(string));
                            else
                                row.new_subcontractor_description = null;

                            if (fieldNames.Contains("color_subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("color_subcontractor_description")))
                                row.color_subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_subcontractor_description")), typeof(string));
                            else
                                row.color_subcontractor_description = null;

                            if (fieldNames.Contains("last_lno_description") && !reader.IsDBNull(reader.GetOrdinal("last_lno_description")))
                                row.last_lno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_lno_description")), typeof(string));
                            else
                                row.last_lno_description = null;

                            if (fieldNames.Contains("new_lno_description") && !reader.IsDBNull(reader.GetOrdinal("new_lno_description")))
                                row.new_lno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_lno_description")), typeof(string));
                            else
                                row.new_lno_description = null;

                            if (fieldNames.Contains("color_lno_description") && !reader.IsDBNull(reader.GetOrdinal("color_lno_description")))
                                row.color_lno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_lno_description")), typeof(string));
                            else
                                row.color_lno_description = null;

                            if (fieldNames.Contains("last_project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("last_project_documentation_code")))
                                row.last_project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_project_documentation_code")), typeof(string));
                            else
                                row.last_project_documentation_code = null;

                            if (fieldNames.Contains("new_project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("new_project_documentation_code")))
                                row.new_project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_project_documentation_code")), typeof(string));
                            else
                                row.new_project_documentation_code = null;

                            if (fieldNames.Contains("color_project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("color_project_documentation_code")))
                                row.color_project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_project_documentation_code")), typeof(string));
                            else
                                row.color_project_documentation_code = null;

                            if (fieldNames.Contains("last_revision_number") && !reader.IsDBNull(reader.GetOrdinal("last_revision_number")))
                                row.last_revision_number = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_revision_number")), typeof(int));
                            else
                                row.last_revision_number = null;

                            if (fieldNames.Contains("new_revision_number") && !reader.IsDBNull(reader.GetOrdinal("new_revision_number")))
                                row.new_revision_number = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_revision_number")), typeof(int));
                            else
                                row.new_revision_number = null;

                            if (fieldNames.Contains("color_revision_number") && !reader.IsDBNull(reader.GetOrdinal("color_revision_number")))
                                row.color_revision_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_revision_number")), typeof(string));
                            else
                                row.color_revision_number = null;

                            if (fieldNames.Contains("last_description") && !reader.IsDBNull(reader.GetOrdinal("last_description")))
                                row.last_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_description")), typeof(string));
                            else
                                row.last_description = null;

                            if (fieldNames.Contains("new_description") && !reader.IsDBNull(reader.GetOrdinal("new_description")))
                                row.new_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_description")), typeof(string));
                            else
                                row.new_description = null;

                            if (fieldNames.Contains("color_description") && !reader.IsDBNull(reader.GetOrdinal("color_description")))
                                row.color_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_description")), typeof(string));
                            else
                                row.color_description = null;

                            if (fieldNames.Contains("last_additional_properties") && !reader.IsDBNull(reader.GetOrdinal("last_additional_properties")))
                                row.last_additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_additional_properties")), typeof(string));
                            else
                                row.last_additional_properties = null;

                            if (fieldNames.Contains("new_additional_properties") && !reader.IsDBNull(reader.GetOrdinal("new_additional_properties")))
                                row.new_additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_additional_properties")), typeof(string));
                            else
                                row.new_additional_properties = null;

                            if (fieldNames.Contains("color_additional_properties") && !reader.IsDBNull(reader.GetOrdinal("color_additional_properties")))
                                row.color_additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_additional_properties")), typeof(string));
                            else
                                row.color_additional_properties = null;

                            if (fieldNames.Contains("last_package_contents") && !reader.IsDBNull(reader.GetOrdinal("last_package_contents")))
                                row.last_package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_package_contents")), typeof(string));
                            else
                                row.last_package_contents = null;

                            if (fieldNames.Contains("new_package_contents") && !reader.IsDBNull(reader.GetOrdinal("new_package_contents")))
                                row.new_package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_package_contents")), typeof(string));
                            else
                                row.new_package_contents = null;

                            if (fieldNames.Contains("color_package_contents") && !reader.IsDBNull(reader.GetOrdinal("color_package_contents")))
                                row.color_package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_package_contents")), typeof(string));
                            else
                                row.color_package_contents = null;

                            if (fieldNames.Contains("last_manufacturer") && !reader.IsDBNull(reader.GetOrdinal("last_manufacturer")))
                                row.last_manufacturer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_manufacturer")), typeof(string));
                            else
                                row.last_manufacturer = null;

                            if (fieldNames.Contains("new_manufacturer") && !reader.IsDBNull(reader.GetOrdinal("new_manufacturer")))
                                row.new_manufacturer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_manufacturer")), typeof(string));
                            else
                                row.new_manufacturer = null;

                            if (fieldNames.Contains("color_manufacturer") && !reader.IsDBNull(reader.GetOrdinal("color_manufacturer")))
                                row.color_manufacturer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_manufacturer")), typeof(string));
                            else
                                row.color_manufacturer = null;

                            if (fieldNames.Contains("last_unit_description") && !reader.IsDBNull(reader.GetOrdinal("last_unit_description")))
                                row.last_unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_unit_description")), typeof(string));
                            else
                                row.last_unit_description = null;

                            if (fieldNames.Contains("new_unit_description") && !reader.IsDBNull(reader.GetOrdinal("new_unit_description")))
                                row.new_unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_unit_description")), typeof(string));
                            else
                                row.new_unit_description = null;

                            if (fieldNames.Contains("color_unit_description") && !reader.IsDBNull(reader.GetOrdinal("color_unit_description")))
                                row.color_unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_unit_description")), typeof(string));
                            else
                                row.color_unit_description = null;

                            if (fieldNames.Contains("last_quantity") && !reader.IsDBNull(reader.GetOrdinal("last_quantity")))
                                row.last_quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_quantity")), typeof(double));
                            else
                                row.last_quantity = null;

                            if (fieldNames.Contains("new_quantity") && !reader.IsDBNull(reader.GetOrdinal("new_quantity")))
                                row.new_quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_quantity")), typeof(double));
                            else
                                row.new_quantity = null;

                            if (fieldNames.Contains("color_quantity") && !reader.IsDBNull(reader.GetOrdinal("color_quantity")))
                                row.color_quantity = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_quantity")), typeof(string));
                            else
                                row.color_quantity = null;

                            if (fieldNames.Contains("last_mass_per_unit") && !reader.IsDBNull(reader.GetOrdinal("last_mass_per_unit")))
                                row.last_mass_per_unit = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_mass_per_unit")), typeof(double));
                            else
                                row.last_mass_per_unit = null;

                            if (fieldNames.Contains("new_mass_per_unit") && !reader.IsDBNull(reader.GetOrdinal("new_mass_per_unit")))
                                row.new_mass_per_unit = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_mass_per_unit")), typeof(double));
                            else
                                row.new_mass_per_unit = null;

                            if (fieldNames.Contains("color_mass_per_unit") && !reader.IsDBNull(reader.GetOrdinal("color_mass_per_unit")))
                                row.color_mass_per_unit = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_mass_per_unit")), typeof(string));
                            else
                                row.color_mass_per_unit = null;

                            if (fieldNames.Contains("last_mass_size") && !reader.IsDBNull(reader.GetOrdinal("last_mass_size")))
                                row.last_mass_size = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_mass_size")), typeof(string));
                            else
                                row.last_mass_size = null;

                            if (fieldNames.Contains("new_mass_size") && !reader.IsDBNull(reader.GetOrdinal("new_mass_size")))
                                row.new_mass_size = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_mass_size")), typeof(string));
                            else
                                row.new_mass_size = null;

                            if (fieldNames.Contains("color_mass_size") && !reader.IsDBNull(reader.GetOrdinal("color_mass_size")))
                                row.color_mass_size = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_mass_size")), typeof(string));
                            else
                                row.color_mass_size = null;

                            if (fieldNames.Contains("last_summary") && !reader.IsDBNull(reader.GetOrdinal("last_summary")))
                                row.last_summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_summary")), typeof(string));
                            else
                                row.last_summary = null;

                            if (fieldNames.Contains("new_summary") && !reader.IsDBNull(reader.GetOrdinal("new_summary")))
                                row.new_summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_summary")), typeof(string));
                            else
                                row.new_summary = null;

                            if (fieldNames.Contains("color_summary") && !reader.IsDBNull(reader.GetOrdinal("color_summary")))
                                row.color_summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_summary")), typeof(string));
                            else
                                row.color_summary = null;

                            if (fieldNames.Contains("last_summary2") && !reader.IsDBNull(reader.GetOrdinal("last_summary2")))
                                row.last_summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_summary2")), typeof(string));
                            else
                                row.last_summary2 = null;

                            if (fieldNames.Contains("new_summary2") && !reader.IsDBNull(reader.GetOrdinal("new_summary2")))
                                row.new_summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_summary2")), typeof(string));
                            else
                                row.new_summary2 = null;

                            if (fieldNames.Contains("color_summary2") && !reader.IsDBNull(reader.GetOrdinal("color_summary2")))
                                row.color_summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_summary2")), typeof(string));
                            else
                                row.color_summary2 = null;

                            if (fieldNames.Contains("last_project_requirement_source") && !reader.IsDBNull(reader.GetOrdinal("last_project_requirement_source")))
                                row.last_project_requirement_source = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_project_requirement_source")), typeof(string));
                            else
                                row.last_project_requirement_source = null;

                            if (fieldNames.Contains("new_project_requirement_source") && !reader.IsDBNull(reader.GetOrdinal("new_project_requirement_source")))
                                row.new_project_requirement_source = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_project_requirement_source")), typeof(string));
                            else
                                row.new_project_requirement_source = null;

                            if (fieldNames.Contains("color_project_requirement_source") && !reader.IsDBNull(reader.GetOrdinal("color_project_requirement_source")))
                                row.color_project_requirement_source = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_project_requirement_source")), typeof(string));
                            else
                                row.color_project_requirement_source = null;

                            if (fieldNames.Contains("last_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("last_delivery_type_description")))
                                row.last_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_delivery_type_description")), typeof(string));
                            else
                                row.last_delivery_type_description = null;

                            if (fieldNames.Contains("new_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("new_delivery_type_description")))
                                row.new_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_delivery_type_description")), typeof(string));
                            else
                                row.new_delivery_type_description = null;

                            if (fieldNames.Contains("color_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("color_delivery_type_description")))
                                row.color_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_delivery_type_description")), typeof(string));
                            else
                                row.color_delivery_type_description = null;

                            if (fieldNames.Contains("last_project_requirement_state_description") && !reader.IsDBNull(reader.GetOrdinal("last_project_requirement_state_description")))
                                row.last_project_requirement_state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_project_requirement_state_description")), typeof(string));
                            else
                                row.last_project_requirement_state_description = null;

                            if (fieldNames.Contains("new_project_requirement_state_description") && !reader.IsDBNull(reader.GetOrdinal("new_project_requirement_state_description")))
                                row.new_project_requirement_state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_project_requirement_state_description")), typeof(string));
                            else
                                row.new_project_requirement_state_description = null;

                            if (fieldNames.Contains("color_project_requirement_state_description") && !reader.IsDBNull(reader.GetOrdinal("color_project_requirement_state_description")))
                                row.color_project_requirement_state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_project_requirement_state_description")), typeof(string));
                            else
                                row.color_project_requirement_state_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_SELECT_FORM_SVR_ITEMSResult> OMC_SELECT_FORM_SVR_ITEMS (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id, System.Nullable<int> id, System.Nullable<bool> show_only_for_pricing)
        {

            List<OMC_SELECT_FORM_SVR_ITEMSResult> result = new List<OMC_SELECT_FORM_SVR_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_SVR_ITEMS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter show_only_for_pricingParameter = cmd.CreateParameter();
                    show_only_for_pricingParameter.ParameterName = "show_only_for_pricing";
                    show_only_for_pricingParameter.Direction = ParameterDirection.Input;
                    show_only_for_pricingParameter.DbType = DbType.Boolean;
                    if (show_only_for_pricing.HasValue)
                    {
                        show_only_for_pricingParameter.Value = show_only_for_pricing.Value;
                    }
                    else
                    {
                        show_only_for_pricingParameter.Size = -1;
                        show_only_for_pricingParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_only_for_pricingParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_SVR_ITEMSResult row = new OMC_SELECT_FORM_SVR_ITEMSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("form_id") && !reader.IsDBNull(reader.GetOrdinal("form_id")))
                                row.form_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_id")), typeof(int));

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));

                            if (fieldNames.Contains("price_manager_id") && !reader.IsDBNull(reader.GetOrdinal("price_manager_id")))
                                row.price_manager_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_id")), typeof(int));
                            else
                                row.price_manager_id = null;

                            if (fieldNames.Contains("price_manager_description") && !reader.IsDBNull(reader.GetOrdinal("price_manager_description")))
                                row.price_manager_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_description")), typeof(string));
                            else
                                row.price_manager_description = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_id") && !reader.IsDBNull(reader.GetOrdinal("unit_id")))
                                row.unit_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_id")), typeof(int));

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal("price")))
                                row.price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(double));
                            else
                                row.price = null;

                            if (fieldNames.Contains("summa") && !reader.IsDBNull(reader.GetOrdinal("summa")))
                                row.summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summa")), typeof(double));
                            else
                                row.summa = null;

                            if (fieldNames.Contains("turnover") && !reader.IsDBNull(reader.GetOrdinal("turnover")))
                                row.turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"turnover")), typeof(string));
                            else
                                row.turnover = null;

                            if (fieldNames.Contains("phase") && !reader.IsDBNull(reader.GetOrdinal("phase")))
                                row.phase = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phase")), typeof(string));
                            else
                                row.phase = null;

                            if (fieldNames.Contains("svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("svr_delivery_type")))
                                row.svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"svr_delivery_type")), typeof(string));
                            else
                                row.svr_delivery_type = null;

                            if (fieldNames.Contains("add_info") && !reader.IsDBNull(reader.GetOrdinal("add_info")))
                                row.add_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"add_info")), typeof(string));
                            else
                                row.add_info = null;

                            if (fieldNames.Contains("suggested_delivery_type_id") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_id")))
                                row.suggested_delivery_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_id")), typeof(int));
                            else
                                row.suggested_delivery_type_id = null;

                            if (fieldNames.Contains("suggested_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_description")))
                                row.suggested_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_description")), typeof(string));
                            else
                                row.suggested_delivery_type_description = null;

                            if (fieldNames.Contains("delivery_type_id") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_id")))
                                row.delivery_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_id")), typeof(int));
                            else
                                row.delivery_type_id = null;

                            if (fieldNames.Contains("delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_description")))
                                row.delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_description")), typeof(string));
                            else
                                row.delivery_type_description = null;

                            if (fieldNames.Contains("unsi_comment") && !reader.IsDBNull(reader.GetOrdinal("unsi_comment")))
                                row.unsi_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unsi_comment")), typeof(string));

                            if (fieldNames.Contains("dmtos_comment") && !reader.IsDBNull(reader.GetOrdinal("dmtos_comment")))
                                row.dmtos_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dmtos_comment")), typeof(string));
                            else
                                row.dmtos_comment = null;

                            if (fieldNames.Contains("changes_info") && !reader.IsDBNull(reader.GetOrdinal("changes_info")))
                                row.changes_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"changes_info")), typeof(string));
                            else
                                row.changes_info = null;

                            if (fieldNames.Contains("commit_changes_date") && !reader.IsDBNull(reader.GetOrdinal("commit_changes_date")))
                                row.commit_changes_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"commit_changes_date")), typeof(System.DateTime));
                            else
                                row.commit_changes_date = null;

                            if (fieldNames.Contains("for_pricing") && !reader.IsDBNull(reader.GetOrdinal("for_pricing")))
                                row.for_pricing = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"for_pricing")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_SELECT_FORM_SVR_ITEMSResult>> OMC_SELECT_FORM_SVR_ITEMSAsync (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id, System.Nullable<int> id, System.Nullable<bool> show_only_for_pricing)
        {

            List<OMC_SELECT_FORM_SVR_ITEMSResult> result = new List<OMC_SELECT_FORM_SVR_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_SVR_ITEMS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter show_only_for_pricingParameter = cmd.CreateParameter();
                    show_only_for_pricingParameter.ParameterName = "show_only_for_pricing";
                    show_only_for_pricingParameter.Direction = ParameterDirection.Input;
                    show_only_for_pricingParameter.DbType = DbType.Boolean;
                    if (show_only_for_pricing.HasValue)
                    {
                        show_only_for_pricingParameter.Value = show_only_for_pricing.Value;
                    }
                    else
                    {
                        show_only_for_pricingParameter.Size = -1;
                        show_only_for_pricingParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_only_for_pricingParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_SVR_ITEMSResult row = new OMC_SELECT_FORM_SVR_ITEMSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("form_id") && !reader.IsDBNull(reader.GetOrdinal("form_id")))
                                row.form_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_id")), typeof(int));

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));

                            if (fieldNames.Contains("price_manager_id") && !reader.IsDBNull(reader.GetOrdinal("price_manager_id")))
                                row.price_manager_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_id")), typeof(int));
                            else
                                row.price_manager_id = null;

                            if (fieldNames.Contains("price_manager_description") && !reader.IsDBNull(reader.GetOrdinal("price_manager_description")))
                                row.price_manager_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_description")), typeof(string));
                            else
                                row.price_manager_description = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_id") && !reader.IsDBNull(reader.GetOrdinal("unit_id")))
                                row.unit_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_id")), typeof(int));

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal("price")))
                                row.price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(double));
                            else
                                row.price = null;

                            if (fieldNames.Contains("summa") && !reader.IsDBNull(reader.GetOrdinal("summa")))
                                row.summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summa")), typeof(double));
                            else
                                row.summa = null;

                            if (fieldNames.Contains("turnover") && !reader.IsDBNull(reader.GetOrdinal("turnover")))
                                row.turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"turnover")), typeof(string));
                            else
                                row.turnover = null;

                            if (fieldNames.Contains("phase") && !reader.IsDBNull(reader.GetOrdinal("phase")))
                                row.phase = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phase")), typeof(string));
                            else
                                row.phase = null;

                            if (fieldNames.Contains("svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("svr_delivery_type")))
                                row.svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"svr_delivery_type")), typeof(string));
                            else
                                row.svr_delivery_type = null;

                            if (fieldNames.Contains("add_info") && !reader.IsDBNull(reader.GetOrdinal("add_info")))
                                row.add_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"add_info")), typeof(string));
                            else
                                row.add_info = null;

                            if (fieldNames.Contains("suggested_delivery_type_id") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_id")))
                                row.suggested_delivery_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_id")), typeof(int));
                            else
                                row.suggested_delivery_type_id = null;

                            if (fieldNames.Contains("suggested_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_description")))
                                row.suggested_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_description")), typeof(string));
                            else
                                row.suggested_delivery_type_description = null;

                            if (fieldNames.Contains("delivery_type_id") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_id")))
                                row.delivery_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_id")), typeof(int));
                            else
                                row.delivery_type_id = null;

                            if (fieldNames.Contains("delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_description")))
                                row.delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_description")), typeof(string));
                            else
                                row.delivery_type_description = null;

                            if (fieldNames.Contains("unsi_comment") && !reader.IsDBNull(reader.GetOrdinal("unsi_comment")))
                                row.unsi_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unsi_comment")), typeof(string));

                            if (fieldNames.Contains("dmtos_comment") && !reader.IsDBNull(reader.GetOrdinal("dmtos_comment")))
                                row.dmtos_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dmtos_comment")), typeof(string));
                            else
                                row.dmtos_comment = null;

                            if (fieldNames.Contains("changes_info") && !reader.IsDBNull(reader.GetOrdinal("changes_info")))
                                row.changes_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"changes_info")), typeof(string));
                            else
                                row.changes_info = null;

                            if (fieldNames.Contains("commit_changes_date") && !reader.IsDBNull(reader.GetOrdinal("commit_changes_date")))
                                row.commit_changes_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"commit_changes_date")), typeof(System.DateTime));
                            else
                                row.commit_changes_date = null;

                            if (fieldNames.Contains("for_pricing") && !reader.IsDBNull(reader.GetOrdinal("for_pricing")))
                                row.for_pricing = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"for_pricing")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_SELECT_FORM_SVR_ITEMS_DIFFResult> OMC_SELECT_FORM_SVR_ITEMS_DIFF (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id)
        {

            List<OMC_SELECT_FORM_SVR_ITEMS_DIFFResult> result = new List<OMC_SELECT_FORM_SVR_ITEMS_DIFFResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_SVR_ITEMS_DIFF";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_SVR_ITEMS_DIFFResult row = new OMC_SELECT_FORM_SVR_ITEMS_DIFFResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(string));

                            if (fieldNames.Contains("form_item_id") && !reader.IsDBNull(reader.GetOrdinal("form_item_id")))
                                row.form_item_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_item_id")), typeof(int));
                            else
                                row.form_item_id = null;

                            if (fieldNames.Contains("svr_item_id") && !reader.IsDBNull(reader.GetOrdinal("svr_item_id")))
                                row.svr_item_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"svr_item_id")), typeof(int));
                            else
                                row.svr_item_id = null;

                            if (fieldNames.Contains("form_id") && !reader.IsDBNull(reader.GetOrdinal("form_id")))
                                row.form_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_id")), typeof(int));
                            else
                                row.form_id = null;

                            if (fieldNames.Contains("svr_id") && !reader.IsDBNull(reader.GetOrdinal("svr_id")))
                                row.svr_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"svr_id")), typeof(int));
                            else
                                row.svr_id = null;

                            if (fieldNames.Contains("diff_type") && !reader.IsDBNull(reader.GetOrdinal("diff_type")))
                                row.diff_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"diff_type")), typeof(string));

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("phase") && !reader.IsDBNull(reader.GetOrdinal("phase")))
                                row.phase = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phase")), typeof(string));
                            else
                                row.phase = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("last_unit_description") && !reader.IsDBNull(reader.GetOrdinal("last_unit_description")))
                                row.last_unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_unit_description")), typeof(string));
                            else
                                row.last_unit_description = null;

                            if (fieldNames.Contains("new_unit_description") && !reader.IsDBNull(reader.GetOrdinal("new_unit_description")))
                                row.new_unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_unit_description")), typeof(string));
                            else
                                row.new_unit_description = null;

                            if (fieldNames.Contains("color_unit_description") && !reader.IsDBNull(reader.GetOrdinal("color_unit_description")))
                                row.color_unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_unit_description")), typeof(string));
                            else
                                row.color_unit_description = null;

                            if (fieldNames.Contains("last_quantity") && !reader.IsDBNull(reader.GetOrdinal("last_quantity")))
                                row.last_quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_quantity")), typeof(double));
                            else
                                row.last_quantity = null;

                            if (fieldNames.Contains("new_quantity") && !reader.IsDBNull(reader.GetOrdinal("new_quantity")))
                                row.new_quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_quantity")), typeof(double));
                            else
                                row.new_quantity = null;

                            if (fieldNames.Contains("color_quantity") && !reader.IsDBNull(reader.GetOrdinal("color_quantity")))
                                row.color_quantity = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_quantity")), typeof(string));
                            else
                                row.color_quantity = null;

                            if (fieldNames.Contains("last_price") && !reader.IsDBNull(reader.GetOrdinal("last_price")))
                                row.last_price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_price")), typeof(double));
                            else
                                row.last_price = null;

                            if (fieldNames.Contains("new_price") && !reader.IsDBNull(reader.GetOrdinal("new_price")))
                                row.new_price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_price")), typeof(double));
                            else
                                row.new_price = null;

                            if (fieldNames.Contains("color_price") && !reader.IsDBNull(reader.GetOrdinal("color_price")))
                                row.color_price = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_price")), typeof(string));
                            else
                                row.color_price = null;

                            if (fieldNames.Contains("last_summa") && !reader.IsDBNull(reader.GetOrdinal("last_summa")))
                                row.last_summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_summa")), typeof(double));
                            else
                                row.last_summa = null;

                            if (fieldNames.Contains("new_summa") && !reader.IsDBNull(reader.GetOrdinal("new_summa")))
                                row.new_summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_summa")), typeof(double));
                            else
                                row.new_summa = null;

                            if (fieldNames.Contains("color_summa") && !reader.IsDBNull(reader.GetOrdinal("color_summa")))
                                row.color_summa = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_summa")), typeof(string));
                            else
                                row.color_summa = null;

                            if (fieldNames.Contains("last_turnover") && !reader.IsDBNull(reader.GetOrdinal("last_turnover")))
                                row.last_turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_turnover")), typeof(string));
                            else
                                row.last_turnover = null;

                            if (fieldNames.Contains("new_turnover") && !reader.IsDBNull(reader.GetOrdinal("new_turnover")))
                                row.new_turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_turnover")), typeof(string));
                            else
                                row.new_turnover = null;

                            if (fieldNames.Contains("color_turnover") && !reader.IsDBNull(reader.GetOrdinal("color_turnover")))
                                row.color_turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_turnover")), typeof(string));
                            else
                                row.color_turnover = null;

                            if (fieldNames.Contains("last_svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("last_svr_delivery_type")))
                                row.last_svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_svr_delivery_type")), typeof(string));
                            else
                                row.last_svr_delivery_type = null;

                            if (fieldNames.Contains("new_svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("new_svr_delivery_type")))
                                row.new_svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_svr_delivery_type")), typeof(string));
                            else
                                row.new_svr_delivery_type = null;

                            if (fieldNames.Contains("color_svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("color_svr_delivery_type")))
                                row.color_svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_svr_delivery_type")), typeof(string));
                            else
                                row.color_svr_delivery_type = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_SELECT_FORM_SVR_ITEMS_DIFFResult>> OMC_SELECT_FORM_SVR_ITEMS_DIFFAsync (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id)
        {

            List<OMC_SELECT_FORM_SVR_ITEMS_DIFFResult> result = new List<OMC_SELECT_FORM_SVR_ITEMS_DIFFResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_SVR_ITEMS_DIFF";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_SVR_ITEMS_DIFFResult row = new OMC_SELECT_FORM_SVR_ITEMS_DIFFResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(string));

                            if (fieldNames.Contains("form_item_id") && !reader.IsDBNull(reader.GetOrdinal("form_item_id")))
                                row.form_item_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_item_id")), typeof(int));
                            else
                                row.form_item_id = null;

                            if (fieldNames.Contains("svr_item_id") && !reader.IsDBNull(reader.GetOrdinal("svr_item_id")))
                                row.svr_item_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"svr_item_id")), typeof(int));
                            else
                                row.svr_item_id = null;

                            if (fieldNames.Contains("form_id") && !reader.IsDBNull(reader.GetOrdinal("form_id")))
                                row.form_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_id")), typeof(int));
                            else
                                row.form_id = null;

                            if (fieldNames.Contains("svr_id") && !reader.IsDBNull(reader.GetOrdinal("svr_id")))
                                row.svr_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"svr_id")), typeof(int));
                            else
                                row.svr_id = null;

                            if (fieldNames.Contains("diff_type") && !reader.IsDBNull(reader.GetOrdinal("diff_type")))
                                row.diff_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"diff_type")), typeof(string));

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("phase") && !reader.IsDBNull(reader.GetOrdinal("phase")))
                                row.phase = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phase")), typeof(string));
                            else
                                row.phase = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("last_unit_description") && !reader.IsDBNull(reader.GetOrdinal("last_unit_description")))
                                row.last_unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_unit_description")), typeof(string));
                            else
                                row.last_unit_description = null;

                            if (fieldNames.Contains("new_unit_description") && !reader.IsDBNull(reader.GetOrdinal("new_unit_description")))
                                row.new_unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_unit_description")), typeof(string));
                            else
                                row.new_unit_description = null;

                            if (fieldNames.Contains("color_unit_description") && !reader.IsDBNull(reader.GetOrdinal("color_unit_description")))
                                row.color_unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_unit_description")), typeof(string));
                            else
                                row.color_unit_description = null;

                            if (fieldNames.Contains("last_quantity") && !reader.IsDBNull(reader.GetOrdinal("last_quantity")))
                                row.last_quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_quantity")), typeof(double));
                            else
                                row.last_quantity = null;

                            if (fieldNames.Contains("new_quantity") && !reader.IsDBNull(reader.GetOrdinal("new_quantity")))
                                row.new_quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_quantity")), typeof(double));
                            else
                                row.new_quantity = null;

                            if (fieldNames.Contains("color_quantity") && !reader.IsDBNull(reader.GetOrdinal("color_quantity")))
                                row.color_quantity = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_quantity")), typeof(string));
                            else
                                row.color_quantity = null;

                            if (fieldNames.Contains("last_price") && !reader.IsDBNull(reader.GetOrdinal("last_price")))
                                row.last_price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_price")), typeof(double));
                            else
                                row.last_price = null;

                            if (fieldNames.Contains("new_price") && !reader.IsDBNull(reader.GetOrdinal("new_price")))
                                row.new_price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_price")), typeof(double));
                            else
                                row.new_price = null;

                            if (fieldNames.Contains("color_price") && !reader.IsDBNull(reader.GetOrdinal("color_price")))
                                row.color_price = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_price")), typeof(string));
                            else
                                row.color_price = null;

                            if (fieldNames.Contains("last_summa") && !reader.IsDBNull(reader.GetOrdinal("last_summa")))
                                row.last_summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_summa")), typeof(double));
                            else
                                row.last_summa = null;

                            if (fieldNames.Contains("new_summa") && !reader.IsDBNull(reader.GetOrdinal("new_summa")))
                                row.new_summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_summa")), typeof(double));
                            else
                                row.new_summa = null;

                            if (fieldNames.Contains("color_summa") && !reader.IsDBNull(reader.GetOrdinal("color_summa")))
                                row.color_summa = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_summa")), typeof(string));
                            else
                                row.color_summa = null;

                            if (fieldNames.Contains("last_turnover") && !reader.IsDBNull(reader.GetOrdinal("last_turnover")))
                                row.last_turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_turnover")), typeof(string));
                            else
                                row.last_turnover = null;

                            if (fieldNames.Contains("new_turnover") && !reader.IsDBNull(reader.GetOrdinal("new_turnover")))
                                row.new_turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_turnover")), typeof(string));
                            else
                                row.new_turnover = null;

                            if (fieldNames.Contains("color_turnover") && !reader.IsDBNull(reader.GetOrdinal("color_turnover")))
                                row.color_turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_turnover")), typeof(string));
                            else
                                row.color_turnover = null;

                            if (fieldNames.Contains("last_svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("last_svr_delivery_type")))
                                row.last_svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_svr_delivery_type")), typeof(string));
                            else
                                row.last_svr_delivery_type = null;

                            if (fieldNames.Contains("new_svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("new_svr_delivery_type")))
                                row.new_svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"new_svr_delivery_type")), typeof(string));
                            else
                                row.new_svr_delivery_type = null;

                            if (fieldNames.Contains("color_svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("color_svr_delivery_type")))
                                row.color_svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_svr_delivery_type")), typeof(string));
                            else
                                row.color_svr_delivery_type = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_SELECT_FORMSResult> OMC_SELECT_FORMS (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> id, System.Nullable<bool> hide_archive)
        {

            List<OMC_SELECT_FORMSResult> result = new List<OMC_SELECT_FORMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORMS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter hide_archiveParameter = cmd.CreateParameter();
                    hide_archiveParameter.ParameterName = "hide_archive";
                    hide_archiveParameter.Direction = ParameterDirection.Input;
                    hide_archiveParameter.DbType = DbType.Boolean;
                    if (hide_archive.HasValue)
                    {
                        hide_archiveParameter.Value = hide_archive.Value;
                    }
                    else
                    {
                        hide_archiveParameter.Size = -1;
                        hide_archiveParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(hide_archiveParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORMSResult row = new OMC_SELECT_FORMSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("form_id") && !reader.IsDBNull(reader.GetOrdinal("form_id")))
                                row.form_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_id")), typeof(int));

                            if (fieldNames.Contains("form_description") && !reader.IsDBNull(reader.GetOrdinal("form_description")))
                                row.form_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_description")), typeof(string));
                            else
                                row.form_description = null;

                            if (fieldNames.Contains("project_id") && !reader.IsDBNull(reader.GetOrdinal("project_id")))
                                row.project_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_id")), typeof(int));

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("creation_date") && !reader.IsDBNull(reader.GetOrdinal("creation_date")))
                                row.creation_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"creation_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("modification_date") && !reader.IsDBNull(reader.GetOrdinal("modification_date")))
                                row.modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("owner_description") && !reader.IsDBNull(reader.GetOrdinal("owner_description")))
                                row.owner_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"owner_description")), typeof(string));
                            else
                                row.owner_description = null;

                            if (fieldNames.Contains("total_cnt") && !reader.IsDBNull(reader.GetOrdinal("total_cnt")))
                                row.total_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_cnt")), typeof(int));
                            else
                                row.total_cnt = null;

                            if (fieldNames.Contains("total_diff") && !reader.IsDBNull(reader.GetOrdinal("total_diff")))
                                row.total_diff = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_diff")), typeof(int));
                            else
                                row.total_diff = null;

                            if (fieldNames.Contains("unsi_declined") && !reader.IsDBNull(reader.GetOrdinal("unsi_declined")))
                                row.unsi_declined = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unsi_declined")), typeof(int));
                            else
                                row.unsi_declined = null;

                            if (fieldNames.Contains("dmtos_declined") && !reader.IsDBNull(reader.GetOrdinal("dmtos_declined")))
                                row.dmtos_declined = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dmtos_declined")), typeof(int));
                            else
                                row.dmtos_declined = null;

                            if (fieldNames.Contains("is_archive") && !reader.IsDBNull(reader.GetOrdinal("is_archive")))
                                row.is_archive = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_archive")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_SELECT_FORMSResult>> OMC_SELECT_FORMSAsync (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> id, System.Nullable<bool> hide_archive)
        {

            List<OMC_SELECT_FORMSResult> result = new List<OMC_SELECT_FORMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORMS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter hide_archiveParameter = cmd.CreateParameter();
                    hide_archiveParameter.ParameterName = "hide_archive";
                    hide_archiveParameter.Direction = ParameterDirection.Input;
                    hide_archiveParameter.DbType = DbType.Boolean;
                    if (hide_archive.HasValue)
                    {
                        hide_archiveParameter.Value = hide_archive.Value;
                    }
                    else
                    {
                        hide_archiveParameter.Size = -1;
                        hide_archiveParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(hide_archiveParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORMSResult row = new OMC_SELECT_FORMSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("form_id") && !reader.IsDBNull(reader.GetOrdinal("form_id")))
                                row.form_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_id")), typeof(int));

                            if (fieldNames.Contains("form_description") && !reader.IsDBNull(reader.GetOrdinal("form_description")))
                                row.form_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"form_description")), typeof(string));
                            else
                                row.form_description = null;

                            if (fieldNames.Contains("project_id") && !reader.IsDBNull(reader.GetOrdinal("project_id")))
                                row.project_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_id")), typeof(int));

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("creation_date") && !reader.IsDBNull(reader.GetOrdinal("creation_date")))
                                row.creation_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"creation_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("modification_date") && !reader.IsDBNull(reader.GetOrdinal("modification_date")))
                                row.modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("owner_description") && !reader.IsDBNull(reader.GetOrdinal("owner_description")))
                                row.owner_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"owner_description")), typeof(string));
                            else
                                row.owner_description = null;

                            if (fieldNames.Contains("total_cnt") && !reader.IsDBNull(reader.GetOrdinal("total_cnt")))
                                row.total_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_cnt")), typeof(int));
                            else
                                row.total_cnt = null;

                            if (fieldNames.Contains("total_diff") && !reader.IsDBNull(reader.GetOrdinal("total_diff")))
                                row.total_diff = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_diff")), typeof(int));
                            else
                                row.total_diff = null;

                            if (fieldNames.Contains("unsi_declined") && !reader.IsDBNull(reader.GetOrdinal("unsi_declined")))
                                row.unsi_declined = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unsi_declined")), typeof(int));
                            else
                                row.unsi_declined = null;

                            if (fieldNames.Contains("dmtos_declined") && !reader.IsDBNull(reader.GetOrdinal("dmtos_declined")))
                                row.dmtos_declined = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dmtos_declined")), typeof(int));
                            else
                                row.dmtos_declined = null;

                            if (fieldNames.Contains("is_archive") && !reader.IsDBNull(reader.GetOrdinal("is_archive")))
                                row.is_archive = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_archive")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_SELECT_SVRResult> OMC_SELECT_SVR (System.Nullable<int> event_id, System.Nullable<int> id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<OMC_SELECT_SVRResult> result = new List<OMC_SELECT_SVRResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_SVR";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_SVRResult row = new OMC_SELECT_SVRResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("creation_date") && !reader.IsDBNull(reader.GetOrdinal("creation_date")))
                                row.creation_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"creation_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("user_description") && !reader.IsDBNull(reader.GetOrdinal("user_description")))
                                row.user_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"user_description")), typeof(string));
                            else
                                row.user_description = null;

                            if (fieldNames.Contains("total_cnt") && !reader.IsDBNull(reader.GetOrdinal("total_cnt")))
                                row.total_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_cnt")), typeof(int));
                            else
                                row.total_cnt = null;

                            if (fieldNames.Contains("total_sum") && !reader.IsDBNull(reader.GetOrdinal("total_sum")))
                                row.total_sum = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_sum")), typeof(double));
                            else
                                row.total_sum = null;

                            if (fieldNames.Contains("error_cnt") && !reader.IsDBNull(reader.GetOrdinal("error_cnt")))
                                row.error_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_cnt")), typeof(int));
                            else
                                row.error_cnt = null;

                            if (fieldNames.Contains("last_version") && !reader.IsDBNull(reader.GetOrdinal("last_version")))
                                row.last_version = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_version")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_SELECT_SVRResult>> OMC_SELECT_SVRAsync (System.Nullable<int> event_id, System.Nullable<int> id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<OMC_SELECT_SVRResult> result = new List<OMC_SELECT_SVRResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_SVR";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_SVRResult row = new OMC_SELECT_SVRResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("creation_date") && !reader.IsDBNull(reader.GetOrdinal("creation_date")))
                                row.creation_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"creation_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("user_description") && !reader.IsDBNull(reader.GetOrdinal("user_description")))
                                row.user_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"user_description")), typeof(string));
                            else
                                row.user_description = null;

                            if (fieldNames.Contains("total_cnt") && !reader.IsDBNull(reader.GetOrdinal("total_cnt")))
                                row.total_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_cnt")), typeof(int));
                            else
                                row.total_cnt = null;

                            if (fieldNames.Contains("total_sum") && !reader.IsDBNull(reader.GetOrdinal("total_sum")))
                                row.total_sum = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_sum")), typeof(double));
                            else
                                row.total_sum = null;

                            if (fieldNames.Contains("error_cnt") && !reader.IsDBNull(reader.GetOrdinal("error_cnt")))
                                row.error_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_cnt")), typeof(int));
                            else
                                row.error_cnt = null;

                            if (fieldNames.Contains("last_version") && !reader.IsDBNull(reader.GetOrdinal("last_version")))
                                row.last_version = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"last_version")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_SELECT_SVR_ITEMSResult> OMC_SELECT_SVR_ITEMS (System.Nullable<int> event_id, System.Nullable<int> svr_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<OMC_SELECT_SVR_ITEMSResult> result = new List<OMC_SELECT_SVR_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_SVR_ITEMS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter svr_idParameter = cmd.CreateParameter();
                    svr_idParameter.ParameterName = "svr_id";
                    svr_idParameter.Direction = ParameterDirection.Input;
                    svr_idParameter.DbType = DbType.Int32;
                    svr_idParameter.Precision = 10;
                    svr_idParameter.Scale = 0;
                    if (svr_id.HasValue)
                    {
                        svr_idParameter.Value = svr_id.Value;
                    }
                    else
                    {
                        svr_idParameter.Size = -1;
                        svr_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(svr_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_SVR_ITEMSResult row = new OMC_SELECT_SVR_ITEMSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal("price")))
                                row.price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(double));
                            else
                                row.price = null;

                            if (fieldNames.Contains("summa") && !reader.IsDBNull(reader.GetOrdinal("summa")))
                                row.summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summa")), typeof(double));
                            else
                                row.summa = null;

                            if (fieldNames.Contains("turnover") && !reader.IsDBNull(reader.GetOrdinal("turnover")))
                                row.turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"turnover")), typeof(string));
                            else
                                row.turnover = null;

                            if (fieldNames.Contains("phase") && !reader.IsDBNull(reader.GetOrdinal("phase")))
                                row.phase = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phase")), typeof(string));
                            else
                                row.phase = null;

                            if (fieldNames.Contains("delivery_type") && !reader.IsDBNull(reader.GetOrdinal("delivery_type")))
                                row.delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type")), typeof(string));
                            else
                                row.delivery_type = null;

                            if (fieldNames.Contains("error_dmtos") && !reader.IsDBNull(reader.GetOrdinal("error_dmtos")))
                                row.error_dmtos = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_dmtos")), typeof(string));
                            else
                                row.error_dmtos = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_SELECT_SVR_ITEMSResult>> OMC_SELECT_SVR_ITEMSAsync (System.Nullable<int> event_id, System.Nullable<int> svr_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<OMC_SELECT_SVR_ITEMSResult> result = new List<OMC_SELECT_SVR_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_SVR_ITEMS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter svr_idParameter = cmd.CreateParameter();
                    svr_idParameter.ParameterName = "svr_id";
                    svr_idParameter.Direction = ParameterDirection.Input;
                    svr_idParameter.DbType = DbType.Int32;
                    svr_idParameter.Precision = 10;
                    svr_idParameter.Scale = 0;
                    if (svr_id.HasValue)
                    {
                        svr_idParameter.Value = svr_id.Value;
                    }
                    else
                    {
                        svr_idParameter.Size = -1;
                        svr_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(svr_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_SVR_ITEMSResult row = new OMC_SELECT_SVR_ITEMSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal("price")))
                                row.price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(double));
                            else
                                row.price = null;

                            if (fieldNames.Contains("summa") && !reader.IsDBNull(reader.GetOrdinal("summa")))
                                row.summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summa")), typeof(double));
                            else
                                row.summa = null;

                            if (fieldNames.Contains("turnover") && !reader.IsDBNull(reader.GetOrdinal("turnover")))
                                row.turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"turnover")), typeof(string));
                            else
                                row.turnover = null;

                            if (fieldNames.Contains("phase") && !reader.IsDBNull(reader.GetOrdinal("phase")))
                                row.phase = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phase")), typeof(string));
                            else
                                row.phase = null;

                            if (fieldNames.Contains("delivery_type") && !reader.IsDBNull(reader.GetOrdinal("delivery_type")))
                                row.delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type")), typeof(string));
                            else
                                row.delivery_type = null;

                            if (fieldNames.Contains("error_dmtos") && !reader.IsDBNull(reader.GetOrdinal("error_dmtos")))
                                row.error_dmtos = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_dmtos")), typeof(string));
                            else
                                row.error_dmtos = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_SELECT_SVR_LOADING_ITEMResult> OMC_SELECT_SVR_LOADING_ITEM (System.Nullable<int> loading_id, System.Nullable<int> user_id)
        {

            List<OMC_SELECT_SVR_LOADING_ITEMResult> result = new List<OMC_SELECT_SVR_LOADING_ITEMResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_SVR_LOADING_ITEM";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_SVR_LOADING_ITEMResult row = new OMC_SELECT_SVR_LOADING_ITEMResult();
                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity_description") && !reader.IsDBNull(reader.GetOrdinal("quantity_description")))
                                row.quantity_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity_description")), typeof(string));
                            else
                                row.quantity_description = null;

                            if (fieldNames.Contains("price_description") && !reader.IsDBNull(reader.GetOrdinal("price_description")))
                                row.price_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_description")), typeof(string));
                            else
                                row.price_description = null;

                            if (fieldNames.Contains("summa_description") && !reader.IsDBNull(reader.GetOrdinal("summa_description")))
                                row.summa_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summa_description")), typeof(string));
                            else
                                row.summa_description = null;

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("turnover") && !reader.IsDBNull(reader.GetOrdinal("turnover")))
                                row.turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"turnover")), typeof(string));
                            else
                                row.turnover = null;

                            if (fieldNames.Contains("phase") && !reader.IsDBNull(reader.GetOrdinal("phase")))
                                row.phase = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phase")), typeof(string));
                            else
                                row.phase = null;

                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            if (fieldNames.Contains("warning_description") && !reader.IsDBNull(reader.GetOrdinal("warning_description")))
                                row.warning_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warning_description")), typeof(string));
                            else
                                row.warning_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_SELECT_SVR_LOADING_ITEMResult>> OMC_SELECT_SVR_LOADING_ITEMAsync (System.Nullable<int> loading_id, System.Nullable<int> user_id)
        {

            List<OMC_SELECT_SVR_LOADING_ITEMResult> result = new List<OMC_SELECT_SVR_LOADING_ITEMResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_SVR_LOADING_ITEM";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_SVR_LOADING_ITEMResult row = new OMC_SELECT_SVR_LOADING_ITEMResult();
                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity_description") && !reader.IsDBNull(reader.GetOrdinal("quantity_description")))
                                row.quantity_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity_description")), typeof(string));
                            else
                                row.quantity_description = null;

                            if (fieldNames.Contains("price_description") && !reader.IsDBNull(reader.GetOrdinal("price_description")))
                                row.price_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_description")), typeof(string));
                            else
                                row.price_description = null;

                            if (fieldNames.Contains("summa_description") && !reader.IsDBNull(reader.GetOrdinal("summa_description")))
                                row.summa_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summa_description")), typeof(string));
                            else
                                row.summa_description = null;

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("turnover") && !reader.IsDBNull(reader.GetOrdinal("turnover")))
                                row.turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"turnover")), typeof(string));
                            else
                                row.turnover = null;

                            if (fieldNames.Contains("phase") && !reader.IsDBNull(reader.GetOrdinal("phase")))
                                row.phase = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phase")), typeof(string));
                            else
                                row.phase = null;

                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            if (fieldNames.Contains("warning_description") && !reader.IsDBNull(reader.GetOrdinal("warning_description")))
                                row.warning_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warning_description")), typeof(string));
                            else
                                row.warning_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_SELECT_FORM_SVR_ITEMS_ADDEDResult> OMC_SELECT_FORM_SVR_ITEMS_ADDED (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id, System.Nullable<bool> only_last)
        {

            List<OMC_SELECT_FORM_SVR_ITEMS_ADDEDResult> result = new List<OMC_SELECT_FORM_SVR_ITEMS_ADDEDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_SVR_ITEMS_ADDED";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);

                    DbParameter only_lastParameter = cmd.CreateParameter();
                    only_lastParameter.ParameterName = "only_last";
                    only_lastParameter.Direction = ParameterDirection.Input;
                    only_lastParameter.DbType = DbType.Boolean;
                    if (only_last.HasValue)
                    {
                        only_lastParameter.Value = only_last.Value;
                    }
                    else
                    {
                        only_lastParameter.Size = -1;
                        only_lastParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(only_lastParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_SVR_ITEMS_ADDEDResult row = new OMC_SELECT_FORM_SVR_ITEMS_ADDEDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));

                            if (fieldNames.Contains("price_manager_id") && !reader.IsDBNull(reader.GetOrdinal("price_manager_id")))
                                row.price_manager_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_id")), typeof(int));
                            else
                                row.price_manager_id = null;

                            if (fieldNames.Contains("price_manager_description") && !reader.IsDBNull(reader.GetOrdinal("price_manager_description")))
                                row.price_manager_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_description")), typeof(string));
                            else
                                row.price_manager_description = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_id") && !reader.IsDBNull(reader.GetOrdinal("unit_id")))
                                row.unit_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_id")), typeof(int));

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal("price")))
                                row.price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(double));
                            else
                                row.price = null;

                            if (fieldNames.Contains("summa") && !reader.IsDBNull(reader.GetOrdinal("summa")))
                                row.summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summa")), typeof(double));
                            else
                                row.summa = null;

                            if (fieldNames.Contains("turnover") && !reader.IsDBNull(reader.GetOrdinal("turnover")))
                                row.turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"turnover")), typeof(string));
                            else
                                row.turnover = null;

                            if (fieldNames.Contains("phase") && !reader.IsDBNull(reader.GetOrdinal("phase")))
                                row.phase = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phase")), typeof(string));
                            else
                                row.phase = null;

                            if (fieldNames.Contains("svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("svr_delivery_type")))
                                row.svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"svr_delivery_type")), typeof(string));
                            else
                                row.svr_delivery_type = null;

                            if (fieldNames.Contains("add_info") && !reader.IsDBNull(reader.GetOrdinal("add_info")))
                                row.add_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"add_info")), typeof(string));
                            else
                                row.add_info = null;

                            if (fieldNames.Contains("delivery_type_id") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_id")))
                                row.delivery_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_id")), typeof(int));
                            else
                                row.delivery_type_id = null;

                            if (fieldNames.Contains("delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_description")))
                                row.delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_description")), typeof(string));
                            else
                                row.delivery_type_description = null;

                            if (fieldNames.Contains("unsi_comment") && !reader.IsDBNull(reader.GetOrdinal("unsi_comment")))
                                row.unsi_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unsi_comment")), typeof(string));

                            if (fieldNames.Contains("dmtos_comment") && !reader.IsDBNull(reader.GetOrdinal("dmtos_comment")))
                                row.dmtos_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dmtos_comment")), typeof(string));
                            else
                                row.dmtos_comment = null;

                            if (fieldNames.Contains("commit_changes_date") && !reader.IsDBNull(reader.GetOrdinal("commit_changes_date")))
                                row.commit_changes_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"commit_changes_date")), typeof(System.DateTime));
                            else
                                row.commit_changes_date = null;

                            if (fieldNames.Contains("for_pricing") && !reader.IsDBNull(reader.GetOrdinal("for_pricing")))
                                row.for_pricing = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"for_pricing")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_SELECT_FORM_SVR_ITEMS_ADDEDResult>> OMC_SELECT_FORM_SVR_ITEMS_ADDEDAsync (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id, System.Nullable<bool> only_last)
        {

            List<OMC_SELECT_FORM_SVR_ITEMS_ADDEDResult> result = new List<OMC_SELECT_FORM_SVR_ITEMS_ADDEDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_SVR_ITEMS_ADDED";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);

                    DbParameter only_lastParameter = cmd.CreateParameter();
                    only_lastParameter.ParameterName = "only_last";
                    only_lastParameter.Direction = ParameterDirection.Input;
                    only_lastParameter.DbType = DbType.Boolean;
                    if (only_last.HasValue)
                    {
                        only_lastParameter.Value = only_last.Value;
                    }
                    else
                    {
                        only_lastParameter.Size = -1;
                        only_lastParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(only_lastParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_SVR_ITEMS_ADDEDResult row = new OMC_SELECT_FORM_SVR_ITEMS_ADDEDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));

                            if (fieldNames.Contains("price_manager_id") && !reader.IsDBNull(reader.GetOrdinal("price_manager_id")))
                                row.price_manager_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_id")), typeof(int));
                            else
                                row.price_manager_id = null;

                            if (fieldNames.Contains("price_manager_description") && !reader.IsDBNull(reader.GetOrdinal("price_manager_description")))
                                row.price_manager_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_description")), typeof(string));
                            else
                                row.price_manager_description = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_id") && !reader.IsDBNull(reader.GetOrdinal("unit_id")))
                                row.unit_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_id")), typeof(int));

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal("price")))
                                row.price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(double));
                            else
                                row.price = null;

                            if (fieldNames.Contains("summa") && !reader.IsDBNull(reader.GetOrdinal("summa")))
                                row.summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summa")), typeof(double));
                            else
                                row.summa = null;

                            if (fieldNames.Contains("turnover") && !reader.IsDBNull(reader.GetOrdinal("turnover")))
                                row.turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"turnover")), typeof(string));
                            else
                                row.turnover = null;

                            if (fieldNames.Contains("phase") && !reader.IsDBNull(reader.GetOrdinal("phase")))
                                row.phase = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phase")), typeof(string));
                            else
                                row.phase = null;

                            if (fieldNames.Contains("svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("svr_delivery_type")))
                                row.svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"svr_delivery_type")), typeof(string));
                            else
                                row.svr_delivery_type = null;

                            if (fieldNames.Contains("add_info") && !reader.IsDBNull(reader.GetOrdinal("add_info")))
                                row.add_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"add_info")), typeof(string));
                            else
                                row.add_info = null;

                            if (fieldNames.Contains("delivery_type_id") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_id")))
                                row.delivery_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_id")), typeof(int));
                            else
                                row.delivery_type_id = null;

                            if (fieldNames.Contains("delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_description")))
                                row.delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_description")), typeof(string));
                            else
                                row.delivery_type_description = null;

                            if (fieldNames.Contains("unsi_comment") && !reader.IsDBNull(reader.GetOrdinal("unsi_comment")))
                                row.unsi_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unsi_comment")), typeof(string));

                            if (fieldNames.Contains("dmtos_comment") && !reader.IsDBNull(reader.GetOrdinal("dmtos_comment")))
                                row.dmtos_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dmtos_comment")), typeof(string));
                            else
                                row.dmtos_comment = null;

                            if (fieldNames.Contains("commit_changes_date") && !reader.IsDBNull(reader.GetOrdinal("commit_changes_date")))
                                row.commit_changes_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"commit_changes_date")), typeof(System.DateTime));
                            else
                                row.commit_changes_date = null;

                            if (fieldNames.Contains("for_pricing") && !reader.IsDBNull(reader.GetOrdinal("for_pricing")))
                                row.for_pricing = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"for_pricing")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_SELECT_FORM_SVR_ITEMS_ADDEDResult> OMC_SELECT_FORM_SVR_ITEMS_DELETED (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id, System.Nullable<bool> only_last)
        {

            List<OMC_SELECT_FORM_SVR_ITEMS_ADDEDResult> result = new List<OMC_SELECT_FORM_SVR_ITEMS_ADDEDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_SVR_ITEMS_DELETED";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);

                    DbParameter only_lastParameter = cmd.CreateParameter();
                    only_lastParameter.ParameterName = "only_last";
                    only_lastParameter.Direction = ParameterDirection.Input;
                    only_lastParameter.DbType = DbType.Boolean;
                    if (only_last.HasValue)
                    {
                        only_lastParameter.Value = only_last.Value;
                    }
                    else
                    {
                        only_lastParameter.Size = -1;
                        only_lastParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(only_lastParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_SVR_ITEMS_ADDEDResult row = new OMC_SELECT_FORM_SVR_ITEMS_ADDEDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));

                            if (fieldNames.Contains("price_manager_id") && !reader.IsDBNull(reader.GetOrdinal("price_manager_id")))
                                row.price_manager_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_id")), typeof(int));
                            else
                                row.price_manager_id = null;

                            if (fieldNames.Contains("price_manager_description") && !reader.IsDBNull(reader.GetOrdinal("price_manager_description")))
                                row.price_manager_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_description")), typeof(string));
                            else
                                row.price_manager_description = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_id") && !reader.IsDBNull(reader.GetOrdinal("unit_id")))
                                row.unit_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_id")), typeof(int));

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal("price")))
                                row.price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(double));
                            else
                                row.price = null;

                            if (fieldNames.Contains("summa") && !reader.IsDBNull(reader.GetOrdinal("summa")))
                                row.summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summa")), typeof(double));
                            else
                                row.summa = null;

                            if (fieldNames.Contains("turnover") && !reader.IsDBNull(reader.GetOrdinal("turnover")))
                                row.turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"turnover")), typeof(string));
                            else
                                row.turnover = null;

                            if (fieldNames.Contains("phase") && !reader.IsDBNull(reader.GetOrdinal("phase")))
                                row.phase = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phase")), typeof(string));
                            else
                                row.phase = null;

                            if (fieldNames.Contains("svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("svr_delivery_type")))
                                row.svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"svr_delivery_type")), typeof(string));
                            else
                                row.svr_delivery_type = null;

                            if (fieldNames.Contains("add_info") && !reader.IsDBNull(reader.GetOrdinal("add_info")))
                                row.add_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"add_info")), typeof(string));
                            else
                                row.add_info = null;

                            if (fieldNames.Contains("delivery_type_id") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_id")))
                                row.delivery_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_id")), typeof(int));
                            else
                                row.delivery_type_id = null;

                            if (fieldNames.Contains("delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_description")))
                                row.delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_description")), typeof(string));
                            else
                                row.delivery_type_description = null;

                            if (fieldNames.Contains("unsi_comment") && !reader.IsDBNull(reader.GetOrdinal("unsi_comment")))
                                row.unsi_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unsi_comment")), typeof(string));

                            if (fieldNames.Contains("dmtos_comment") && !reader.IsDBNull(reader.GetOrdinal("dmtos_comment")))
                                row.dmtos_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dmtos_comment")), typeof(string));
                            else
                                row.dmtos_comment = null;

                            if (fieldNames.Contains("commit_changes_date") && !reader.IsDBNull(reader.GetOrdinal("commit_changes_date")))
                                row.commit_changes_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"commit_changes_date")), typeof(System.DateTime));
                            else
                                row.commit_changes_date = null;

                            if (fieldNames.Contains("for_pricing") && !reader.IsDBNull(reader.GetOrdinal("for_pricing")))
                                row.for_pricing = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"for_pricing")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_SELECT_FORM_SVR_ITEMS_ADDEDResult>> OMC_SELECT_FORM_SVR_ITEMS_DELETEDAsync (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> form_id, System.Nullable<bool> only_last)
        {

            List<OMC_SELECT_FORM_SVR_ITEMS_ADDEDResult> result = new List<OMC_SELECT_FORM_SVR_ITEMS_ADDEDResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_SVR_ITEMS_DELETED";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);

                    DbParameter only_lastParameter = cmd.CreateParameter();
                    only_lastParameter.ParameterName = "only_last";
                    only_lastParameter.Direction = ParameterDirection.Input;
                    only_lastParameter.DbType = DbType.Boolean;
                    if (only_last.HasValue)
                    {
                        only_lastParameter.Value = only_last.Value;
                    }
                    else
                    {
                        only_lastParameter.Size = -1;
                        only_lastParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(only_lastParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_SVR_ITEMS_ADDEDResult row = new OMC_SELECT_FORM_SVR_ITEMS_ADDEDResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));

                            if (fieldNames.Contains("price_manager_id") && !reader.IsDBNull(reader.GetOrdinal("price_manager_id")))
                                row.price_manager_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_id")), typeof(int));
                            else
                                row.price_manager_id = null;

                            if (fieldNames.Contains("price_manager_description") && !reader.IsDBNull(reader.GetOrdinal("price_manager_description")))
                                row.price_manager_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price_manager_description")), typeof(string));
                            else
                                row.price_manager_description = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_id") && !reader.IsDBNull(reader.GetOrdinal("unit_id")))
                                row.unit_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_id")), typeof(int));

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal("price")))
                                row.price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(double));
                            else
                                row.price = null;

                            if (fieldNames.Contains("summa") && !reader.IsDBNull(reader.GetOrdinal("summa")))
                                row.summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summa")), typeof(double));
                            else
                                row.summa = null;

                            if (fieldNames.Contains("turnover") && !reader.IsDBNull(reader.GetOrdinal("turnover")))
                                row.turnover = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"turnover")), typeof(string));
                            else
                                row.turnover = null;

                            if (fieldNames.Contains("phase") && !reader.IsDBNull(reader.GetOrdinal("phase")))
                                row.phase = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phase")), typeof(string));
                            else
                                row.phase = null;

                            if (fieldNames.Contains("svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("svr_delivery_type")))
                                row.svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"svr_delivery_type")), typeof(string));
                            else
                                row.svr_delivery_type = null;

                            if (fieldNames.Contains("add_info") && !reader.IsDBNull(reader.GetOrdinal("add_info")))
                                row.add_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"add_info")), typeof(string));
                            else
                                row.add_info = null;

                            if (fieldNames.Contains("delivery_type_id") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_id")))
                                row.delivery_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_id")), typeof(int));
                            else
                                row.delivery_type_id = null;

                            if (fieldNames.Contains("delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_description")))
                                row.delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_description")), typeof(string));
                            else
                                row.delivery_type_description = null;

                            if (fieldNames.Contains("unsi_comment") && !reader.IsDBNull(reader.GetOrdinal("unsi_comment")))
                                row.unsi_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unsi_comment")), typeof(string));

                            if (fieldNames.Contains("dmtos_comment") && !reader.IsDBNull(reader.GetOrdinal("dmtos_comment")))
                                row.dmtos_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dmtos_comment")), typeof(string));
                            else
                                row.dmtos_comment = null;

                            if (fieldNames.Contains("commit_changes_date") && !reader.IsDBNull(reader.GetOrdinal("commit_changes_date")))
                                row.commit_changes_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"commit_changes_date")), typeof(System.DateTime));
                            else
                                row.commit_changes_date = null;

                            if (fieldNames.Contains("for_pricing") && !reader.IsDBNull(reader.GetOrdinal("for_pricing")))
                                row.for_pricing = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"for_pricing")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> APL_UPDATE_PROJECT_DOCUMENTATION_REVISION (System.Nullable<int> id, System.Nullable<int> project_documentation_id, System.Nullable<System.DateTime> project_documentation_date, System.Nullable<System.DateTime> date_receive, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_PROJECT_DOCUMENTATION_REVISION";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter project_documentation_idParameter = cmd.CreateParameter();
                    project_documentation_idParameter.ParameterName = "project_documentation_id";
                    project_documentation_idParameter.Direction = ParameterDirection.Input;
                    project_documentation_idParameter.DbType = DbType.Int32;
                    project_documentation_idParameter.Precision = 10;
                    project_documentation_idParameter.Scale = 0;
                    if (project_documentation_id.HasValue)
                    {
                        project_documentation_idParameter.Value = project_documentation_id.Value;
                    }
                    else
                    {
                        project_documentation_idParameter.Size = -1;
                        project_documentation_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_documentation_idParameter);

                    DbParameter project_documentation_dateParameter = cmd.CreateParameter();
                    project_documentation_dateParameter.ParameterName = "project_documentation_date";
                    project_documentation_dateParameter.Direction = ParameterDirection.Input;
                    project_documentation_dateParameter.DbType = DbType.DateTime;
                    if (project_documentation_date.HasValue)
                    {
                        project_documentation_dateParameter.Value = project_documentation_date.Value;
                    }
                    else
                    {
                        project_documentation_dateParameter.Size = -1;
                        project_documentation_dateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_documentation_dateParameter);

                    DbParameter date_receiveParameter = cmd.CreateParameter();
                    date_receiveParameter.ParameterName = "date_receive";
                    date_receiveParameter.Direction = ParameterDirection.Input;
                    date_receiveParameter.DbType = DbType.DateTime;
                    if (date_receive.HasValue)
                    {
                        date_receiveParameter.Value = date_receive.Value;
                    }
                    else
                    {
                        date_receiveParameter.Size = -1;
                        date_receiveParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(date_receiveParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> APL_UPDATE_PROJECT_DOCUMENTATION_REVISIONAsync (System.Nullable<int> id, System.Nullable<int> project_documentation_id, System.Nullable<System.DateTime> project_documentation_date, System.Nullable<System.DateTime> date_receive, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_PROJECT_DOCUMENTATION_REVISION";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter project_documentation_idParameter = cmd.CreateParameter();
                    project_documentation_idParameter.ParameterName = "project_documentation_id";
                    project_documentation_idParameter.Direction = ParameterDirection.Input;
                    project_documentation_idParameter.DbType = DbType.Int32;
                    project_documentation_idParameter.Precision = 10;
                    project_documentation_idParameter.Scale = 0;
                    if (project_documentation_id.HasValue)
                    {
                        project_documentation_idParameter.Value = project_documentation_id.Value;
                    }
                    else
                    {
                        project_documentation_idParameter.Size = -1;
                        project_documentation_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_documentation_idParameter);

                    DbParameter project_documentation_dateParameter = cmd.CreateParameter();
                    project_documentation_dateParameter.ParameterName = "project_documentation_date";
                    project_documentation_dateParameter.Direction = ParameterDirection.Input;
                    project_documentation_dateParameter.DbType = DbType.DateTime;
                    if (project_documentation_date.HasValue)
                    {
                        project_documentation_dateParameter.Value = project_documentation_date.Value;
                    }
                    else
                    {
                        project_documentation_dateParameter.Size = -1;
                        project_documentation_dateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_documentation_dateParameter);

                    DbParameter date_receiveParameter = cmd.CreateParameter();
                    date_receiveParameter.ParameterName = "date_receive";
                    date_receiveParameter.Direction = ParameterDirection.Input;
                    date_receiveParameter.DbType = DbType.DateTime;
                    if (date_receive.HasValue)
                    {
                        date_receiveParameter.Value = date_receive.Value;
                    }
                    else
                    {
                        date_receiveParameter.Size = -1;
                        date_receiveParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(date_receiveParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_OBJECTS_AND_SUBOBJECTSResult> APL_SELECT_OBJECTS_AND_SUBOBJECTS (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> id, System.Nullable<int> project_id)
        {

            List<APL_SELECT_OBJECTS_AND_SUBOBJECTSResult> result = new List<APL_SELECT_OBJECTS_AND_SUBOBJECTSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_OBJECTS_AND_SUBOBJECTS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_OBJECTS_AND_SUBOBJECTSResult row = new APL_SELECT_OBJECTS_AND_SUBOBJECTSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("parent_id") && !reader.IsDBNull(reader.GetOrdinal("parent_id")))
                                row.parent_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"parent_id")), typeof(int));
                            else
                                row.parent_id = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("start") && !reader.IsDBNull(reader.GetOrdinal("start")))
                                row.start = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start")), typeof(double));
                            else
                                row.start = null;

                            if (fieldNames.Contains("finish") && !reader.IsDBNull(reader.GetOrdinal("finish")))
                                row.finish = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish")), typeof(double));
                            else
                                row.finish = null;

                            if (fieldNames.Contains("tree_errors") && !reader.IsDBNull(reader.GetOrdinal("tree_errors")))
                                row.tree_errors = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tree_errors")), typeof(string));
                            else
                                row.tree_errors = null;

                            if (fieldNames.Contains("subcontractor_list") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_list")))
                                row.subcontractor_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_list")), typeof(string));
                            else
                                row.subcontractor_list = null;

                            if (fieldNames.Contains("project_1c_guid") && !reader.IsDBNull(reader.GetOrdinal("project_1c_guid")))
                                row.project_1c_guid = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_1c_guid")), typeof(string));
                            else
                                row.project_1c_guid = null;

                            if (fieldNames.Contains("project_1c") && !reader.IsDBNull(reader.GetOrdinal("project_1c")))
                                row.project_1c = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_1c")), typeof(string));
                            else
                                row.project_1c = null;

                            if (fieldNames.Contains("is_parent") && !reader.IsDBNull(reader.GetOrdinal("is_parent")))
                                row.is_parent = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_parent")), typeof(int));

                            if (fieldNames.Contains("object_id") && !reader.IsDBNull(reader.GetOrdinal("object_id")))
                                row.object_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_id")), typeof(int));

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("outline_level") && !reader.IsDBNull(reader.GetOrdinal("outline_level")))
                                row.outline_level = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"outline_level")), typeof(int));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_OBJECTS_AND_SUBOBJECTSResult>> APL_SELECT_OBJECTS_AND_SUBOBJECTSAsync (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> id, System.Nullable<int> project_id)
        {

            List<APL_SELECT_OBJECTS_AND_SUBOBJECTSResult> result = new List<APL_SELECT_OBJECTS_AND_SUBOBJECTSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_OBJECTS_AND_SUBOBJECTS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_OBJECTS_AND_SUBOBJECTSResult row = new APL_SELECT_OBJECTS_AND_SUBOBJECTSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("parent_id") && !reader.IsDBNull(reader.GetOrdinal("parent_id")))
                                row.parent_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"parent_id")), typeof(int));
                            else
                                row.parent_id = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("start") && !reader.IsDBNull(reader.GetOrdinal("start")))
                                row.start = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start")), typeof(double));
                            else
                                row.start = null;

                            if (fieldNames.Contains("finish") && !reader.IsDBNull(reader.GetOrdinal("finish")))
                                row.finish = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish")), typeof(double));
                            else
                                row.finish = null;

                            if (fieldNames.Contains("tree_errors") && !reader.IsDBNull(reader.GetOrdinal("tree_errors")))
                                row.tree_errors = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tree_errors")), typeof(string));
                            else
                                row.tree_errors = null;

                            if (fieldNames.Contains("subcontractor_list") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_list")))
                                row.subcontractor_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_list")), typeof(string));
                            else
                                row.subcontractor_list = null;

                            if (fieldNames.Contains("project_1c_guid") && !reader.IsDBNull(reader.GetOrdinal("project_1c_guid")))
                                row.project_1c_guid = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_1c_guid")), typeof(string));
                            else
                                row.project_1c_guid = null;

                            if (fieldNames.Contains("project_1c") && !reader.IsDBNull(reader.GetOrdinal("project_1c")))
                                row.project_1c = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_1c")), typeof(string));
                            else
                                row.project_1c = null;

                            if (fieldNames.Contains("is_parent") && !reader.IsDBNull(reader.GetOrdinal("is_parent")))
                                row.is_parent = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_parent")), typeof(int));

                            if (fieldNames.Contains("object_id") && !reader.IsDBNull(reader.GetOrdinal("object_id")))
                                row.object_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_id")), typeof(int));

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("outline_level") && !reader.IsDBNull(reader.GetOrdinal("outline_level")))
                                row.outline_level = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"outline_level")), typeof(int));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECT_LIST_INFO2Result> APL_SELECT_PROJECT_LIST_INFO2 (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> id, System.Nullable<bool> hide_closed, System.Nullable<bool> show_mine)
        {

            List<APL_SELECT_PROJECT_LIST_INFO2Result> result = new List<APL_SELECT_PROJECT_LIST_INFO2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_LIST_INFO2";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter hide_closedParameter = cmd.CreateParameter();
                    hide_closedParameter.ParameterName = "hide_closed";
                    hide_closedParameter.Direction = ParameterDirection.Input;
                    hide_closedParameter.DbType = DbType.Boolean;
                    if (hide_closed.HasValue)
                    {
                        hide_closedParameter.Value = hide_closed.Value;
                    }
                    else
                    {
                        hide_closedParameter.Size = -1;
                        hide_closedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(hide_closedParameter);

                    DbParameter show_mineParameter = cmd.CreateParameter();
                    show_mineParameter.ParameterName = "show_mine";
                    show_mineParameter.Direction = ParameterDirection.Input;
                    show_mineParameter.DbType = DbType.Boolean;
                    if (show_mine.HasValue)
                    {
                        show_mineParameter.Value = show_mine.Value;
                    }
                    else
                    {
                        show_mineParameter.Size = -1;
                        show_mineParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_mineParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_LIST_INFO2Result row = new APL_SELECT_PROJECT_LIST_INFO2Result();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("project_short_description") && !reader.IsDBNull(reader.GetOrdinal("project_short_description")))
                                row.project_short_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_short_description")), typeof(string));
                            else
                                row.project_short_description = null;

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("project_type_id") && !reader.IsDBNull(reader.GetOrdinal("project_type_id")))
                                row.project_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_type_id")), typeof(int));

                            if (fieldNames.Contains("project_type") && !reader.IsDBNull(reader.GetOrdinal("project_type")))
                                row.project_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_type")), typeof(string));
                            else
                                row.project_type = null;

                            if (fieldNames.Contains("project_state_id") && !reader.IsDBNull(reader.GetOrdinal("project_state_id")))
                                row.project_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_state_id")), typeof(int));

                            if (fieldNames.Contains("project_state") && !reader.IsDBNull(reader.GetOrdinal("project_state")))
                                row.project_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_state")), typeof(string));
                            else
                                row.project_state = null;

                            if (fieldNames.Contains("logistical_network_objects") && !reader.IsDBNull(reader.GetOrdinal("logistical_network_objects")))
                                row.logistical_network_objects = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"logistical_network_objects")), typeof(string));
                            else
                                row.logistical_network_objects = null;

                            if (fieldNames.Contains("subcontractors") && !reader.IsDBNull(reader.GetOrdinal("subcontractors")))
                                row.subcontractors = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractors")), typeof(string));
                            else
                                row.subcontractors = null;

                            if (fieldNames.Contains("customer_id") && !reader.IsDBNull(reader.GetOrdinal("customer_id")))
                                row.customer_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customer_id")), typeof(int));
                            else
                                row.customer_id = null;

                            if (fieldNames.Contains("customer") && !reader.IsDBNull(reader.GetOrdinal("customer")))
                                row.customer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customer")), typeof(string));
                            else
                                row.customer = null;

                            if (fieldNames.Contains("designer_id") && !reader.IsDBNull(reader.GetOrdinal("designer_id")))
                                row.designer_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"designer_id")), typeof(int));
                            else
                                row.designer_id = null;

                            if (fieldNames.Contains("designer") && !reader.IsDBNull(reader.GetOrdinal("designer")))
                                row.designer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"designer")), typeof(string));
                            else
                                row.designer = null;

                            if (fieldNames.Contains("start") && !reader.IsDBNull(reader.GetOrdinal("start")))
                                row.start = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start")), typeof(double));
                            else
                                row.start = null;

                            if (fieldNames.Contains("finish") && !reader.IsDBNull(reader.GetOrdinal("finish")))
                                row.finish = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish")), typeof(double));
                            else
                                row.finish = null;

                            if (fieldNames.Contains("year1") && !reader.IsDBNull(reader.GetOrdinal("year1")))
                                row.year1 = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"year1")), typeof(int));
                            else
                                row.year1 = null;

                            if (fieldNames.Contains("year2") && !reader.IsDBNull(reader.GetOrdinal("year2")))
                                row.year2 = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"year2")), typeof(int));
                            else
                                row.year2 = null;

                            if (fieldNames.Contains("finish_date") && !reader.IsDBNull(reader.GetOrdinal("finish_date")))
                                row.finish_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish_date")), typeof(System.DateTime));
                            else
                                row.finish_date = null;

                            if (fieldNames.Contains("build_curator_id") && !reader.IsDBNull(reader.GetOrdinal("build_curator_id")))
                                row.build_curator_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_curator_id")), typeof(int));
                            else
                                row.build_curator_id = null;

                            if (fieldNames.Contains("build_curator") && !reader.IsDBNull(reader.GetOrdinal("build_curator")))
                                row.build_curator = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_curator")), typeof(string));
                            else
                                row.build_curator = null;

                            if (fieldNames.Contains("build_curator_list_id") && !reader.IsDBNull(reader.GetOrdinal("build_curator_list_id")))
                                row.build_curator_list_id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_curator_list_id")), typeof(string));
                            else
                                row.build_curator_list_id = null;

                            if (fieldNames.Contains("build_curator_list") && !reader.IsDBNull(reader.GetOrdinal("build_curator_list")))
                                row.build_curator_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_curator_list")), typeof(string));
                            else
                                row.build_curator_list = null;

                            if (fieldNames.Contains("package_curator_id") && !reader.IsDBNull(reader.GetOrdinal("package_curator_id")))
                                row.package_curator_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_curator_id")), typeof(int));
                            else
                                row.package_curator_id = null;

                            if (fieldNames.Contains("package_curator") && !reader.IsDBNull(reader.GetOrdinal("package_curator")))
                                row.package_curator = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_curator")), typeof(string));
                            else
                                row.package_curator = null;

                            if (fieldNames.Contains("supply_curator_id") && !reader.IsDBNull(reader.GetOrdinal("supply_curator_id")))
                                row.supply_curator_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_curator_id")), typeof(int));
                            else
                                row.supply_curator_id = null;

                            if (fieldNames.Contains("supply_curator") && !reader.IsDBNull(reader.GetOrdinal("supply_curator")))
                                row.supply_curator = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_curator")), typeof(string));
                            else
                                row.supply_curator = null;

                            if (fieldNames.Contains("supply_curator_list_id") && !reader.IsDBNull(reader.GetOrdinal("supply_curator_list_id")))
                                row.supply_curator_list_id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_curator_list_id")), typeof(string));
                            else
                                row.supply_curator_list_id = null;

                            if (fieldNames.Contains("supply_curator_list") && !reader.IsDBNull(reader.GetOrdinal("supply_curator_list")))
                                row.supply_curator_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_curator_list")), typeof(string));
                            else
                                row.supply_curator_list = null;

                            if (fieldNames.Contains("deliveryplan_curator_list_id") && !reader.IsDBNull(reader.GetOrdinal("deliveryplan_curator_list_id")))
                                row.deliveryplan_curator_list_id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"deliveryplan_curator_list_id")), typeof(string));
                            else
                                row.deliveryplan_curator_list_id = null;

                            if (fieldNames.Contains("deliveryplan_curator_list") && !reader.IsDBNull(reader.GetOrdinal("deliveryplan_curator_list")))
                                row.deliveryplan_curator_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"deliveryplan_curator_list")), typeof(string));
                            else
                                row.deliveryplan_curator_list = null;

                            if (fieldNames.Contains("project_curator_id") && !reader.IsDBNull(reader.GetOrdinal("project_curator_id")))
                                row.project_curator_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_curator_id")), typeof(int));
                            else
                                row.project_curator_id = null;

                            if (fieldNames.Contains("project_curator") && !reader.IsDBNull(reader.GetOrdinal("project_curator")))
                                row.project_curator = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_curator")), typeof(string));
                            else
                                row.project_curator = null;

                            if (fieldNames.Contains("stocks_curator_id") && !reader.IsDBNull(reader.GetOrdinal("stocks_curator_id")))
                                row.stocks_curator_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stocks_curator_id")), typeof(int));
                            else
                                row.stocks_curator_id = null;

                            if (fieldNames.Contains("stocks_curator") && !reader.IsDBNull(reader.GetOrdinal("stocks_curator")))
                                row.stocks_curator = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stocks_curator")), typeof(string));
                            else
                                row.stocks_curator = null;

                            if (fieldNames.Contains("normative_delivery_time") && !reader.IsDBNull(reader.GetOrdinal("normative_delivery_time")))
                                row.normative_delivery_time = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"normative_delivery_time")), typeof(int));
                            else
                                row.normative_delivery_time = null;

                            if (fieldNames.Contains("storage_contract") && !reader.IsDBNull(reader.GetOrdinal("storage_contract")))
                                row.storage_contract = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"storage_contract")), typeof(string));
                            else
                                row.storage_contract = null;

                            if (fieldNames.Contains("storage_contract_finish_date") && !reader.IsDBNull(reader.GetOrdinal("storage_contract_finish_date")))
                                row.storage_contract_finish_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"storage_contract_finish_date")), typeof(System.DateTime));
                            else
                                row.storage_contract_finish_date = null;

                            if (fieldNames.Contains("build_start_date") && !reader.IsDBNull(reader.GetOrdinal("build_start_date")))
                                row.build_start_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_start_date")), typeof(System.DateTime));
                            else
                                row.build_start_date = null;

                            if (fieldNames.Contains("build_finish_date") && !reader.IsDBNull(reader.GetOrdinal("build_finish_date")))
                                row.build_finish_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_finish_date")), typeof(System.DateTime));
                            else
                                row.build_finish_date = null;

                            if (fieldNames.Contains("non_project_supplier_approve_required") && !reader.IsDBNull(reader.GetOrdinal("non_project_supplier_approve_required")))
                                row.non_project_supplier_approve_required = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"non_project_supplier_approve_required")), typeof(bool));
                            else
                                row.non_project_supplier_approve_required = null;

                            if (fieldNames.Contains("rss_match_type_id") && !reader.IsDBNull(reader.GetOrdinal("rss_match_type_id")))
                                row.rss_match_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"rss_match_type_id")), typeof(int));
                            else
                                row.rss_match_type_id = null;

                            if (fieldNames.Contains("rss_match_type") && !reader.IsDBNull(reader.GetOrdinal("rss_match_type")))
                                row.rss_match_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"rss_match_type")), typeof(string));
                            else
                                row.rss_match_type = null;

                            if (fieldNames.Contains("tpsu_division_id") && !reader.IsDBNull(reader.GetOrdinal("tpsu_division_id")))
                                row.tpsu_division_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tpsu_division_id")), typeof(int));
                            else
                                row.tpsu_division_id = null;

                            if (fieldNames.Contains("tpsu_division") && !reader.IsDBNull(reader.GetOrdinal("tpsu_division")))
                                row.tpsu_division = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tpsu_division")), typeof(string));
                            else
                                row.tpsu_division = null;

                            if (fieldNames.Contains("subcontractor_info_list_id") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_info_list_id")))
                                row.subcontractor_info_list_id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_info_list_id")), typeof(string));
                            else
                                row.subcontractor_info_list_id = null;

                            if (fieldNames.Contains("subcontractor_info_list") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_info_list")))
                                row.subcontractor_info_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_info_list")), typeof(string));
                            else
                                row.subcontractor_info_list = null;

                            if (fieldNames.Contains("is_documentation_percent") && !reader.IsDBNull(reader.GetOrdinal("is_documentation_percent")))
                                row.is_documentation_percent = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_documentation_percent")), typeof(string));

                            if (fieldNames.Contains("is_documentation") && !reader.IsDBNull(reader.GetOrdinal("is_documentation")))
                                row.is_documentation = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_documentation")), typeof(string));

                            if (fieldNames.Contains("is_change_documentation_percent") && !reader.IsDBNull(reader.GetOrdinal("is_change_documentation_percent")))
                                row.is_change_documentation_percent = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_change_documentation_percent")), typeof(string));

                            if (fieldNames.Contains("is_change_documentation") && !reader.IsDBNull(reader.GetOrdinal("is_change_documentation")))
                                row.is_change_documentation = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_change_documentation")), typeof(string));

                            if (fieldNames.Contains("total_sum_gk") && !reader.IsDBNull(reader.GetOrdinal("total_sum_gk")))
                                row.total_sum_gk = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_sum_gk")), typeof(string));
                            else
                                row.total_sum_gk = null;

                            if (fieldNames.Contains("total_sum_direct") && !reader.IsDBNull(reader.GetOrdinal("total_sum_direct")))
                                row.total_sum_direct = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_sum_direct")), typeof(string));
                            else
                                row.total_sum_direct = null;

                            if (fieldNames.Contains("advance_info") && !reader.IsDBNull(reader.GetOrdinal("advance_info")))
                                row.advance_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"advance_info")), typeof(string));
                            else
                                row.advance_info = null;

                            if (fieldNames.Contains("tree_errors") && !reader.IsDBNull(reader.GetOrdinal("tree_errors")))
                                row.tree_errors = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tree_errors")), typeof(string));
                            else
                                row.tree_errors = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_LIST_INFO2Result>> APL_SELECT_PROJECT_LIST_INFO2Async (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> id, System.Nullable<bool> hide_closed, System.Nullable<bool> show_mine)
        {

            List<APL_SELECT_PROJECT_LIST_INFO2Result> result = new List<APL_SELECT_PROJECT_LIST_INFO2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_LIST_INFO2";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter hide_closedParameter = cmd.CreateParameter();
                    hide_closedParameter.ParameterName = "hide_closed";
                    hide_closedParameter.Direction = ParameterDirection.Input;
                    hide_closedParameter.DbType = DbType.Boolean;
                    if (hide_closed.HasValue)
                    {
                        hide_closedParameter.Value = hide_closed.Value;
                    }
                    else
                    {
                        hide_closedParameter.Size = -1;
                        hide_closedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(hide_closedParameter);

                    DbParameter show_mineParameter = cmd.CreateParameter();
                    show_mineParameter.ParameterName = "show_mine";
                    show_mineParameter.Direction = ParameterDirection.Input;
                    show_mineParameter.DbType = DbType.Boolean;
                    if (show_mine.HasValue)
                    {
                        show_mineParameter.Value = show_mine.Value;
                    }
                    else
                    {
                        show_mineParameter.Size = -1;
                        show_mineParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_mineParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_LIST_INFO2Result row = new APL_SELECT_PROJECT_LIST_INFO2Result();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("project_short_description") && !reader.IsDBNull(reader.GetOrdinal("project_short_description")))
                                row.project_short_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_short_description")), typeof(string));
                            else
                                row.project_short_description = null;

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("project_type_id") && !reader.IsDBNull(reader.GetOrdinal("project_type_id")))
                                row.project_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_type_id")), typeof(int));

                            if (fieldNames.Contains("project_type") && !reader.IsDBNull(reader.GetOrdinal("project_type")))
                                row.project_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_type")), typeof(string));
                            else
                                row.project_type = null;

                            if (fieldNames.Contains("project_state_id") && !reader.IsDBNull(reader.GetOrdinal("project_state_id")))
                                row.project_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_state_id")), typeof(int));

                            if (fieldNames.Contains("project_state") && !reader.IsDBNull(reader.GetOrdinal("project_state")))
                                row.project_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_state")), typeof(string));
                            else
                                row.project_state = null;

                            if (fieldNames.Contains("logistical_network_objects") && !reader.IsDBNull(reader.GetOrdinal("logistical_network_objects")))
                                row.logistical_network_objects = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"logistical_network_objects")), typeof(string));
                            else
                                row.logistical_network_objects = null;

                            if (fieldNames.Contains("subcontractors") && !reader.IsDBNull(reader.GetOrdinal("subcontractors")))
                                row.subcontractors = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractors")), typeof(string));
                            else
                                row.subcontractors = null;

                            if (fieldNames.Contains("customer_id") && !reader.IsDBNull(reader.GetOrdinal("customer_id")))
                                row.customer_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customer_id")), typeof(int));
                            else
                                row.customer_id = null;

                            if (fieldNames.Contains("customer") && !reader.IsDBNull(reader.GetOrdinal("customer")))
                                row.customer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customer")), typeof(string));
                            else
                                row.customer = null;

                            if (fieldNames.Contains("designer_id") && !reader.IsDBNull(reader.GetOrdinal("designer_id")))
                                row.designer_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"designer_id")), typeof(int));
                            else
                                row.designer_id = null;

                            if (fieldNames.Contains("designer") && !reader.IsDBNull(reader.GetOrdinal("designer")))
                                row.designer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"designer")), typeof(string));
                            else
                                row.designer = null;

                            if (fieldNames.Contains("start") && !reader.IsDBNull(reader.GetOrdinal("start")))
                                row.start = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start")), typeof(double));
                            else
                                row.start = null;

                            if (fieldNames.Contains("finish") && !reader.IsDBNull(reader.GetOrdinal("finish")))
                                row.finish = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish")), typeof(double));
                            else
                                row.finish = null;

                            if (fieldNames.Contains("year1") && !reader.IsDBNull(reader.GetOrdinal("year1")))
                                row.year1 = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"year1")), typeof(int));
                            else
                                row.year1 = null;

                            if (fieldNames.Contains("year2") && !reader.IsDBNull(reader.GetOrdinal("year2")))
                                row.year2 = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"year2")), typeof(int));
                            else
                                row.year2 = null;

                            if (fieldNames.Contains("finish_date") && !reader.IsDBNull(reader.GetOrdinal("finish_date")))
                                row.finish_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish_date")), typeof(System.DateTime));
                            else
                                row.finish_date = null;

                            if (fieldNames.Contains("build_curator_id") && !reader.IsDBNull(reader.GetOrdinal("build_curator_id")))
                                row.build_curator_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_curator_id")), typeof(int));
                            else
                                row.build_curator_id = null;

                            if (fieldNames.Contains("build_curator") && !reader.IsDBNull(reader.GetOrdinal("build_curator")))
                                row.build_curator = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_curator")), typeof(string));
                            else
                                row.build_curator = null;

                            if (fieldNames.Contains("build_curator_list_id") && !reader.IsDBNull(reader.GetOrdinal("build_curator_list_id")))
                                row.build_curator_list_id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_curator_list_id")), typeof(string));
                            else
                                row.build_curator_list_id = null;

                            if (fieldNames.Contains("build_curator_list") && !reader.IsDBNull(reader.GetOrdinal("build_curator_list")))
                                row.build_curator_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_curator_list")), typeof(string));
                            else
                                row.build_curator_list = null;

                            if (fieldNames.Contains("package_curator_id") && !reader.IsDBNull(reader.GetOrdinal("package_curator_id")))
                                row.package_curator_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_curator_id")), typeof(int));
                            else
                                row.package_curator_id = null;

                            if (fieldNames.Contains("package_curator") && !reader.IsDBNull(reader.GetOrdinal("package_curator")))
                                row.package_curator = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_curator")), typeof(string));
                            else
                                row.package_curator = null;

                            if (fieldNames.Contains("supply_curator_id") && !reader.IsDBNull(reader.GetOrdinal("supply_curator_id")))
                                row.supply_curator_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_curator_id")), typeof(int));
                            else
                                row.supply_curator_id = null;

                            if (fieldNames.Contains("supply_curator") && !reader.IsDBNull(reader.GetOrdinal("supply_curator")))
                                row.supply_curator = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_curator")), typeof(string));
                            else
                                row.supply_curator = null;

                            if (fieldNames.Contains("supply_curator_list_id") && !reader.IsDBNull(reader.GetOrdinal("supply_curator_list_id")))
                                row.supply_curator_list_id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_curator_list_id")), typeof(string));
                            else
                                row.supply_curator_list_id = null;

                            if (fieldNames.Contains("supply_curator_list") && !reader.IsDBNull(reader.GetOrdinal("supply_curator_list")))
                                row.supply_curator_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_curator_list")), typeof(string));
                            else
                                row.supply_curator_list = null;

                            if (fieldNames.Contains("deliveryplan_curator_list_id") && !reader.IsDBNull(reader.GetOrdinal("deliveryplan_curator_list_id")))
                                row.deliveryplan_curator_list_id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"deliveryplan_curator_list_id")), typeof(string));
                            else
                                row.deliveryplan_curator_list_id = null;

                            if (fieldNames.Contains("deliveryplan_curator_list") && !reader.IsDBNull(reader.GetOrdinal("deliveryplan_curator_list")))
                                row.deliveryplan_curator_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"deliveryplan_curator_list")), typeof(string));
                            else
                                row.deliveryplan_curator_list = null;

                            if (fieldNames.Contains("project_curator_id") && !reader.IsDBNull(reader.GetOrdinal("project_curator_id")))
                                row.project_curator_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_curator_id")), typeof(int));
                            else
                                row.project_curator_id = null;

                            if (fieldNames.Contains("project_curator") && !reader.IsDBNull(reader.GetOrdinal("project_curator")))
                                row.project_curator = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_curator")), typeof(string));
                            else
                                row.project_curator = null;

                            if (fieldNames.Contains("stocks_curator_id") && !reader.IsDBNull(reader.GetOrdinal("stocks_curator_id")))
                                row.stocks_curator_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stocks_curator_id")), typeof(int));
                            else
                                row.stocks_curator_id = null;

                            if (fieldNames.Contains("stocks_curator") && !reader.IsDBNull(reader.GetOrdinal("stocks_curator")))
                                row.stocks_curator = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stocks_curator")), typeof(string));
                            else
                                row.stocks_curator = null;

                            if (fieldNames.Contains("normative_delivery_time") && !reader.IsDBNull(reader.GetOrdinal("normative_delivery_time")))
                                row.normative_delivery_time = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"normative_delivery_time")), typeof(int));
                            else
                                row.normative_delivery_time = null;

                            if (fieldNames.Contains("storage_contract") && !reader.IsDBNull(reader.GetOrdinal("storage_contract")))
                                row.storage_contract = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"storage_contract")), typeof(string));
                            else
                                row.storage_contract = null;

                            if (fieldNames.Contains("storage_contract_finish_date") && !reader.IsDBNull(reader.GetOrdinal("storage_contract_finish_date")))
                                row.storage_contract_finish_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"storage_contract_finish_date")), typeof(System.DateTime));
                            else
                                row.storage_contract_finish_date = null;

                            if (fieldNames.Contains("build_start_date") && !reader.IsDBNull(reader.GetOrdinal("build_start_date")))
                                row.build_start_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_start_date")), typeof(System.DateTime));
                            else
                                row.build_start_date = null;

                            if (fieldNames.Contains("build_finish_date") && !reader.IsDBNull(reader.GetOrdinal("build_finish_date")))
                                row.build_finish_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"build_finish_date")), typeof(System.DateTime));
                            else
                                row.build_finish_date = null;

                            if (fieldNames.Contains("non_project_supplier_approve_required") && !reader.IsDBNull(reader.GetOrdinal("non_project_supplier_approve_required")))
                                row.non_project_supplier_approve_required = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"non_project_supplier_approve_required")), typeof(bool));
                            else
                                row.non_project_supplier_approve_required = null;

                            if (fieldNames.Contains("rss_match_type_id") && !reader.IsDBNull(reader.GetOrdinal("rss_match_type_id")))
                                row.rss_match_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"rss_match_type_id")), typeof(int));
                            else
                                row.rss_match_type_id = null;

                            if (fieldNames.Contains("rss_match_type") && !reader.IsDBNull(reader.GetOrdinal("rss_match_type")))
                                row.rss_match_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"rss_match_type")), typeof(string));
                            else
                                row.rss_match_type = null;

                            if (fieldNames.Contains("tpsu_division_id") && !reader.IsDBNull(reader.GetOrdinal("tpsu_division_id")))
                                row.tpsu_division_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tpsu_division_id")), typeof(int));
                            else
                                row.tpsu_division_id = null;

                            if (fieldNames.Contains("tpsu_division") && !reader.IsDBNull(reader.GetOrdinal("tpsu_division")))
                                row.tpsu_division = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tpsu_division")), typeof(string));
                            else
                                row.tpsu_division = null;

                            if (fieldNames.Contains("subcontractor_info_list_id") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_info_list_id")))
                                row.subcontractor_info_list_id = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_info_list_id")), typeof(string));
                            else
                                row.subcontractor_info_list_id = null;

                            if (fieldNames.Contains("subcontractor_info_list") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_info_list")))
                                row.subcontractor_info_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_info_list")), typeof(string));
                            else
                                row.subcontractor_info_list = null;

                            if (fieldNames.Contains("is_documentation_percent") && !reader.IsDBNull(reader.GetOrdinal("is_documentation_percent")))
                                row.is_documentation_percent = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_documentation_percent")), typeof(string));

                            if (fieldNames.Contains("is_documentation") && !reader.IsDBNull(reader.GetOrdinal("is_documentation")))
                                row.is_documentation = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_documentation")), typeof(string));

                            if (fieldNames.Contains("is_change_documentation_percent") && !reader.IsDBNull(reader.GetOrdinal("is_change_documentation_percent")))
                                row.is_change_documentation_percent = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_change_documentation_percent")), typeof(string));

                            if (fieldNames.Contains("is_change_documentation") && !reader.IsDBNull(reader.GetOrdinal("is_change_documentation")))
                                row.is_change_documentation = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_change_documentation")), typeof(string));

                            if (fieldNames.Contains("total_sum_gk") && !reader.IsDBNull(reader.GetOrdinal("total_sum_gk")))
                                row.total_sum_gk = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_sum_gk")), typeof(string));
                            else
                                row.total_sum_gk = null;

                            if (fieldNames.Contains("total_sum_direct") && !reader.IsDBNull(reader.GetOrdinal("total_sum_direct")))
                                row.total_sum_direct = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total_sum_direct")), typeof(string));
                            else
                                row.total_sum_direct = null;

                            if (fieldNames.Contains("advance_info") && !reader.IsDBNull(reader.GetOrdinal("advance_info")))
                                row.advance_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"advance_info")), typeof(string));
                            else
                                row.advance_info = null;

                            if (fieldNames.Contains("tree_errors") && !reader.IsDBNull(reader.GetOrdinal("tree_errors")))
                                row.tree_errors = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tree_errors")), typeof(string));
                            else
                                row.tree_errors = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECT_LOADING_ITEMSResult> APL_SELECT_PROJECT_LOADING_ITEMS (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> loading_id)
        {

            List<APL_SELECT_PROJECT_LOADING_ITEMSResult> result = new List<APL_SELECT_PROJECT_LOADING_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_LOADING_ITEMS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_LOADING_ITEMSResult row = new APL_SELECT_PROJECT_LOADING_ITEMSResult();
                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("start_description") && !reader.IsDBNull(reader.GetOrdinal("start_description")))
                                row.start_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start_description")), typeof(string));
                            else
                                row.start_description = null;

                            if (fieldNames.Contains("finish_description") && !reader.IsDBNull(reader.GetOrdinal("finish_description")))
                                row.finish_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish_description")), typeof(string));
                            else
                                row.finish_description = null;

                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            if (fieldNames.Contains("warning_description") && !reader.IsDBNull(reader.GetOrdinal("warning_description")))
                                row.warning_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warning_description")), typeof(string));
                            else
                                row.warning_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_LOADING_ITEMSResult>> APL_SELECT_PROJECT_LOADING_ITEMSAsync (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> loading_id)
        {

            List<APL_SELECT_PROJECT_LOADING_ITEMSResult> result = new List<APL_SELECT_PROJECT_LOADING_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_LOADING_ITEMS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_LOADING_ITEMSResult row = new APL_SELECT_PROJECT_LOADING_ITEMSResult();
                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("start_description") && !reader.IsDBNull(reader.GetOrdinal("start_description")))
                                row.start_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start_description")), typeof(string));
                            else
                                row.start_description = null;

                            if (fieldNames.Contains("finish_description") && !reader.IsDBNull(reader.GetOrdinal("finish_description")))
                                row.finish_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish_description")), typeof(string));
                            else
                                row.finish_description = null;

                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            if (fieldNames.Contains("warning_description") && !reader.IsDBNull(reader.GetOrdinal("warning_description")))
                                row.warning_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warning_description")), typeof(string));
                            else
                                row.warning_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_SELECT_FORM_RSS_DELIVERY_TYPE_LOADING_ITEMSResult> OMC_SELECT_FORM_RSS_DELIVERY_TYPE_LOADING_ITEMS (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> loading_id)
        {

            List<OMC_SELECT_FORM_RSS_DELIVERY_TYPE_LOADING_ITEMSResult> result = new List<OMC_SELECT_FORM_RSS_DELIVERY_TYPE_LOADING_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_RSS_DELIVERY_TYPE_LOADING_ITEMS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_RSS_DELIVERY_TYPE_LOADING_ITEMSResult row = new OMC_SELECT_FORM_RSS_DELIVERY_TYPE_LOADING_ITEMSResult();
                            if (fieldNames.Contains("item_code") && !reader.IsDBNull(reader.GetOrdinal("item_code")))
                                row.item_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_code")), typeof(string));
                            else
                                row.item_code = null;

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_description")))
                                row.subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_description")), typeof(string));
                            else
                                row.subcontractor_description = null;

                            if (fieldNames.Contains("lno_description") && !reader.IsDBNull(reader.GetOrdinal("lno_description")))
                                row.lno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_description")), typeof(string));
                            else
                                row.lno_description = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));
                            else
                                row.ekk_code = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("additional_properties") && !reader.IsDBNull(reader.GetOrdinal("additional_properties")))
                                row.additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_properties")), typeof(string));
                            else
                                row.additional_properties = null;

                            if (fieldNames.Contains("package_contents") && !reader.IsDBNull(reader.GetOrdinal("package_contents")))
                                row.package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_contents")), typeof(string));
                            else
                                row.package_contents = null;

                            if (fieldNames.Contains("manufacturer") && !reader.IsDBNull(reader.GetOrdinal("manufacturer")))
                                row.manufacturer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"manufacturer")), typeof(string));
                            else
                                row.manufacturer = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("summary2") && !reader.IsDBNull(reader.GetOrdinal("summary2")))
                                row.summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary2")), typeof(string));
                            else
                                row.summary2 = null;

                            if (fieldNames.Contains("rss_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("rss_delivery_type_description")))
                                row.rss_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"rss_delivery_type_description")), typeof(string));
                            else
                                row.rss_delivery_type_description = null;

                            if (fieldNames.Contains("suggested_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_description")))
                                row.suggested_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_description")), typeof(string));
                            else
                                row.suggested_delivery_type_description = null;

                            if (fieldNames.Contains("delivery_type_1") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_1")))
                                row.delivery_type_1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_1")), typeof(string));
                            else
                                row.delivery_type_1 = null;

                            if (fieldNames.Contains("delivery_type_2") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_2")))
                                row.delivery_type_2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_2")), typeof(string));
                            else
                                row.delivery_type_2 = null;

                            if (fieldNames.Contains("delivery_type_3") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_3")))
                                row.delivery_type_3 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_3")), typeof(string));
                            else
                                row.delivery_type_3 = null;

                            if (fieldNames.Contains("delivery_type_4") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_4")))
                                row.delivery_type_4 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_4")), typeof(string));
                            else
                                row.delivery_type_4 = null;

                            if (fieldNames.Contains("delivery_type_5") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_5")))
                                row.delivery_type_5 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_5")), typeof(string));
                            else
                                row.delivery_type_5 = null;

                            if (fieldNames.Contains("delivery_type_6") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_6")))
                                row.delivery_type_6 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_6")), typeof(string));
                            else
                                row.delivery_type_6 = null;

                            if (fieldNames.Contains("delivery_type_7") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_7")))
                                row.delivery_type_7 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_7")), typeof(string));
                            else
                                row.delivery_type_7 = null;

                            if (fieldNames.Contains("delivery_type_8") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_8")))
                                row.delivery_type_8 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_8")), typeof(string));
                            else
                                row.delivery_type_8 = null;

                            if (fieldNames.Contains("delivery_type_9") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_9")))
                                row.delivery_type_9 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_9")), typeof(string));
                            else
                                row.delivery_type_9 = null;

                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            if (fieldNames.Contains("warning_description") && !reader.IsDBNull(reader.GetOrdinal("warning_description")))
                                row.warning_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warning_description")), typeof(string));
                            else
                                row.warning_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_SELECT_FORM_RSS_DELIVERY_TYPE_LOADING_ITEMSResult>> OMC_SELECT_FORM_RSS_DELIVERY_TYPE_LOADING_ITEMSAsync (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> loading_id)
        {

            List<OMC_SELECT_FORM_RSS_DELIVERY_TYPE_LOADING_ITEMSResult> result = new List<OMC_SELECT_FORM_RSS_DELIVERY_TYPE_LOADING_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_RSS_DELIVERY_TYPE_LOADING_ITEMS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_RSS_DELIVERY_TYPE_LOADING_ITEMSResult row = new OMC_SELECT_FORM_RSS_DELIVERY_TYPE_LOADING_ITEMSResult();
                            if (fieldNames.Contains("item_code") && !reader.IsDBNull(reader.GetOrdinal("item_code")))
                                row.item_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_code")), typeof(string));
                            else
                                row.item_code = null;

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_description")))
                                row.subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_description")), typeof(string));
                            else
                                row.subcontractor_description = null;

                            if (fieldNames.Contains("lno_description") && !reader.IsDBNull(reader.GetOrdinal("lno_description")))
                                row.lno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_description")), typeof(string));
                            else
                                row.lno_description = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));
                            else
                                row.ekk_code = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("additional_properties") && !reader.IsDBNull(reader.GetOrdinal("additional_properties")))
                                row.additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_properties")), typeof(string));
                            else
                                row.additional_properties = null;

                            if (fieldNames.Contains("package_contents") && !reader.IsDBNull(reader.GetOrdinal("package_contents")))
                                row.package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_contents")), typeof(string));
                            else
                                row.package_contents = null;

                            if (fieldNames.Contains("manufacturer") && !reader.IsDBNull(reader.GetOrdinal("manufacturer")))
                                row.manufacturer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"manufacturer")), typeof(string));
                            else
                                row.manufacturer = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("summary2") && !reader.IsDBNull(reader.GetOrdinal("summary2")))
                                row.summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary2")), typeof(string));
                            else
                                row.summary2 = null;

                            if (fieldNames.Contains("rss_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("rss_delivery_type_description")))
                                row.rss_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"rss_delivery_type_description")), typeof(string));
                            else
                                row.rss_delivery_type_description = null;

                            if (fieldNames.Contains("suggested_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_description")))
                                row.suggested_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_description")), typeof(string));
                            else
                                row.suggested_delivery_type_description = null;

                            if (fieldNames.Contains("delivery_type_1") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_1")))
                                row.delivery_type_1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_1")), typeof(string));
                            else
                                row.delivery_type_1 = null;

                            if (fieldNames.Contains("delivery_type_2") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_2")))
                                row.delivery_type_2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_2")), typeof(string));
                            else
                                row.delivery_type_2 = null;

                            if (fieldNames.Contains("delivery_type_3") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_3")))
                                row.delivery_type_3 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_3")), typeof(string));
                            else
                                row.delivery_type_3 = null;

                            if (fieldNames.Contains("delivery_type_4") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_4")))
                                row.delivery_type_4 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_4")), typeof(string));
                            else
                                row.delivery_type_4 = null;

                            if (fieldNames.Contains("delivery_type_5") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_5")))
                                row.delivery_type_5 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_5")), typeof(string));
                            else
                                row.delivery_type_5 = null;

                            if (fieldNames.Contains("delivery_type_6") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_6")))
                                row.delivery_type_6 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_6")), typeof(string));
                            else
                                row.delivery_type_6 = null;

                            if (fieldNames.Contains("delivery_type_7") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_7")))
                                row.delivery_type_7 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_7")), typeof(string));
                            else
                                row.delivery_type_7 = null;

                            if (fieldNames.Contains("delivery_type_8") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_8")))
                                row.delivery_type_8 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_8")), typeof(string));
                            else
                                row.delivery_type_8 = null;

                            if (fieldNames.Contains("delivery_type_9") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_9")))
                                row.delivery_type_9 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_9")), typeof(string));
                            else
                                row.delivery_type_9 = null;

                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            if (fieldNames.Contains("warning_description") && !reader.IsDBNull(reader.GetOrdinal("warning_description")))
                                row.warning_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warning_description")), typeof(string));
                            else
                                row.warning_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_SELECT_FORM_RSS_DELIVERY_TYPE_TEMPLATEResult> OMC_SELECT_FORM_RSS_DELIVERY_TYPE_TEMPLATE (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> form_id)
        {

            List<OMC_SELECT_FORM_RSS_DELIVERY_TYPE_TEMPLATEResult> result = new List<OMC_SELECT_FORM_RSS_DELIVERY_TYPE_TEMPLATEResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_RSS_DELIVERY_TYPE_TEMPLATE";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_RSS_DELIVERY_TYPE_TEMPLATEResult row = new OMC_SELECT_FORM_RSS_DELIVERY_TYPE_TEMPLATEResult();
                            if (fieldNames.Contains("item_code") && !reader.IsDBNull(reader.GetOrdinal("item_code")))
                                row.item_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_code")), typeof(string));
                            else
                                row.item_code = null;

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_description")))
                                row.subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_description")), typeof(string));
                            else
                                row.subcontractor_description = null;

                            if (fieldNames.Contains("lno_description") && !reader.IsDBNull(reader.GetOrdinal("lno_description")))
                                row.lno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_description")), typeof(string));
                            else
                                row.lno_description = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));
                            else
                                row.ekk_code = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("additional_properties") && !reader.IsDBNull(reader.GetOrdinal("additional_properties")))
                                row.additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_properties")), typeof(string));
                            else
                                row.additional_properties = null;

                            if (fieldNames.Contains("package_contents") && !reader.IsDBNull(reader.GetOrdinal("package_contents")))
                                row.package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_contents")), typeof(string));
                            else
                                row.package_contents = null;

                            if (fieldNames.Contains("manufacturer") && !reader.IsDBNull(reader.GetOrdinal("manufacturer")))
                                row.manufacturer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"manufacturer")), typeof(string));
                            else
                                row.manufacturer = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("summary2") && !reader.IsDBNull(reader.GetOrdinal("summary2")))
                                row.summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary2")), typeof(string));
                            else
                                row.summary2 = null;

                            if (fieldNames.Contains("rss_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("rss_delivery_type_description")))
                                row.rss_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"rss_delivery_type_description")), typeof(string));
                            else
                                row.rss_delivery_type_description = null;

                            if (fieldNames.Contains("suggested_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_description")))
                                row.suggested_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_description")), typeof(string));
                            else
                                row.suggested_delivery_type_description = null;

                            if (fieldNames.Contains("delivery_type_1") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_1")))
                                row.delivery_type_1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_1")), typeof(string));

                            if (fieldNames.Contains("delivery_type_2") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_2")))
                                row.delivery_type_2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_2")), typeof(string));

                            if (fieldNames.Contains("delivery_type_3") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_3")))
                                row.delivery_type_3 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_3")), typeof(string));

                            if (fieldNames.Contains("delivery_type_4") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_4")))
                                row.delivery_type_4 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_4")), typeof(string));

                            if (fieldNames.Contains("delivery_type_5") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_5")))
                                row.delivery_type_5 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_5")), typeof(string));

                            if (fieldNames.Contains("delivery_type_6") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_6")))
                                row.delivery_type_6 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_6")), typeof(string));

                            if (fieldNames.Contains("delivery_type_7") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_7")))
                                row.delivery_type_7 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_7")), typeof(string));

                            if (fieldNames.Contains("delivery_type_8") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_8")))
                                row.delivery_type_8 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_8")), typeof(string));

                            if (fieldNames.Contains("delivery_type_9") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_9")))
                                row.delivery_type_9 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_9")), typeof(string));

                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));

                            if (fieldNames.Contains("warning_description") && !reader.IsDBNull(reader.GetOrdinal("warning_description")))
                                row.warning_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warning_description")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_SELECT_FORM_RSS_DELIVERY_TYPE_TEMPLATEResult>> OMC_SELECT_FORM_RSS_DELIVERY_TYPE_TEMPLATEAsync (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> form_id)
        {

            List<OMC_SELECT_FORM_RSS_DELIVERY_TYPE_TEMPLATEResult> result = new List<OMC_SELECT_FORM_RSS_DELIVERY_TYPE_TEMPLATEResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_RSS_DELIVERY_TYPE_TEMPLATE";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_RSS_DELIVERY_TYPE_TEMPLATEResult row = new OMC_SELECT_FORM_RSS_DELIVERY_TYPE_TEMPLATEResult();
                            if (fieldNames.Contains("item_code") && !reader.IsDBNull(reader.GetOrdinal("item_code")))
                                row.item_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_code")), typeof(string));
                            else
                                row.item_code = null;

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_description")))
                                row.subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_description")), typeof(string));
                            else
                                row.subcontractor_description = null;

                            if (fieldNames.Contains("lno_description") && !reader.IsDBNull(reader.GetOrdinal("lno_description")))
                                row.lno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno_description")), typeof(string));
                            else
                                row.lno_description = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));
                            else
                                row.ekk_code = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("additional_properties") && !reader.IsDBNull(reader.GetOrdinal("additional_properties")))
                                row.additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_properties")), typeof(string));
                            else
                                row.additional_properties = null;

                            if (fieldNames.Contains("package_contents") && !reader.IsDBNull(reader.GetOrdinal("package_contents")))
                                row.package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_contents")), typeof(string));
                            else
                                row.package_contents = null;

                            if (fieldNames.Contains("manufacturer") && !reader.IsDBNull(reader.GetOrdinal("manufacturer")))
                                row.manufacturer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"manufacturer")), typeof(string));
                            else
                                row.manufacturer = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("summary2") && !reader.IsDBNull(reader.GetOrdinal("summary2")))
                                row.summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary2")), typeof(string));
                            else
                                row.summary2 = null;

                            if (fieldNames.Contains("rss_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("rss_delivery_type_description")))
                                row.rss_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"rss_delivery_type_description")), typeof(string));
                            else
                                row.rss_delivery_type_description = null;

                            if (fieldNames.Contains("suggested_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_description")))
                                row.suggested_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_description")), typeof(string));
                            else
                                row.suggested_delivery_type_description = null;

                            if (fieldNames.Contains("delivery_type_1") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_1")))
                                row.delivery_type_1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_1")), typeof(string));

                            if (fieldNames.Contains("delivery_type_2") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_2")))
                                row.delivery_type_2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_2")), typeof(string));

                            if (fieldNames.Contains("delivery_type_3") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_3")))
                                row.delivery_type_3 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_3")), typeof(string));

                            if (fieldNames.Contains("delivery_type_4") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_4")))
                                row.delivery_type_4 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_4")), typeof(string));

                            if (fieldNames.Contains("delivery_type_5") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_5")))
                                row.delivery_type_5 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_5")), typeof(string));

                            if (fieldNames.Contains("delivery_type_6") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_6")))
                                row.delivery_type_6 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_6")), typeof(string));

                            if (fieldNames.Contains("delivery_type_7") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_7")))
                                row.delivery_type_7 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_7")), typeof(string));

                            if (fieldNames.Contains("delivery_type_8") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_8")))
                                row.delivery_type_8 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_8")), typeof(string));

                            if (fieldNames.Contains("delivery_type_9") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_9")))
                                row.delivery_type_9 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_9")), typeof(string));

                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));

                            if (fieldNames.Contains("warning_description") && !reader.IsDBNull(reader.GetOrdinal("warning_description")))
                                row.warning_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warning_description")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_SELECT_FORM_SVR_DELIVERY_TYPE_LOADING_ITEMSResult> OMC_SELECT_FORM_SVR_DELIVERY_TYPE_LOADING_ITEMS (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> loading_id)
        {

            List<OMC_SELECT_FORM_SVR_DELIVERY_TYPE_LOADING_ITEMSResult> result = new List<OMC_SELECT_FORM_SVR_DELIVERY_TYPE_LOADING_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_SVR_DELIVERY_TYPE_LOADING_ITEMS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_SVR_DELIVERY_TYPE_LOADING_ITEMSResult row = new OMC_SELECT_FORM_SVR_DELIVERY_TYPE_LOADING_ITEMSResult();
                            if (fieldNames.Contains("item_code") && !reader.IsDBNull(reader.GetOrdinal("item_code")))
                                row.item_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_code")), typeof(string));
                            else
                                row.item_code = null;

                            if (fieldNames.Contains("phase") && !reader.IsDBNull(reader.GetOrdinal("phase")))
                                row.phase = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phase")), typeof(string));
                            else
                                row.phase = null;

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("add_info") && !reader.IsDBNull(reader.GetOrdinal("add_info")))
                                row.add_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"add_info")), typeof(string));
                            else
                                row.add_info = null;

                            if (fieldNames.Contains("svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("svr_delivery_type")))
                                row.svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"svr_delivery_type")), typeof(string));
                            else
                                row.svr_delivery_type = null;

                            if (fieldNames.Contains("suggested_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_description")))
                                row.suggested_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_description")), typeof(string));
                            else
                                row.suggested_delivery_type_description = null;

                            if (fieldNames.Contains("delivery_type_1") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_1")))
                                row.delivery_type_1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_1")), typeof(string));
                            else
                                row.delivery_type_1 = null;

                            if (fieldNames.Contains("delivery_type_2") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_2")))
                                row.delivery_type_2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_2")), typeof(string));
                            else
                                row.delivery_type_2 = null;

                            if (fieldNames.Contains("delivery_type_3") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_3")))
                                row.delivery_type_3 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_3")), typeof(string));
                            else
                                row.delivery_type_3 = null;

                            if (fieldNames.Contains("delivery_type_4") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_4")))
                                row.delivery_type_4 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_4")), typeof(string));
                            else
                                row.delivery_type_4 = null;

                            if (fieldNames.Contains("delivery_type_5") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_5")))
                                row.delivery_type_5 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_5")), typeof(string));
                            else
                                row.delivery_type_5 = null;

                            if (fieldNames.Contains("delivery_type_6") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_6")))
                                row.delivery_type_6 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_6")), typeof(string));
                            else
                                row.delivery_type_6 = null;

                            if (fieldNames.Contains("delivery_type_7") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_7")))
                                row.delivery_type_7 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_7")), typeof(string));
                            else
                                row.delivery_type_7 = null;

                            if (fieldNames.Contains("delivery_type_8") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_8")))
                                row.delivery_type_8 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_8")), typeof(string));
                            else
                                row.delivery_type_8 = null;

                            if (fieldNames.Contains("delivery_type_9") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_9")))
                                row.delivery_type_9 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_9")), typeof(string));
                            else
                                row.delivery_type_9 = null;

                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            if (fieldNames.Contains("warning_description") && !reader.IsDBNull(reader.GetOrdinal("warning_description")))
                                row.warning_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warning_description")), typeof(string));
                            else
                                row.warning_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_SELECT_FORM_SVR_DELIVERY_TYPE_LOADING_ITEMSResult>> OMC_SELECT_FORM_SVR_DELIVERY_TYPE_LOADING_ITEMSAsync (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> loading_id)
        {

            List<OMC_SELECT_FORM_SVR_DELIVERY_TYPE_LOADING_ITEMSResult> result = new List<OMC_SELECT_FORM_SVR_DELIVERY_TYPE_LOADING_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_SVR_DELIVERY_TYPE_LOADING_ITEMS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_SVR_DELIVERY_TYPE_LOADING_ITEMSResult row = new OMC_SELECT_FORM_SVR_DELIVERY_TYPE_LOADING_ITEMSResult();
                            if (fieldNames.Contains("item_code") && !reader.IsDBNull(reader.GetOrdinal("item_code")))
                                row.item_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_code")), typeof(string));
                            else
                                row.item_code = null;

                            if (fieldNames.Contains("phase") && !reader.IsDBNull(reader.GetOrdinal("phase")))
                                row.phase = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phase")), typeof(string));
                            else
                                row.phase = null;

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("add_info") && !reader.IsDBNull(reader.GetOrdinal("add_info")))
                                row.add_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"add_info")), typeof(string));
                            else
                                row.add_info = null;

                            if (fieldNames.Contains("svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("svr_delivery_type")))
                                row.svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"svr_delivery_type")), typeof(string));
                            else
                                row.svr_delivery_type = null;

                            if (fieldNames.Contains("suggested_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_description")))
                                row.suggested_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_description")), typeof(string));
                            else
                                row.suggested_delivery_type_description = null;

                            if (fieldNames.Contains("delivery_type_1") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_1")))
                                row.delivery_type_1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_1")), typeof(string));
                            else
                                row.delivery_type_1 = null;

                            if (fieldNames.Contains("delivery_type_2") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_2")))
                                row.delivery_type_2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_2")), typeof(string));
                            else
                                row.delivery_type_2 = null;

                            if (fieldNames.Contains("delivery_type_3") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_3")))
                                row.delivery_type_3 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_3")), typeof(string));
                            else
                                row.delivery_type_3 = null;

                            if (fieldNames.Contains("delivery_type_4") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_4")))
                                row.delivery_type_4 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_4")), typeof(string));
                            else
                                row.delivery_type_4 = null;

                            if (fieldNames.Contains("delivery_type_5") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_5")))
                                row.delivery_type_5 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_5")), typeof(string));
                            else
                                row.delivery_type_5 = null;

                            if (fieldNames.Contains("delivery_type_6") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_6")))
                                row.delivery_type_6 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_6")), typeof(string));
                            else
                                row.delivery_type_6 = null;

                            if (fieldNames.Contains("delivery_type_7") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_7")))
                                row.delivery_type_7 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_7")), typeof(string));
                            else
                                row.delivery_type_7 = null;

                            if (fieldNames.Contains("delivery_type_8") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_8")))
                                row.delivery_type_8 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_8")), typeof(string));
                            else
                                row.delivery_type_8 = null;

                            if (fieldNames.Contains("delivery_type_9") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_9")))
                                row.delivery_type_9 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_9")), typeof(string));
                            else
                                row.delivery_type_9 = null;

                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            if (fieldNames.Contains("warning_description") && !reader.IsDBNull(reader.GetOrdinal("warning_description")))
                                row.warning_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warning_description")), typeof(string));
                            else
                                row.warning_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<OMC_SELECT_FORM_SVR_DELIVERY_TYPE_TEMPLATEResult> OMC_SELECT_FORM_SVR_DELIVERY_TYPE_TEMPLATE (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> form_id)
        {

            List<OMC_SELECT_FORM_SVR_DELIVERY_TYPE_TEMPLATEResult> result = new List<OMC_SELECT_FORM_SVR_DELIVERY_TYPE_TEMPLATEResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_SVR_DELIVERY_TYPE_TEMPLATE";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_SVR_DELIVERY_TYPE_TEMPLATEResult row = new OMC_SELECT_FORM_SVR_DELIVERY_TYPE_TEMPLATEResult();
                            if (fieldNames.Contains("item_code") && !reader.IsDBNull(reader.GetOrdinal("item_code")))
                                row.item_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_code")), typeof(string));
                            else
                                row.item_code = null;

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("phase") && !reader.IsDBNull(reader.GetOrdinal("phase")))
                                row.phase = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phase")), typeof(string));
                            else
                                row.phase = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("add_info") && !reader.IsDBNull(reader.GetOrdinal("add_info")))
                                row.add_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"add_info")), typeof(string));
                            else
                                row.add_info = null;

                            if (fieldNames.Contains("svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("svr_delivery_type")))
                                row.svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"svr_delivery_type")), typeof(string));
                            else
                                row.svr_delivery_type = null;

                            if (fieldNames.Contains("suggested_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_description")))
                                row.suggested_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_description")), typeof(string));
                            else
                                row.suggested_delivery_type_description = null;

                            if (fieldNames.Contains("delivery_type_1") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_1")))
                                row.delivery_type_1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_1")), typeof(string));

                            if (fieldNames.Contains("delivery_type_2") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_2")))
                                row.delivery_type_2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_2")), typeof(string));

                            if (fieldNames.Contains("delivery_type_3") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_3")))
                                row.delivery_type_3 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_3")), typeof(string));

                            if (fieldNames.Contains("delivery_type_4") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_4")))
                                row.delivery_type_4 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_4")), typeof(string));

                            if (fieldNames.Contains("delivery_type_5") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_5")))
                                row.delivery_type_5 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_5")), typeof(string));

                            if (fieldNames.Contains("delivery_type_6") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_6")))
                                row.delivery_type_6 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_6")), typeof(string));

                            if (fieldNames.Contains("delivery_type_7") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_7")))
                                row.delivery_type_7 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_7")), typeof(string));

                            if (fieldNames.Contains("delivery_type_8") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_8")))
                                row.delivery_type_8 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_8")), typeof(string));

                            if (fieldNames.Contains("delivery_type_9") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_9")))
                                row.delivery_type_9 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_9")), typeof(string));

                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));

                            if (fieldNames.Contains("warning_description") && !reader.IsDBNull(reader.GetOrdinal("warning_description")))
                                row.warning_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warning_description")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<OMC_SELECT_FORM_SVR_DELIVERY_TYPE_TEMPLATEResult>> OMC_SELECT_FORM_SVR_DELIVERY_TYPE_TEMPLATEAsync (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> form_id)
        {

            List<OMC_SELECT_FORM_SVR_DELIVERY_TYPE_TEMPLATEResult> result = new List<OMC_SELECT_FORM_SVR_DELIVERY_TYPE_TEMPLATEResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OMC_SELECT_FORM_SVR_DELIVERY_TYPE_TEMPLATE";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter form_idParameter = cmd.CreateParameter();
                    form_idParameter.ParameterName = "form_id";
                    form_idParameter.Direction = ParameterDirection.Input;
                    form_idParameter.DbType = DbType.Int32;
                    form_idParameter.Precision = 10;
                    form_idParameter.Scale = 0;
                    if (form_id.HasValue)
                    {
                        form_idParameter.Value = form_id.Value;
                    }
                    else
                    {
                        form_idParameter.Size = -1;
                        form_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(form_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            OMC_SELECT_FORM_SVR_DELIVERY_TYPE_TEMPLATEResult row = new OMC_SELECT_FORM_SVR_DELIVERY_TYPE_TEMPLATEResult();
                            if (fieldNames.Contains("item_code") && !reader.IsDBNull(reader.GetOrdinal("item_code")))
                                row.item_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_code")), typeof(string));
                            else
                                row.item_code = null;

                            if (fieldNames.Contains("local_estimate_number") && !reader.IsDBNull(reader.GetOrdinal("local_estimate_number")))
                                row.local_estimate_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"local_estimate_number")), typeof(string));
                            else
                                row.local_estimate_number = null;

                            if (fieldNames.Contains("project_documentation_code") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_code")))
                                row.project_documentation_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_code")), typeof(string));
                            else
                                row.project_documentation_code = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(string));
                            else
                                row.number = null;

                            if (fieldNames.Contains("resource_code") && !reader.IsDBNull(reader.GetOrdinal("resource_code")))
                                row.resource_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"resource_code")), typeof(string));
                            else
                                row.resource_code = null;

                            if (fieldNames.Contains("phase") && !reader.IsDBNull(reader.GetOrdinal("phase")))
                                row.phase = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phase")), typeof(string));
                            else
                                row.phase = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("add_info") && !reader.IsDBNull(reader.GetOrdinal("add_info")))
                                row.add_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"add_info")), typeof(string));
                            else
                                row.add_info = null;

                            if (fieldNames.Contains("svr_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("svr_delivery_type")))
                                row.svr_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"svr_delivery_type")), typeof(string));
                            else
                                row.svr_delivery_type = null;

                            if (fieldNames.Contains("suggested_delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("suggested_delivery_type_description")))
                                row.suggested_delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"suggested_delivery_type_description")), typeof(string));
                            else
                                row.suggested_delivery_type_description = null;

                            if (fieldNames.Contains("delivery_type_1") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_1")))
                                row.delivery_type_1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_1")), typeof(string));

                            if (fieldNames.Contains("delivery_type_2") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_2")))
                                row.delivery_type_2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_2")), typeof(string));

                            if (fieldNames.Contains("delivery_type_3") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_3")))
                                row.delivery_type_3 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_3")), typeof(string));

                            if (fieldNames.Contains("delivery_type_4") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_4")))
                                row.delivery_type_4 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_4")), typeof(string));

                            if (fieldNames.Contains("delivery_type_5") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_5")))
                                row.delivery_type_5 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_5")), typeof(string));

                            if (fieldNames.Contains("delivery_type_6") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_6")))
                                row.delivery_type_6 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_6")), typeof(string));

                            if (fieldNames.Contains("delivery_type_7") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_7")))
                                row.delivery_type_7 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_7")), typeof(string));

                            if (fieldNames.Contains("delivery_type_8") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_8")))
                                row.delivery_type_8 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_8")), typeof(string));

                            if (fieldNames.Contains("delivery_type_9") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_9")))
                                row.delivery_type_9 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_9")), typeof(string));

                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));

                            if (fieldNames.Contains("warning_description") && !reader.IsDBNull(reader.GetOrdinal("warning_description")))
                                row.warning_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warning_description")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> APL_DELETE_PROJECT_LOGISTICAL_NETWORK_OBJECTS (string id_list, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_DELETE_PROJECT_LOGISTICAL_NETWORK_OBJECTS";

                    DbParameter id_listParameter = cmd.CreateParameter();
                    id_listParameter.ParameterName = "id_list";
                    id_listParameter.Direction = ParameterDirection.Input;
                    id_listParameter.DbType = DbType.String;
                    if (id_list != null)
                    {
                        id_listParameter.Value = id_list;
                    }
                    else
                    {
                        id_listParameter.Size = -1;
                        id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(id_listParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> APL_DELETE_PROJECT_LOGISTICAL_NETWORK_OBJECTSAsync (string id_list, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_DELETE_PROJECT_LOGISTICAL_NETWORK_OBJECTS";

                    DbParameter id_listParameter = cmd.CreateParameter();
                    id_listParameter.ParameterName = "id_list";
                    id_listParameter.Direction = ParameterDirection.Input;
                    id_listParameter.DbType = DbType.String;
                    if (id_list != null)
                    {
                        id_listParameter.Value = id_list;
                    }
                    else
                    {
                        id_listParameter.Size = -1;
                        id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(id_listParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> APL_DELETE_SUBOBJECT (System.Nullable<int> id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_DELETE_SUBOBJECT";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> APL_DELETE_SUBOBJECTAsync (System.Nullable<int> id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_DELETE_SUBOBJECT";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> APL_DELETE_PROJECT_DOCUMENTATIONS (string id_list_parent0, string id_list_parent1, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_DELETE_PROJECT_DOCUMENTATIONS";

                    DbParameter id_list_parent0Parameter = cmd.CreateParameter();
                    id_list_parent0Parameter.ParameterName = "id_list_parent0";
                    id_list_parent0Parameter.Direction = ParameterDirection.Input;
                    id_list_parent0Parameter.DbType = DbType.String;
                    if (id_list_parent0 != null)
                    {
                        id_list_parent0Parameter.Value = id_list_parent0;
                    }
                    else
                    {
                        id_list_parent0Parameter.Size = -1;
                        id_list_parent0Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(id_list_parent0Parameter);

                    DbParameter id_list_parent1Parameter = cmd.CreateParameter();
                    id_list_parent1Parameter.ParameterName = "id_list_parent1";
                    id_list_parent1Parameter.Direction = ParameterDirection.Input;
                    id_list_parent1Parameter.DbType = DbType.String;
                    if (id_list_parent1 != null)
                    {
                        id_list_parent1Parameter.Value = id_list_parent1;
                    }
                    else
                    {
                        id_list_parent1Parameter.Size = -1;
                        id_list_parent1Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(id_list_parent1Parameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> APL_DELETE_PROJECT_DOCUMENTATIONSAsync (string id_list_parent0, string id_list_parent1, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_DELETE_PROJECT_DOCUMENTATIONS";

                    DbParameter id_list_parent0Parameter = cmd.CreateParameter();
                    id_list_parent0Parameter.ParameterName = "id_list_parent0";
                    id_list_parent0Parameter.Direction = ParameterDirection.Input;
                    id_list_parent0Parameter.DbType = DbType.String;
                    if (id_list_parent0 != null)
                    {
                        id_list_parent0Parameter.Value = id_list_parent0;
                    }
                    else
                    {
                        id_list_parent0Parameter.Size = -1;
                        id_list_parent0Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(id_list_parent0Parameter);

                    DbParameter id_list_parent1Parameter = cmd.CreateParameter();
                    id_list_parent1Parameter.ParameterName = "id_list_parent1";
                    id_list_parent1Parameter.Direction = ParameterDirection.Input;
                    id_list_parent1Parameter.DbType = DbType.String;
                    if (id_list_parent1 != null)
                    {
                        id_list_parent1Parameter.Value = id_list_parent1;
                    }
                    else
                    {
                        id_list_parent1Parameter.Size = -1;
                        id_list_parent1Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(id_list_parent1Parameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> APL_DELETE_PROJECT_STATIONINGS (string id_list, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_DELETE_PROJECT_STATIONINGS";

                    DbParameter id_listParameter = cmd.CreateParameter();
                    id_listParameter.ParameterName = "id_list";
                    id_listParameter.Direction = ParameterDirection.Input;
                    id_listParameter.DbType = DbType.String;
                    if (id_list != null)
                    {
                        id_listParameter.Value = id_list;
                    }
                    else
                    {
                        id_listParameter.Size = -1;
                        id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(id_listParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> APL_DELETE_PROJECT_STATIONINGSAsync (string id_list, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_DELETE_PROJECT_STATIONINGS";

                    DbParameter id_listParameter = cmd.CreateParameter();
                    id_listParameter.ParameterName = "id_list";
                    id_listParameter.Direction = ParameterDirection.Input;
                    id_listParameter.DbType = DbType.String;
                    if (id_list != null)
                    {
                        id_listParameter.Value = id_list;
                    }
                    else
                    {
                        id_listParameter.Size = -1;
                        id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(id_listParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> APL_DELETE_OBJECT_SUBCONTRACTORS (string id_list, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_DELETE_OBJECT_SUBCONTRACTORS";

                    DbParameter id_listParameter = cmd.CreateParameter();
                    id_listParameter.ParameterName = "id_list";
                    id_listParameter.Direction = ParameterDirection.Input;
                    id_listParameter.DbType = DbType.String;
                    if (id_list != null)
                    {
                        id_listParameter.Value = id_list;
                    }
                    else
                    {
                        id_listParameter.Size = -1;
                        id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(id_listParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> APL_DELETE_OBJECT_SUBCONTRACTORSAsync (string id_list, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_DELETE_OBJECT_SUBCONTRACTORS";

                    DbParameter id_listParameter = cmd.CreateParameter();
                    id_listParameter.ParameterName = "id_list";
                    id_listParameter.Direction = ParameterDirection.Input;
                    id_listParameter.DbType = DbType.String;
                    if (id_list != null)
                    {
                        id_listParameter.Value = id_list;
                    }
                    else
                    {
                        id_listParameter.Size = -1;
                        id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(id_listParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<SYS_SELECT_LOGResult> SYS_SELECT_LOG (System.Nullable<int> real_user_id, System.Nullable<System.DateTime> start_time, System.Nullable<System.DateTime> finish_time)
        {

            List<SYS_SELECT_LOGResult> result = new List<SYS_SELECT_LOGResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_LOG";

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter start_timeParameter = cmd.CreateParameter();
                    start_timeParameter.ParameterName = "start_time";
                    start_timeParameter.Direction = ParameterDirection.Input;
                    start_timeParameter.DbType = DbType.DateTime;
                    if (start_time.HasValue)
                    {
                        start_timeParameter.Value = start_time.Value;
                    }
                    else
                    {
                        start_timeParameter.Size = -1;
                        start_timeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(start_timeParameter);

                    DbParameter finish_timeParameter = cmd.CreateParameter();
                    finish_timeParameter.ParameterName = "finish_time";
                    finish_timeParameter.Direction = ParameterDirection.Input;
                    finish_timeParameter.DbType = DbType.DateTime;
                    if (finish_time.HasValue)
                    {
                        finish_timeParameter.Value = finish_time.Value;
                    }
                    else
                    {
                        finish_timeParameter.Size = -1;
                        finish_timeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finish_timeParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_LOGResult row = new SYS_SELECT_LOGResult();
                            if (fieldNames.Contains("user_description") && !reader.IsDBNull(reader.GetOrdinal("user_description")))
                                row.user_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"user_description")), typeof(string));
                            else
                                row.user_description = null;

                            if (fieldNames.Contains("action_type") && !reader.IsDBNull(reader.GetOrdinal("action_type")))
                                row.action_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_type")), typeof(string));

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("action_description") && !reader.IsDBNull(reader.GetOrdinal("action_description")))
                                row.action_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_description")), typeof(string));
                            else
                                row.action_description = null;

                            if (fieldNames.Contains("start_date") && !reader.IsDBNull(reader.GetOrdinal("start_date")))
                                row.start_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start_date")), typeof(System.DateTime));
                            else
                                row.start_date = null;

                            if (fieldNames.Contains("finish_date") && !reader.IsDBNull(reader.GetOrdinal("finish_date")))
                                row.finish_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish_date")), typeof(System.DateTime));
                            else
                                row.finish_date = null;

                            if (fieldNames.Contains("file_date") && !reader.IsDBNull(reader.GetOrdinal("file_date")))
                                row.file_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"file_date")), typeof(System.DateTime));
                            else
                                row.file_date = null;

                            if (fieldNames.Contains("file_description") && !reader.IsDBNull(reader.GetOrdinal("file_description")))
                                row.file_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"file_description")), typeof(string));
                            else
                                row.file_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SYS_SELECT_LOGResult>> SYS_SELECT_LOGAsync (System.Nullable<int> real_user_id, System.Nullable<System.DateTime> start_time, System.Nullable<System.DateTime> finish_time)
        {

            List<SYS_SELECT_LOGResult> result = new List<SYS_SELECT_LOGResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SYS_SELECT_LOG";

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter start_timeParameter = cmd.CreateParameter();
                    start_timeParameter.ParameterName = "start_time";
                    start_timeParameter.Direction = ParameterDirection.Input;
                    start_timeParameter.DbType = DbType.DateTime;
                    if (start_time.HasValue)
                    {
                        start_timeParameter.Value = start_time.Value;
                    }
                    else
                    {
                        start_timeParameter.Size = -1;
                        start_timeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(start_timeParameter);

                    DbParameter finish_timeParameter = cmd.CreateParameter();
                    finish_timeParameter.ParameterName = "finish_time";
                    finish_timeParameter.Direction = ParameterDirection.Input;
                    finish_timeParameter.DbType = DbType.DateTime;
                    if (finish_time.HasValue)
                    {
                        finish_timeParameter.Value = finish_time.Value;
                    }
                    else
                    {
                        finish_timeParameter.Size = -1;
                        finish_timeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finish_timeParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SYS_SELECT_LOGResult row = new SYS_SELECT_LOGResult();
                            if (fieldNames.Contains("user_description") && !reader.IsDBNull(reader.GetOrdinal("user_description")))
                                row.user_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"user_description")), typeof(string));
                            else
                                row.user_description = null;

                            if (fieldNames.Contains("action_type") && !reader.IsDBNull(reader.GetOrdinal("action_type")))
                                row.action_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_type")), typeof(string));

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("action_description") && !reader.IsDBNull(reader.GetOrdinal("action_description")))
                                row.action_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"action_description")), typeof(string));
                            else
                                row.action_description = null;

                            if (fieldNames.Contains("start_date") && !reader.IsDBNull(reader.GetOrdinal("start_date")))
                                row.start_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start_date")), typeof(System.DateTime));
                            else
                                row.start_date = null;

                            if (fieldNames.Contains("finish_date") && !reader.IsDBNull(reader.GetOrdinal("finish_date")))
                                row.finish_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish_date")), typeof(System.DateTime));
                            else
                                row.finish_date = null;

                            if (fieldNames.Contains("file_date") && !reader.IsDBNull(reader.GetOrdinal("file_date")))
                                row.file_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"file_date")), typeof(System.DateTime));
                            else
                                row.file_date = null;

                            if (fieldNames.Contains("file_description") && !reader.IsDBNull(reader.GetOrdinal("file_description")))
                                row.file_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"file_description")), typeof(string));
                            else
                                row.file_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECTS_FOR_REQUIREMENTSResult> APL_SELECT_PROJECTS_FOR_REQUIREMENTS (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<bool> hide_closed, System.Nullable<bool> show_mine)
        {

            List<APL_SELECT_PROJECTS_FOR_REQUIREMENTSResult> result = new List<APL_SELECT_PROJECTS_FOR_REQUIREMENTSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECTS_FOR_REQUIREMENTS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter hide_closedParameter = cmd.CreateParameter();
                    hide_closedParameter.ParameterName = "hide_closed";
                    hide_closedParameter.Direction = ParameterDirection.Input;
                    hide_closedParameter.DbType = DbType.Boolean;
                    if (hide_closed.HasValue)
                    {
                        hide_closedParameter.Value = hide_closed.Value;
                    }
                    else
                    {
                        hide_closedParameter.Size = -1;
                        hide_closedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(hide_closedParameter);

                    DbParameter show_mineParameter = cmd.CreateParameter();
                    show_mineParameter.ParameterName = "show_mine";
                    show_mineParameter.Direction = ParameterDirection.Input;
                    show_mineParameter.DbType = DbType.Boolean;
                    if (show_mine.HasValue)
                    {
                        show_mineParameter.Value = show_mine.Value;
                    }
                    else
                    {
                        show_mineParameter.Size = -1;
                        show_mineParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_mineParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECTS_FOR_REQUIREMENTSResult row = new APL_SELECT_PROJECTS_FOR_REQUIREMENTSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("project_code") && !reader.IsDBNull(reader.GetOrdinal("project_code")))
                                row.project_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_code")), typeof(string));
                            else
                                row.project_code = null;

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("project_type") && !reader.IsDBNull(reader.GetOrdinal("project_type")))
                                row.project_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_type")), typeof(string));
                            else
                                row.project_type = null;

                            if (fieldNames.Contains("project_state") && !reader.IsDBNull(reader.GetOrdinal("project_state")))
                                row.project_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_state")), typeof(string));
                            else
                                row.project_state = null;

                            if (fieldNames.Contains("cnt_total") && !reader.IsDBNull(reader.GetOrdinal("cnt_total")))
                                row.cnt_total = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cnt_total")), typeof(int));
                            else
                                row.cnt_total = null;

                            if (fieldNames.Contains("unsi_declined") && !reader.IsDBNull(reader.GetOrdinal("unsi_declined")))
                                row.unsi_declined = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unsi_declined")), typeof(int));
                            else
                                row.unsi_declined = null;

                            if (fieldNames.Contains("dmtos_declined") && !reader.IsDBNull(reader.GetOrdinal("dmtos_declined")))
                                row.dmtos_declined = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dmtos_declined")), typeof(int));
                            else
                                row.dmtos_declined = null;

                            if (fieldNames.Contains("not_in_kv") && !reader.IsDBNull(reader.GetOrdinal("not_in_kv")))
                                row.not_in_kv = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"not_in_kv")), typeof(int));
                            else
                                row.not_in_kv = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECTS_FOR_REQUIREMENTSResult>> APL_SELECT_PROJECTS_FOR_REQUIREMENTSAsync (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<bool> hide_closed, System.Nullable<bool> show_mine)
        {

            List<APL_SELECT_PROJECTS_FOR_REQUIREMENTSResult> result = new List<APL_SELECT_PROJECTS_FOR_REQUIREMENTSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECTS_FOR_REQUIREMENTS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter hide_closedParameter = cmd.CreateParameter();
                    hide_closedParameter.ParameterName = "hide_closed";
                    hide_closedParameter.Direction = ParameterDirection.Input;
                    hide_closedParameter.DbType = DbType.Boolean;
                    if (hide_closed.HasValue)
                    {
                        hide_closedParameter.Value = hide_closed.Value;
                    }
                    else
                    {
                        hide_closedParameter.Size = -1;
                        hide_closedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(hide_closedParameter);

                    DbParameter show_mineParameter = cmd.CreateParameter();
                    show_mineParameter.ParameterName = "show_mine";
                    show_mineParameter.Direction = ParameterDirection.Input;
                    show_mineParameter.DbType = DbType.Boolean;
                    if (show_mine.HasValue)
                    {
                        show_mineParameter.Value = show_mine.Value;
                    }
                    else
                    {
                        show_mineParameter.Size = -1;
                        show_mineParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_mineParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECTS_FOR_REQUIREMENTSResult row = new APL_SELECT_PROJECTS_FOR_REQUIREMENTSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("project_code") && !reader.IsDBNull(reader.GetOrdinal("project_code")))
                                row.project_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_code")), typeof(string));
                            else
                                row.project_code = null;

                            if (fieldNames.Contains("project_description") && !reader.IsDBNull(reader.GetOrdinal("project_description")))
                                row.project_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_description")), typeof(string));
                            else
                                row.project_description = null;

                            if (fieldNames.Contains("project_type") && !reader.IsDBNull(reader.GetOrdinal("project_type")))
                                row.project_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_type")), typeof(string));
                            else
                                row.project_type = null;

                            if (fieldNames.Contains("project_state") && !reader.IsDBNull(reader.GetOrdinal("project_state")))
                                row.project_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_state")), typeof(string));
                            else
                                row.project_state = null;

                            if (fieldNames.Contains("cnt_total") && !reader.IsDBNull(reader.GetOrdinal("cnt_total")))
                                row.cnt_total = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cnt_total")), typeof(int));
                            else
                                row.cnt_total = null;

                            if (fieldNames.Contains("unsi_declined") && !reader.IsDBNull(reader.GetOrdinal("unsi_declined")))
                                row.unsi_declined = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unsi_declined")), typeof(int));
                            else
                                row.unsi_declined = null;

                            if (fieldNames.Contains("dmtos_declined") && !reader.IsDBNull(reader.GetOrdinal("dmtos_declined")))
                                row.dmtos_declined = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dmtos_declined")), typeof(int));
                            else
                                row.dmtos_declined = null;

                            if (fieldNames.Contains("not_in_kv") && !reader.IsDBNull(reader.GetOrdinal("not_in_kv")))
                                row.not_in_kv = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"not_in_kv")), typeof(int));
                            else
                                row.not_in_kv = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECT_REQUIREMENTS_TOTAL_INFO2Result> APL_SELECT_PROJECT_REQUIREMENTS_TOTAL_INFO2 (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> project_id)
        {

            List<APL_SELECT_PROJECT_REQUIREMENTS_TOTAL_INFO2Result> result = new List<APL_SELECT_PROJECT_REQUIREMENTS_TOTAL_INFO2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_REQUIREMENTS_TOTAL_INFO2";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_REQUIREMENTS_TOTAL_INFO2Result row = new APL_SELECT_PROJECT_REQUIREMENTS_TOTAL_INFO2Result();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("subcontractor") && !reader.IsDBNull(reader.GetOrdinal("subcontractor")))
                                row.subcontractor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor")), typeof(string));
                            else
                                row.subcontractor = null;

                            if (fieldNames.Contains("station") && !reader.IsDBNull(reader.GetOrdinal("station")))
                                row.station = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"station")), typeof(string));
                            else
                                row.station = null;

                            if (fieldNames.Contains("project_documentation") && !reader.IsDBNull(reader.GetOrdinal("project_documentation")))
                                row.project_documentation = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation")), typeof(string));
                            else
                                row.project_documentation = null;

                            if (fieldNames.Contains("revision_number") && !reader.IsDBNull(reader.GetOrdinal("revision_number")))
                                row.revision_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_number")), typeof(string));
                            else
                                row.revision_number = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("package_content") && !reader.IsDBNull(reader.GetOrdinal("package_content")))
                                row.package_content = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_content")), typeof(string));
                            else
                                row.package_content = null;

                            if (fieldNames.Contains("additional_properties") && !reader.IsDBNull(reader.GetOrdinal("additional_properties")))
                                row.additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_properties")), typeof(string));
                            else
                                row.additional_properties = null;

                            if (fieldNames.Contains("manufacturer") && !reader.IsDBNull(reader.GetOrdinal("manufacturer")))
                                row.manufacturer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"manufacturer")), typeof(string));
                            else
                                row.manufacturer = null;

                            if (fieldNames.Contains("unit") && !reader.IsDBNull(reader.GetOrdinal("unit")))
                                row.unit = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit")), typeof(string));
                            else
                                row.unit = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("mass_size") && !reader.IsDBNull(reader.GetOrdinal("mass_size")))
                                row.mass_size = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_size")), typeof(string));
                            else
                                row.mass_size = null;

                            if (fieldNames.Contains("item_state") && !reader.IsDBNull(reader.GetOrdinal("item_state")))
                                row.item_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_state")), typeof(string));
                            else
                                row.item_state = null;

                            if (fieldNames.Contains("reason_change_state") && !reader.IsDBNull(reader.GetOrdinal("reason_change_state")))
                                row.reason_change_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"reason_change_state")), typeof(string));
                            else
                                row.reason_change_state = null;

                            if (fieldNames.Contains("delivery_type") && !reader.IsDBNull(reader.GetOrdinal("delivery_type")))
                                row.delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type")), typeof(string));
                            else
                                row.delivery_type = null;

                            if (fieldNames.Contains("goods_type") && !reader.IsDBNull(reader.GetOrdinal("goods_type")))
                                row.goods_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"goods_type")), typeof(string));
                            else
                                row.goods_type = null;

                            if (fieldNames.Contains("in_kd_description") && !reader.IsDBNull(reader.GetOrdinal("in_kd_description")))
                                row.in_kd_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"in_kd_description")), typeof(string));
                            else
                                row.in_kd_description = null;

                            if (fieldNames.Contains("psd_state_description") && !reader.IsDBNull(reader.GetOrdinal("psd_state_description")))
                                row.psd_state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"psd_state_description")), typeof(string));
                            else
                                row.psd_state_description = null;

                            if (fieldNames.Contains("pr_source_description") && !reader.IsDBNull(reader.GetOrdinal("pr_source_description")))
                                row.pr_source_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"pr_source_description")), typeof(string));
                            else
                                row.pr_source_description = null;

                            if (fieldNames.Contains("color") && !reader.IsDBNull(reader.GetOrdinal("color")))
                                row.color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_REQUIREMENTS_TOTAL_INFO2Result>> APL_SELECT_PROJECT_REQUIREMENTS_TOTAL_INFO2Async (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> project_id)
        {

            List<APL_SELECT_PROJECT_REQUIREMENTS_TOTAL_INFO2Result> result = new List<APL_SELECT_PROJECT_REQUIREMENTS_TOTAL_INFO2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_REQUIREMENTS_TOTAL_INFO2";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_REQUIREMENTS_TOTAL_INFO2Result row = new APL_SELECT_PROJECT_REQUIREMENTS_TOTAL_INFO2Result();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("subcontractor") && !reader.IsDBNull(reader.GetOrdinal("subcontractor")))
                                row.subcontractor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor")), typeof(string));
                            else
                                row.subcontractor = null;

                            if (fieldNames.Contains("station") && !reader.IsDBNull(reader.GetOrdinal("station")))
                                row.station = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"station")), typeof(string));
                            else
                                row.station = null;

                            if (fieldNames.Contains("project_documentation") && !reader.IsDBNull(reader.GetOrdinal("project_documentation")))
                                row.project_documentation = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation")), typeof(string));
                            else
                                row.project_documentation = null;

                            if (fieldNames.Contains("revision_number") && !reader.IsDBNull(reader.GetOrdinal("revision_number")))
                                row.revision_number = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_number")), typeof(string));
                            else
                                row.revision_number = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("package_content") && !reader.IsDBNull(reader.GetOrdinal("package_content")))
                                row.package_content = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_content")), typeof(string));
                            else
                                row.package_content = null;

                            if (fieldNames.Contains("additional_properties") && !reader.IsDBNull(reader.GetOrdinal("additional_properties")))
                                row.additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_properties")), typeof(string));
                            else
                                row.additional_properties = null;

                            if (fieldNames.Contains("manufacturer") && !reader.IsDBNull(reader.GetOrdinal("manufacturer")))
                                row.manufacturer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"manufacturer")), typeof(string));
                            else
                                row.manufacturer = null;

                            if (fieldNames.Contains("unit") && !reader.IsDBNull(reader.GetOrdinal("unit")))
                                row.unit = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit")), typeof(string));
                            else
                                row.unit = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("mass_size") && !reader.IsDBNull(reader.GetOrdinal("mass_size")))
                                row.mass_size = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_size")), typeof(string));
                            else
                                row.mass_size = null;

                            if (fieldNames.Contains("item_state") && !reader.IsDBNull(reader.GetOrdinal("item_state")))
                                row.item_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_state")), typeof(string));
                            else
                                row.item_state = null;

                            if (fieldNames.Contains("reason_change_state") && !reader.IsDBNull(reader.GetOrdinal("reason_change_state")))
                                row.reason_change_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"reason_change_state")), typeof(string));
                            else
                                row.reason_change_state = null;

                            if (fieldNames.Contains("delivery_type") && !reader.IsDBNull(reader.GetOrdinal("delivery_type")))
                                row.delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type")), typeof(string));
                            else
                                row.delivery_type = null;

                            if (fieldNames.Contains("goods_type") && !reader.IsDBNull(reader.GetOrdinal("goods_type")))
                                row.goods_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"goods_type")), typeof(string));
                            else
                                row.goods_type = null;

                            if (fieldNames.Contains("in_kd_description") && !reader.IsDBNull(reader.GetOrdinal("in_kd_description")))
                                row.in_kd_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"in_kd_description")), typeof(string));
                            else
                                row.in_kd_description = null;

                            if (fieldNames.Contains("psd_state_description") && !reader.IsDBNull(reader.GetOrdinal("psd_state_description")))
                                row.psd_state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"psd_state_description")), typeof(string));
                            else
                                row.psd_state_description = null;

                            if (fieldNames.Contains("pr_source_description") && !reader.IsDBNull(reader.GetOrdinal("pr_source_description")))
                                row.pr_source_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"pr_source_description")), typeof(string));
                            else
                                row.pr_source_description = null;

                            if (fieldNames.Contains("color") && !reader.IsDBNull(reader.GetOrdinal("color")))
                                row.color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_SELECT_GRID_SETTINGSResult> UI_SELECT_GRID_SETTINGS (System.Nullable<int> user_id, string stored_procedure, System.Nullable<int> param_id, System.Nullable<int> data_type_id)
        {

            List<UI_SELECT_GRID_SETTINGSResult> result = new List<UI_SELECT_GRID_SETTINGSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_GRID_SETTINGS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);

                    DbParameter param_idParameter = cmd.CreateParameter();
                    param_idParameter.ParameterName = "param_id";
                    param_idParameter.Direction = ParameterDirection.Input;
                    param_idParameter.DbType = DbType.Int32;
                    param_idParameter.Precision = 10;
                    param_idParameter.Scale = 0;
                    if (param_id.HasValue)
                    {
                        param_idParameter.Value = param_id.Value;
                    }
                    else
                    {
                        param_idParameter.Size = -1;
                        param_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(param_idParameter);

                    DbParameter data_type_idParameter = cmd.CreateParameter();
                    data_type_idParameter.ParameterName = "data_type_id";
                    data_type_idParameter.Direction = ParameterDirection.Input;
                    data_type_idParameter.DbType = DbType.Int32;
                    data_type_idParameter.Precision = 10;
                    data_type_idParameter.Scale = 0;
                    if (data_type_id.HasValue)
                    {
                        data_type_idParameter.Value = data_type_id.Value;
                    }
                    else
                    {
                        data_type_idParameter.Size = -1;
                        data_type_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(data_type_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_GRID_SETTINGSResult row = new UI_SELECT_GRID_SETTINGSResult();
                            if (fieldNames.Contains("global_visible") && !reader.IsDBNull(reader.GetOrdinal("global_visible")))
                                row.global_visible = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"global_visible")), typeof(bool));
                            else
                                row.global_visible = null;

                            if (fieldNames.Contains("global_editable") && !reader.IsDBNull(reader.GetOrdinal("global_editable")))
                                row.global_editable = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"global_editable")), typeof(bool));
                            else
                                row.global_editable = null;

                            if (fieldNames.Contains("field_description") && !reader.IsDBNull(reader.GetOrdinal("field_description")))
                                row.field_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"field_description")), typeof(string));
                            else
                                row.field_description = null;

                            if (fieldNames.Contains("russian_field_description") && !reader.IsDBNull(reader.GetOrdinal("russian_field_description")))
                                row.russian_field_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"russian_field_description")), typeof(string));
                            else
                                row.russian_field_description = null;

                            if (fieldNames.Contains("is_visible") && !reader.IsDBNull(reader.GetOrdinal("is_visible")))
                                row.is_visible = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_visible")), typeof(bool));
                            else
                                row.is_visible = null;

                            if (fieldNames.Contains("width") && !reader.IsDBNull(reader.GetOrdinal("width")))
                                row.width = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"width")), typeof(int));
                            else
                                row.width = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(int));
                            else
                                row.number = null;

                            if (fieldNames.Contains("is_required") && !reader.IsDBNull(reader.GetOrdinal("is_required")))
                                row.is_required = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_required")), typeof(bool));
                            else
                                row.is_required = null;

                            if (fieldNames.Contains("ui_type") && !reader.IsDBNull(reader.GetOrdinal("ui_type")))
                                row.ui_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ui_type")), typeof(string));
                            else
                                row.ui_type = null;

                            if (fieldNames.Contains("dropdown") && !reader.IsDBNull(reader.GetOrdinal("dropdown")))
                                row.dropdown = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dropdown")), typeof(string));
                            else
                                row.dropdown = null;

                            if (fieldNames.Contains("dropdown_param") && !reader.IsDBNull(reader.GetOrdinal("dropdown_param")))
                                row.dropdown_param = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dropdown_param")), typeof(string));
                            else
                                row.dropdown_param = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_SELECT_GRID_SETTINGSResult>> UI_SELECT_GRID_SETTINGSAsync (System.Nullable<int> user_id, string stored_procedure, System.Nullable<int> param_id, System.Nullable<int> data_type_id)
        {

            List<UI_SELECT_GRID_SETTINGSResult> result = new List<UI_SELECT_GRID_SETTINGSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_GRID_SETTINGS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);

                    DbParameter param_idParameter = cmd.CreateParameter();
                    param_idParameter.ParameterName = "param_id";
                    param_idParameter.Direction = ParameterDirection.Input;
                    param_idParameter.DbType = DbType.Int32;
                    param_idParameter.Precision = 10;
                    param_idParameter.Scale = 0;
                    if (param_id.HasValue)
                    {
                        param_idParameter.Value = param_id.Value;
                    }
                    else
                    {
                        param_idParameter.Size = -1;
                        param_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(param_idParameter);

                    DbParameter data_type_idParameter = cmd.CreateParameter();
                    data_type_idParameter.ParameterName = "data_type_id";
                    data_type_idParameter.Direction = ParameterDirection.Input;
                    data_type_idParameter.DbType = DbType.Int32;
                    data_type_idParameter.Precision = 10;
                    data_type_idParameter.Scale = 0;
                    if (data_type_id.HasValue)
                    {
                        data_type_idParameter.Value = data_type_id.Value;
                    }
                    else
                    {
                        data_type_idParameter.Size = -1;
                        data_type_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(data_type_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_GRID_SETTINGSResult row = new UI_SELECT_GRID_SETTINGSResult();
                            if (fieldNames.Contains("global_visible") && !reader.IsDBNull(reader.GetOrdinal("global_visible")))
                                row.global_visible = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"global_visible")), typeof(bool));
                            else
                                row.global_visible = null;

                            if (fieldNames.Contains("global_editable") && !reader.IsDBNull(reader.GetOrdinal("global_editable")))
                                row.global_editable = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"global_editable")), typeof(bool));
                            else
                                row.global_editable = null;

                            if (fieldNames.Contains("field_description") && !reader.IsDBNull(reader.GetOrdinal("field_description")))
                                row.field_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"field_description")), typeof(string));
                            else
                                row.field_description = null;

                            if (fieldNames.Contains("russian_field_description") && !reader.IsDBNull(reader.GetOrdinal("russian_field_description")))
                                row.russian_field_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"russian_field_description")), typeof(string));
                            else
                                row.russian_field_description = null;

                            if (fieldNames.Contains("is_visible") && !reader.IsDBNull(reader.GetOrdinal("is_visible")))
                                row.is_visible = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_visible")), typeof(bool));
                            else
                                row.is_visible = null;

                            if (fieldNames.Contains("width") && !reader.IsDBNull(reader.GetOrdinal("width")))
                                row.width = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"width")), typeof(int));
                            else
                                row.width = null;

                            if (fieldNames.Contains("number") && !reader.IsDBNull(reader.GetOrdinal("number")))
                                row.number = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"number")), typeof(int));
                            else
                                row.number = null;

                            if (fieldNames.Contains("is_required") && !reader.IsDBNull(reader.GetOrdinal("is_required")))
                                row.is_required = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"is_required")), typeof(bool));
                            else
                                row.is_required = null;

                            if (fieldNames.Contains("ui_type") && !reader.IsDBNull(reader.GetOrdinal("ui_type")))
                                row.ui_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ui_type")), typeof(string));
                            else
                                row.ui_type = null;

                            if (fieldNames.Contains("dropdown") && !reader.IsDBNull(reader.GetOrdinal("dropdown")))
                                row.dropdown = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dropdown")), typeof(string));
                            else
                                row.dropdown = null;

                            if (fieldNames.Contains("dropdown_param") && !reader.IsDBNull(reader.GetOrdinal("dropdown_param")))
                                row.dropdown_param = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dropdown_param")), typeof(string));
                            else
                                row.dropdown_param = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_UPDATE_GRID_SETTING2Result> UI_UPDATE_GRID_SETTING2 (System.Nullable<int> user_id, string stored_procedure, string field_description, System.Nullable<int> is_visible, System.Nullable<int> width, System.Nullable<int> number)
        {

            List<UI_UPDATE_GRID_SETTING2Result> result = new List<UI_UPDATE_GRID_SETTING2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_UPDATE_GRID_SETTING2";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);

                    DbParameter field_descriptionParameter = cmd.CreateParameter();
                    field_descriptionParameter.ParameterName = "field_description";
                    field_descriptionParameter.Direction = ParameterDirection.Input;
                    field_descriptionParameter.DbType = DbType.String;
                    if (field_description != null)
                    {
                        field_descriptionParameter.Value = field_description;
                    }
                    else
                    {
                        field_descriptionParameter.Size = -1;
                        field_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(field_descriptionParameter);

                    DbParameter is_visibleParameter = cmd.CreateParameter();
                    is_visibleParameter.ParameterName = "is_visible";
                    is_visibleParameter.Direction = ParameterDirection.Input;
                    is_visibleParameter.DbType = DbType.Int32;
                    is_visibleParameter.Precision = 10;
                    is_visibleParameter.Scale = 0;
                    if (is_visible.HasValue)
                    {
                        is_visibleParameter.Value = is_visible.Value;
                    }
                    else
                    {
                        is_visibleParameter.Size = -1;
                        is_visibleParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_visibleParameter);

                    DbParameter widthParameter = cmd.CreateParameter();
                    widthParameter.ParameterName = "width";
                    widthParameter.Direction = ParameterDirection.Input;
                    widthParameter.DbType = DbType.Int32;
                    widthParameter.Precision = 10;
                    widthParameter.Scale = 0;
                    if (width.HasValue)
                    {
                        widthParameter.Value = width.Value;
                    }
                    else
                    {
                        widthParameter.Size = -1;
                        widthParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(widthParameter);

                    DbParameter numberParameter = cmd.CreateParameter();
                    numberParameter.ParameterName = "number";
                    numberParameter.Direction = ParameterDirection.Input;
                    numberParameter.DbType = DbType.Int32;
                    numberParameter.Precision = 10;
                    numberParameter.Scale = 0;
                    if (number.HasValue)
                    {
                        numberParameter.Value = number.Value;
                    }
                    else
                    {
                        numberParameter.Size = -1;
                        numberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(numberParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_UPDATE_GRID_SETTING2Result row = new UI_UPDATE_GRID_SETTING2Result();
                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_UPDATE_GRID_SETTING2Result>> UI_UPDATE_GRID_SETTING2Async (System.Nullable<int> user_id, string stored_procedure, string field_description, System.Nullable<int> is_visible, System.Nullable<int> width, System.Nullable<int> number)
        {

            List<UI_UPDATE_GRID_SETTING2Result> result = new List<UI_UPDATE_GRID_SETTING2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_UPDATE_GRID_SETTING2";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Size = -1;
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);

                    DbParameter field_descriptionParameter = cmd.CreateParameter();
                    field_descriptionParameter.ParameterName = "field_description";
                    field_descriptionParameter.Direction = ParameterDirection.Input;
                    field_descriptionParameter.DbType = DbType.String;
                    if (field_description != null)
                    {
                        field_descriptionParameter.Value = field_description;
                    }
                    else
                    {
                        field_descriptionParameter.Size = -1;
                        field_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(field_descriptionParameter);

                    DbParameter is_visibleParameter = cmd.CreateParameter();
                    is_visibleParameter.ParameterName = "is_visible";
                    is_visibleParameter.Direction = ParameterDirection.Input;
                    is_visibleParameter.DbType = DbType.Int32;
                    is_visibleParameter.Precision = 10;
                    is_visibleParameter.Scale = 0;
                    if (is_visible.HasValue)
                    {
                        is_visibleParameter.Value = is_visible.Value;
                    }
                    else
                    {
                        is_visibleParameter.Size = -1;
                        is_visibleParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_visibleParameter);

                    DbParameter widthParameter = cmd.CreateParameter();
                    widthParameter.ParameterName = "width";
                    widthParameter.Direction = ParameterDirection.Input;
                    widthParameter.DbType = DbType.Int32;
                    widthParameter.Precision = 10;
                    widthParameter.Scale = 0;
                    if (width.HasValue)
                    {
                        widthParameter.Value = width.Value;
                    }
                    else
                    {
                        widthParameter.Size = -1;
                        widthParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(widthParameter);

                    DbParameter numberParameter = cmd.CreateParameter();
                    numberParameter.ParameterName = "number";
                    numberParameter.Direction = ParameterDirection.Input;
                    numberParameter.DbType = DbType.Int32;
                    numberParameter.Precision = 10;
                    numberParameter.Scale = 0;
                    if (number.HasValue)
                    {
                        numberParameter.Value = number.Value;
                    }
                    else
                    {
                        numberParameter.Size = -1;
                        numberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(numberParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_UPDATE_GRID_SETTING2Result row = new UI_UPDATE_GRID_SETTING2Result();
                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> UI_DELETE_LINK_FUNCTION (System.Nullable<int> id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_DELETE_LINK_FUNCTION";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> UI_DELETE_LINK_FUNCTIONAsync (System.Nullable<int> id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_DELETE_LINK_FUNCTION";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_SELECT_MAIL_NOTIFICATIONSResult> UI_SELECT_MAIL_NOTIFICATIONS (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> id)
        {

            List<UI_SELECT_MAIL_NOTIFICATIONSResult> result = new List<UI_SELECT_MAIL_NOTIFICATIONSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_MAIL_NOTIFICATIONS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_MAIL_NOTIFICATIONSResult row = new UI_SELECT_MAIL_NOTIFICATIONSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("section_id") && !reader.IsDBNull(reader.GetOrdinal("section_id")))
                                row.section_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"section_id")), typeof(int));
                            else
                                row.section_id = null;

                            if (fieldNames.Contains("section") && !reader.IsDBNull(reader.GetOrdinal("section")))
                                row.section = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"section")), typeof(string));
                            else
                                row.section = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("mail_subject") && !reader.IsDBNull(reader.GetOrdinal("mail_subject")))
                                row.mail_subject = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mail_subject")), typeof(string));
                            else
                                row.mail_subject = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("schedule_period") && !reader.IsDBNull(reader.GetOrdinal("schedule_period")))
                                row.schedule_period = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"schedule_period")), typeof(string));
                            else
                                row.schedule_period = null;

                            if (fieldNames.Contains("schedule_time") && !reader.IsDBNull(reader.GetOrdinal("schedule_time")))
                                row.schedule_time = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"schedule_time")), typeof(string));
                            else
                                row.schedule_time = null;

                            if (fieldNames.Contains("mail_list") && !reader.IsDBNull(reader.GetOrdinal("mail_list")))
                                row.mail_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mail_list")), typeof(string));
                            else
                                row.mail_list = null;

                            if (fieldNames.Contains("stored_procedure") && !reader.IsDBNull(reader.GetOrdinal("stored_procedure")))
                                row.stored_procedure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stored_procedure")), typeof(string));
                            else
                                row.stored_procedure = null;

                            if (fieldNames.Contains("template_file") && !reader.IsDBNull(reader.GetOrdinal("template_file")))
                                row.template_file = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"template_file")), typeof(string));
                            else
                                row.template_file = null;

                            if (fieldNames.Contains("modification_user") && !reader.IsDBNull(reader.GetOrdinal("modification_user")))
                                row.modification_user = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_user")), typeof(string));
                            else
                                row.modification_user = null;

                            if (fieldNames.Contains("modification_date") && !reader.IsDBNull(reader.GetOrdinal("modification_date")))
                                row.modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_date")), typeof(System.DateTime));
                            else
                                row.modification_date = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_SELECT_MAIL_NOTIFICATIONSResult>> UI_SELECT_MAIL_NOTIFICATIONSAsync (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> id)
        {

            List<UI_SELECT_MAIL_NOTIFICATIONSResult> result = new List<UI_SELECT_MAIL_NOTIFICATIONSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_MAIL_NOTIFICATIONS";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_MAIL_NOTIFICATIONSResult row = new UI_SELECT_MAIL_NOTIFICATIONSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("section_id") && !reader.IsDBNull(reader.GetOrdinal("section_id")))
                                row.section_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"section_id")), typeof(int));
                            else
                                row.section_id = null;

                            if (fieldNames.Contains("section") && !reader.IsDBNull(reader.GetOrdinal("section")))
                                row.section = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"section")), typeof(string));
                            else
                                row.section = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("mail_subject") && !reader.IsDBNull(reader.GetOrdinal("mail_subject")))
                                row.mail_subject = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mail_subject")), typeof(string));
                            else
                                row.mail_subject = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("schedule_period") && !reader.IsDBNull(reader.GetOrdinal("schedule_period")))
                                row.schedule_period = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"schedule_period")), typeof(string));
                            else
                                row.schedule_period = null;

                            if (fieldNames.Contains("schedule_time") && !reader.IsDBNull(reader.GetOrdinal("schedule_time")))
                                row.schedule_time = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"schedule_time")), typeof(string));
                            else
                                row.schedule_time = null;

                            if (fieldNames.Contains("mail_list") && !reader.IsDBNull(reader.GetOrdinal("mail_list")))
                                row.mail_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mail_list")), typeof(string));
                            else
                                row.mail_list = null;

                            if (fieldNames.Contains("stored_procedure") && !reader.IsDBNull(reader.GetOrdinal("stored_procedure")))
                                row.stored_procedure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stored_procedure")), typeof(string));
                            else
                                row.stored_procedure = null;

                            if (fieldNames.Contains("template_file") && !reader.IsDBNull(reader.GetOrdinal("template_file")))
                                row.template_file = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"template_file")), typeof(string));
                            else
                                row.template_file = null;

                            if (fieldNames.Contains("modification_user") && !reader.IsDBNull(reader.GetOrdinal("modification_user")))
                                row.modification_user = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_user")), typeof(string));
                            else
                                row.modification_user = null;

                            if (fieldNames.Contains("modification_date") && !reader.IsDBNull(reader.GetOrdinal("modification_date")))
                                row.modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_date")), typeof(System.DateTime));
                            else
                                row.modification_date = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<NPS_SELECT_RESERVATION_ORDERS2Result> NPS_SELECT_RESERVATION_ORDERS2 (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> id, System.Nullable<bool> show_mine)
        {

            List<NPS_SELECT_RESERVATION_ORDERS2Result> result = new List<NPS_SELECT_RESERVATION_ORDERS2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.NPS_SELECT_RESERVATION_ORDERS2";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter show_mineParameter = cmd.CreateParameter();
                    show_mineParameter.ParameterName = "show_mine";
                    show_mineParameter.Direction = ParameterDirection.Input;
                    show_mineParameter.DbType = DbType.Boolean;
                    if (show_mine.HasValue)
                    {
                        show_mineParameter.Value = show_mine.Value;
                    }
                    else
                    {
                        show_mineParameter.Size = -1;
                        show_mineParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_mineParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            NPS_SELECT_RESERVATION_ORDERS2Result row = new NPS_SELECT_RESERVATION_ORDERS2Result();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("order_date") && !reader.IsDBNull(reader.GetOrdinal("order_date")))
                                row.order_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_date")), typeof(System.DateTime));
                            else
                                row.order_date = null;

                            if (fieldNames.Contains("order_state") && !reader.IsDBNull(reader.GetOrdinal("order_state")))
                                row.order_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_state")), typeof(string));
                            else
                                row.order_state = null;

                            if (fieldNames.Contains("order_state_comment") && !reader.IsDBNull(reader.GetOrdinal("order_state_comment")))
                                row.order_state_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_state_comment")), typeof(string));
                            else
                                row.order_state_comment = null;

                            if (fieldNames.Contains("items_cnt") && !reader.IsDBNull(reader.GetOrdinal("items_cnt")))
                                row.items_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"items_cnt")), typeof(int));
                            else
                                row.items_cnt = null;

                            if (fieldNames.Contains("items_sum") && !reader.IsDBNull(reader.GetOrdinal("items_sum")))
                                row.items_sum = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"items_sum")), typeof(double));
                            else
                                row.items_sum = null;

                            if (fieldNames.Contains("project_list") && !reader.IsDBNull(reader.GetOrdinal("project_list")))
                                row.project_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_list")), typeof(string));
                            else
                                row.project_list = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));
                            else
                                row.ekk_code = null;

                            if (fieldNames.Contains("delivery_route") && !reader.IsDBNull(reader.GetOrdinal("delivery_route")))
                                row.delivery_route = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_route")), typeof(string));
                            else
                                row.delivery_route = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<NPS_SELECT_RESERVATION_ORDERS2Result>> NPS_SELECT_RESERVATION_ORDERS2Async (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> id, System.Nullable<bool> show_mine)
        {

            List<NPS_SELECT_RESERVATION_ORDERS2Result> result = new List<NPS_SELECT_RESERVATION_ORDERS2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.NPS_SELECT_RESERVATION_ORDERS2";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter show_mineParameter = cmd.CreateParameter();
                    show_mineParameter.ParameterName = "show_mine";
                    show_mineParameter.Direction = ParameterDirection.Input;
                    show_mineParameter.DbType = DbType.Boolean;
                    if (show_mine.HasValue)
                    {
                        show_mineParameter.Value = show_mine.Value;
                    }
                    else
                    {
                        show_mineParameter.Size = -1;
                        show_mineParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(show_mineParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            NPS_SELECT_RESERVATION_ORDERS2Result row = new NPS_SELECT_RESERVATION_ORDERS2Result();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("order_date") && !reader.IsDBNull(reader.GetOrdinal("order_date")))
                                row.order_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_date")), typeof(System.DateTime));
                            else
                                row.order_date = null;

                            if (fieldNames.Contains("order_state") && !reader.IsDBNull(reader.GetOrdinal("order_state")))
                                row.order_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_state")), typeof(string));
                            else
                                row.order_state = null;

                            if (fieldNames.Contains("order_state_comment") && !reader.IsDBNull(reader.GetOrdinal("order_state_comment")))
                                row.order_state_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_state_comment")), typeof(string));
                            else
                                row.order_state_comment = null;

                            if (fieldNames.Contains("items_cnt") && !reader.IsDBNull(reader.GetOrdinal("items_cnt")))
                                row.items_cnt = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"items_cnt")), typeof(int));
                            else
                                row.items_cnt = null;

                            if (fieldNames.Contains("items_sum") && !reader.IsDBNull(reader.GetOrdinal("items_sum")))
                                row.items_sum = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"items_sum")), typeof(double));
                            else
                                row.items_sum = null;

                            if (fieldNames.Contains("project_list") && !reader.IsDBNull(reader.GetOrdinal("project_list")))
                                row.project_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_list")), typeof(string));
                            else
                                row.project_list = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));
                            else
                                row.ekk_code = null;

                            if (fieldNames.Contains("delivery_route") && !reader.IsDBNull(reader.GetOrdinal("delivery_route")))
                                row.delivery_route = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_route")), typeof(string));
                            else
                                row.delivery_route = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<NPS_SELECT_RESERVATION_ORDER_ITEMSResult> NPS_SELECT_RESERVATION_ORDER_ITEMS (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> reservation_order_id)
        {

            List<NPS_SELECT_RESERVATION_ORDER_ITEMSResult> result = new List<NPS_SELECT_RESERVATION_ORDER_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.NPS_SELECT_RESERVATION_ORDER_ITEMS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter reservation_order_idParameter = cmd.CreateParameter();
                    reservation_order_idParameter.ParameterName = "reservation_order_id";
                    reservation_order_idParameter.Direction = ParameterDirection.Input;
                    reservation_order_idParameter.DbType = DbType.Int32;
                    reservation_order_idParameter.Precision = 10;
                    reservation_order_idParameter.Scale = 0;
                    if (reservation_order_id.HasValue)
                    {
                        reservation_order_idParameter.Value = reservation_order_id.Value;
                    }
                    else
                    {
                        reservation_order_idParameter.Size = -1;
                        reservation_order_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(reservation_order_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            NPS_SELECT_RESERVATION_ORDER_ITEMSResult row = new NPS_SELECT_RESERVATION_ORDER_ITEMSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("nps_code") && !reader.IsDBNull(reader.GetOrdinal("nps_code")))
                                row.nps_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nps_code")), typeof(string));
                            else
                                row.nps_code = null;

                            if (fieldNames.Contains("nom_code") && !reader.IsDBNull(reader.GetOrdinal("nom_code")))
                                row.nom_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nom_code")), typeof(string));
                            else
                                row.nom_code = null;

                            if (fieldNames.Contains("nom_description") && !reader.IsDBNull(reader.GetOrdinal("nom_description")))
                                row.nom_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nom_description")), typeof(string));
                            else
                                row.nom_description = null;

                            if (fieldNames.Contains("storage_description") && !reader.IsDBNull(reader.GetOrdinal("storage_description")))
                                row.storage_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"storage_description")), typeof(string));
                            else
                                row.storage_description = null;

                            if (fieldNames.Contains("stock_price") && !reader.IsDBNull(reader.GetOrdinal("stock_price")))
                                row.stock_price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stock_price")), typeof(double));
                            else
                                row.stock_price = null;

                            if (fieldNames.Contains("stock_summa") && !reader.IsDBNull(reader.GetOrdinal("stock_summa")))
                                row.stock_summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stock_summa")), typeof(double));
                            else
                                row.stock_summa = null;

                            if (fieldNames.Contains("stock_unit") && !reader.IsDBNull(reader.GetOrdinal("stock_unit")))
                                row.stock_unit = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stock_unit")), typeof(string));
                            else
                                row.stock_unit = null;

                            if (fieldNames.Contains("stock_quantity") && !reader.IsDBNull(reader.GetOrdinal("stock_quantity")))
                                row.stock_quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stock_quantity")), typeof(double));
                            else
                                row.stock_quantity = null;

                            if (fieldNames.Contains("prslno_quantity") && !reader.IsDBNull(reader.GetOrdinal("prslno_quantity")))
                                row.prslno_quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prslno_quantity")), typeof(double));
                            else
                                row.prslno_quantity = null;

                            if (fieldNames.Contains("prslno_unit") && !reader.IsDBNull(reader.GetOrdinal("prslno_unit")))
                                row.prslno_unit = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prslno_unit")), typeof(string));
                            else
                                row.prslno_unit = null;

                            if (fieldNames.Contains("prslno_code") && !reader.IsDBNull(reader.GetOrdinal("prslno_code")))
                                row.prslno_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prslno_code")), typeof(string));
                            else
                                row.prslno_code = null;

                            if (fieldNames.Contains("prslno_description") && !reader.IsDBNull(reader.GetOrdinal("prslno_description")))
                                row.prslno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prslno_description")), typeof(string));
                            else
                                row.prslno_description = null;

                            if (fieldNames.Contains("base_estimate_price") && !reader.IsDBNull(reader.GetOrdinal("base_estimate_price")))
                                row.base_estimate_price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"base_estimate_price")), typeof(double));
                            else
                                row.base_estimate_price = null;

                            if (fieldNames.Contains("base_estimate_summa") && !reader.IsDBNull(reader.GetOrdinal("base_estimate_summa")))
                                row.base_estimate_summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"base_estimate_summa")), typeof(double));
                            else
                                row.base_estimate_summa = null;

                            if (fieldNames.Contains("estimate_price_coefficient") && !reader.IsDBNull(reader.GetOrdinal("estimate_price_coefficient")))
                                row.estimate_price_coefficient = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"estimate_price_coefficient")), typeof(double));
                            else
                                row.estimate_price_coefficient = null;

                            if (fieldNames.Contains("estimate_summa") && !reader.IsDBNull(reader.GetOrdinal("estimate_summa")))
                                row.estimate_summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"estimate_summa")), typeof(double));
                            else
                                row.estimate_summa = null;

                            if (fieldNames.Contains("estimate_state") && !reader.IsDBNull(reader.GetOrdinal("estimate_state")))
                                row.estimate_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"estimate_state")), typeof(string));
                            else
                                row.estimate_state = null;

                            if (fieldNames.Contains("lno") && !reader.IsDBNull(reader.GetOrdinal("lno")))
                                row.lno = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno")), typeof(string));
                            else
                                row.lno = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("prslno_project") && !reader.IsDBNull(reader.GetOrdinal("prslno_project")))
                                row.prslno_project = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prslno_project")), typeof(string));
                            else
                                row.prslno_project = null;

                            if (fieldNames.Contains("quantity_fact") && !reader.IsDBNull(reader.GetOrdinal("quantity_fact")))
                                row.quantity_fact = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity_fact")), typeof(double));
                            else
                                row.quantity_fact = null;

                            if (fieldNames.Contains("quantity_with_quality_approve") && !reader.IsDBNull(reader.GetOrdinal("quantity_with_quality_approve")))
                                row.quantity_with_quality_approve = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity_with_quality_approve")), typeof(double));
                            else
                                row.quantity_with_quality_approve = null;

                            if (fieldNames.Contains("quantity_for_inspection") && !reader.IsDBNull(reader.GetOrdinal("quantity_for_inspection")))
                                row.quantity_for_inspection = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity_for_inspection")), typeof(double));
                            else
                                row.quantity_for_inspection = null;

                            if (fieldNames.Contains("additional_costs") && !reader.IsDBNull(reader.GetOrdinal("additional_costs")))
                                row.additional_costs = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_costs")), typeof(double));
                            else
                                row.additional_costs = null;

                            if (fieldNames.Contains("inspection_costs") && !reader.IsDBNull(reader.GetOrdinal("inspection_costs")))
                                row.inspection_costs = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"inspection_costs")), typeof(double));
                            else
                                row.inspection_costs = null;

                            if (fieldNames.Contains("keep_costs") && !reader.IsDBNull(reader.GetOrdinal("keep_costs")))
                                row.keep_costs = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"keep_costs")), typeof(double));
                            else
                                row.keep_costs = null;

                            if (fieldNames.Contains("dispatched") && !reader.IsDBNull(reader.GetOrdinal("dispatched")))
                                row.dispatched = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dispatched")), typeof(double));
                            else
                                row.dispatched = null;

                            if (fieldNames.Contains("dispatched_date") && !reader.IsDBNull(reader.GetOrdinal("dispatched_date")))
                                row.dispatched_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dispatched_date")), typeof(System.DateTime));
                            else
                                row.dispatched_date = null;

                            if (fieldNames.Contains("delivered") && !reader.IsDBNull(reader.GetOrdinal("delivered")))
                                row.delivered = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivered")), typeof(double));
                            else
                                row.delivered = null;

                            if (fieldNames.Contains("delivered_date") && !reader.IsDBNull(reader.GetOrdinal("delivered_date")))
                                row.delivered_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivered_date")), typeof(System.DateTime));
                            else
                                row.delivered_date = null;

                            if (fieldNames.Contains("sold") && !reader.IsDBNull(reader.GetOrdinal("sold")))
                                row.sold = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"sold")), typeof(double));
                            else
                                row.sold = null;

                            if (fieldNames.Contains("sold_date") && !reader.IsDBNull(reader.GetOrdinal("sold_date")))
                                row.sold_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"sold_date")), typeof(System.DateTime));
                            else
                                row.sold_date = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<NPS_SELECT_RESERVATION_ORDER_ITEMSResult>> NPS_SELECT_RESERVATION_ORDER_ITEMSAsync (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> reservation_order_id)
        {

            List<NPS_SELECT_RESERVATION_ORDER_ITEMSResult> result = new List<NPS_SELECT_RESERVATION_ORDER_ITEMSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.NPS_SELECT_RESERVATION_ORDER_ITEMS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter reservation_order_idParameter = cmd.CreateParameter();
                    reservation_order_idParameter.ParameterName = "reservation_order_id";
                    reservation_order_idParameter.Direction = ParameterDirection.Input;
                    reservation_order_idParameter.DbType = DbType.Int32;
                    reservation_order_idParameter.Precision = 10;
                    reservation_order_idParameter.Scale = 0;
                    if (reservation_order_id.HasValue)
                    {
                        reservation_order_idParameter.Value = reservation_order_id.Value;
                    }
                    else
                    {
                        reservation_order_idParameter.Size = -1;
                        reservation_order_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(reservation_order_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            NPS_SELECT_RESERVATION_ORDER_ITEMSResult row = new NPS_SELECT_RESERVATION_ORDER_ITEMSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("nps_code") && !reader.IsDBNull(reader.GetOrdinal("nps_code")))
                                row.nps_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nps_code")), typeof(string));
                            else
                                row.nps_code = null;

                            if (fieldNames.Contains("nom_code") && !reader.IsDBNull(reader.GetOrdinal("nom_code")))
                                row.nom_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nom_code")), typeof(string));
                            else
                                row.nom_code = null;

                            if (fieldNames.Contains("nom_description") && !reader.IsDBNull(reader.GetOrdinal("nom_description")))
                                row.nom_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nom_description")), typeof(string));
                            else
                                row.nom_description = null;

                            if (fieldNames.Contains("storage_description") && !reader.IsDBNull(reader.GetOrdinal("storage_description")))
                                row.storage_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"storage_description")), typeof(string));
                            else
                                row.storage_description = null;

                            if (fieldNames.Contains("stock_price") && !reader.IsDBNull(reader.GetOrdinal("stock_price")))
                                row.stock_price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stock_price")), typeof(double));
                            else
                                row.stock_price = null;

                            if (fieldNames.Contains("stock_summa") && !reader.IsDBNull(reader.GetOrdinal("stock_summa")))
                                row.stock_summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stock_summa")), typeof(double));
                            else
                                row.stock_summa = null;

                            if (fieldNames.Contains("stock_unit") && !reader.IsDBNull(reader.GetOrdinal("stock_unit")))
                                row.stock_unit = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stock_unit")), typeof(string));
                            else
                                row.stock_unit = null;

                            if (fieldNames.Contains("stock_quantity") && !reader.IsDBNull(reader.GetOrdinal("stock_quantity")))
                                row.stock_quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"stock_quantity")), typeof(double));
                            else
                                row.stock_quantity = null;

                            if (fieldNames.Contains("prslno_quantity") && !reader.IsDBNull(reader.GetOrdinal("prslno_quantity")))
                                row.prslno_quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prslno_quantity")), typeof(double));
                            else
                                row.prslno_quantity = null;

                            if (fieldNames.Contains("prslno_unit") && !reader.IsDBNull(reader.GetOrdinal("prslno_unit")))
                                row.prslno_unit = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prslno_unit")), typeof(string));
                            else
                                row.prslno_unit = null;

                            if (fieldNames.Contains("prslno_code") && !reader.IsDBNull(reader.GetOrdinal("prslno_code")))
                                row.prslno_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prslno_code")), typeof(string));
                            else
                                row.prslno_code = null;

                            if (fieldNames.Contains("prslno_description") && !reader.IsDBNull(reader.GetOrdinal("prslno_description")))
                                row.prslno_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prslno_description")), typeof(string));
                            else
                                row.prslno_description = null;

                            if (fieldNames.Contains("base_estimate_price") && !reader.IsDBNull(reader.GetOrdinal("base_estimate_price")))
                                row.base_estimate_price = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"base_estimate_price")), typeof(double));
                            else
                                row.base_estimate_price = null;

                            if (fieldNames.Contains("base_estimate_summa") && !reader.IsDBNull(reader.GetOrdinal("base_estimate_summa")))
                                row.base_estimate_summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"base_estimate_summa")), typeof(double));
                            else
                                row.base_estimate_summa = null;

                            if (fieldNames.Contains("estimate_price_coefficient") && !reader.IsDBNull(reader.GetOrdinal("estimate_price_coefficient")))
                                row.estimate_price_coefficient = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"estimate_price_coefficient")), typeof(double));
                            else
                                row.estimate_price_coefficient = null;

                            if (fieldNames.Contains("estimate_summa") && !reader.IsDBNull(reader.GetOrdinal("estimate_summa")))
                                row.estimate_summa = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"estimate_summa")), typeof(double));
                            else
                                row.estimate_summa = null;

                            if (fieldNames.Contains("estimate_state") && !reader.IsDBNull(reader.GetOrdinal("estimate_state")))
                                row.estimate_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"estimate_state")), typeof(string));
                            else
                                row.estimate_state = null;

                            if (fieldNames.Contains("lno") && !reader.IsDBNull(reader.GetOrdinal("lno")))
                                row.lno = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lno")), typeof(string));
                            else
                                row.lno = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("prslno_project") && !reader.IsDBNull(reader.GetOrdinal("prslno_project")))
                                row.prslno_project = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prslno_project")), typeof(string));
                            else
                                row.prslno_project = null;

                            if (fieldNames.Contains("quantity_fact") && !reader.IsDBNull(reader.GetOrdinal("quantity_fact")))
                                row.quantity_fact = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity_fact")), typeof(double));
                            else
                                row.quantity_fact = null;

                            if (fieldNames.Contains("quantity_with_quality_approve") && !reader.IsDBNull(reader.GetOrdinal("quantity_with_quality_approve")))
                                row.quantity_with_quality_approve = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity_with_quality_approve")), typeof(double));
                            else
                                row.quantity_with_quality_approve = null;

                            if (fieldNames.Contains("quantity_for_inspection") && !reader.IsDBNull(reader.GetOrdinal("quantity_for_inspection")))
                                row.quantity_for_inspection = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity_for_inspection")), typeof(double));
                            else
                                row.quantity_for_inspection = null;

                            if (fieldNames.Contains("additional_costs") && !reader.IsDBNull(reader.GetOrdinal("additional_costs")))
                                row.additional_costs = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_costs")), typeof(double));
                            else
                                row.additional_costs = null;

                            if (fieldNames.Contains("inspection_costs") && !reader.IsDBNull(reader.GetOrdinal("inspection_costs")))
                                row.inspection_costs = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"inspection_costs")), typeof(double));
                            else
                                row.inspection_costs = null;

                            if (fieldNames.Contains("keep_costs") && !reader.IsDBNull(reader.GetOrdinal("keep_costs")))
                                row.keep_costs = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"keep_costs")), typeof(double));
                            else
                                row.keep_costs = null;

                            if (fieldNames.Contains("dispatched") && !reader.IsDBNull(reader.GetOrdinal("dispatched")))
                                row.dispatched = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dispatched")), typeof(double));
                            else
                                row.dispatched = null;

                            if (fieldNames.Contains("dispatched_date") && !reader.IsDBNull(reader.GetOrdinal("dispatched_date")))
                                row.dispatched_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dispatched_date")), typeof(System.DateTime));
                            else
                                row.dispatched_date = null;

                            if (fieldNames.Contains("delivered") && !reader.IsDBNull(reader.GetOrdinal("delivered")))
                                row.delivered = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivered")), typeof(double));
                            else
                                row.delivered = null;

                            if (fieldNames.Contains("delivered_date") && !reader.IsDBNull(reader.GetOrdinal("delivered_date")))
                                row.delivered_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivered_date")), typeof(System.DateTime));
                            else
                                row.delivered_date = null;

                            if (fieldNames.Contains("sold") && !reader.IsDBNull(reader.GetOrdinal("sold")))
                                row.sold = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"sold")), typeof(double));
                            else
                                row.sold = null;

                            if (fieldNames.Contains("sold_date") && !reader.IsDBNull(reader.GetOrdinal("sold_date")))
                                row.sold_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"sold_date")), typeof(System.DateTime));
                            else
                                row.sold_date = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> APL_SEND_RSS_TO_DMTOS (System.Nullable<int> project_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SEND_RSS_TO_DMTOS";

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> APL_SEND_RSS_TO_DMTOSAsync (System.Nullable<int> project_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SEND_RSS_TO_DMTOS";

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> UI_UPDATE_GRID_ROW_SETTINGS (string grid_type, string item_id_list, string color, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_UPDATE_GRID_ROW_SETTINGS";

                    DbParameter grid_typeParameter = cmd.CreateParameter();
                    grid_typeParameter.ParameterName = "grid_type";
                    grid_typeParameter.Direction = ParameterDirection.Input;
                    grid_typeParameter.DbType = DbType.String;
                    if (grid_type != null)
                    {
                        grid_typeParameter.Value = grid_type;
                    }
                    else
                    {
                        grid_typeParameter.Size = -1;
                        grid_typeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(grid_typeParameter);

                    DbParameter item_id_listParameter = cmd.CreateParameter();
                    item_id_listParameter.ParameterName = "item_id_list";
                    item_id_listParameter.Direction = ParameterDirection.Input;
                    item_id_listParameter.DbType = DbType.String;
                    if (item_id_list != null)
                    {
                        item_id_listParameter.Value = item_id_list;
                    }
                    else
                    {
                        item_id_listParameter.Size = -1;
                        item_id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(item_id_listParameter);

                    DbParameter colorParameter = cmd.CreateParameter();
                    colorParameter.ParameterName = "color";
                    colorParameter.Direction = ParameterDirection.Input;
                    colorParameter.DbType = DbType.String;
                    if (color != null)
                    {
                        colorParameter.Value = color;
                    }
                    else
                    {
                        colorParameter.Size = -1;
                        colorParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(colorParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> UI_UPDATE_GRID_ROW_SETTINGSAsync (string grid_type, string item_id_list, string color, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_UPDATE_GRID_ROW_SETTINGS";

                    DbParameter grid_typeParameter = cmd.CreateParameter();
                    grid_typeParameter.ParameterName = "grid_type";
                    grid_typeParameter.Direction = ParameterDirection.Input;
                    grid_typeParameter.DbType = DbType.String;
                    if (grid_type != null)
                    {
                        grid_typeParameter.Value = grid_type;
                    }
                    else
                    {
                        grid_typeParameter.Size = -1;
                        grid_typeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(grid_typeParameter);

                    DbParameter item_id_listParameter = cmd.CreateParameter();
                    item_id_listParameter.ParameterName = "item_id_list";
                    item_id_listParameter.Direction = ParameterDirection.Input;
                    item_id_listParameter.DbType = DbType.String;
                    if (item_id_list != null)
                    {
                        item_id_listParameter.Value = item_id_list;
                    }
                    else
                    {
                        item_id_listParameter.Size = -1;
                        item_id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(item_id_listParameter);

                    DbParameter colorParameter = cmd.CreateParameter();
                    colorParameter.ParameterName = "color";
                    colorParameter.Direction = ParameterDirection.Input;
                    colorParameter.DbType = DbType.String;
                    if (color != null)
                    {
                        colorParameter.Value = color;
                    }
                    else
                    {
                        colorParameter.Size = -1;
                        colorParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(colorParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> UI_DELETE_MAIL_NOTIFICATION (System.Nullable<int> id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_DELETE_MAIL_NOTIFICATION";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> UI_DELETE_MAIL_NOTIFICATIONAsync (System.Nullable<int> id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_DELETE_MAIL_NOTIFICATION";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> UI_UPDATE_MAIL_NOTIFICATION (System.Nullable<int> id, System.Nullable<int> section_id, string description, string mail_subject, string summary, string schedule_period, string schedule_time, string mail_list, string stored_procedure, string template_file, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_UPDATE_MAIL_NOTIFICATION";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter section_idParameter = cmd.CreateParameter();
                    section_idParameter.ParameterName = "section_id";
                    section_idParameter.Direction = ParameterDirection.Input;
                    section_idParameter.DbType = DbType.Int32;
                    section_idParameter.Precision = 10;
                    section_idParameter.Scale = 0;
                    if (section_id.HasValue)
                    {
                        section_idParameter.Value = section_id.Value;
                    }
                    else
                    {
                        section_idParameter.Size = -1;
                        section_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(section_idParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    descriptionParameter.Size = 510;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter mail_subjectParameter = cmd.CreateParameter();
                    mail_subjectParameter.ParameterName = "mail_subject";
                    mail_subjectParameter.Direction = ParameterDirection.Input;
                    mail_subjectParameter.DbType = DbType.String;
                    mail_subjectParameter.Size = 1000;
                    if (mail_subject != null)
                    {
                        mail_subjectParameter.Value = mail_subject;
                    }
                    else
                    {
                        mail_subjectParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(mail_subjectParameter);

                    DbParameter summaryParameter = cmd.CreateParameter();
                    summaryParameter.ParameterName = "summary";
                    summaryParameter.Direction = ParameterDirection.Input;
                    summaryParameter.DbType = DbType.String;
                    if (summary != null)
                    {
                        summaryParameter.Value = summary;
                    }
                    else
                    {
                        summaryParameter.Size = -1;
                        summaryParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(summaryParameter);

                    DbParameter schedule_periodParameter = cmd.CreateParameter();
                    schedule_periodParameter.ParameterName = "schedule_period";
                    schedule_periodParameter.Direction = ParameterDirection.Input;
                    schedule_periodParameter.DbType = DbType.String;
                    schedule_periodParameter.Size = 510;
                    if (schedule_period != null)
                    {
                        schedule_periodParameter.Value = schedule_period;
                    }
                    else
                    {
                        schedule_periodParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(schedule_periodParameter);

                    DbParameter schedule_timeParameter = cmd.CreateParameter();
                    schedule_timeParameter.ParameterName = "schedule_time";
                    schedule_timeParameter.Direction = ParameterDirection.Input;
                    schedule_timeParameter.DbType = DbType.String;
                    schedule_timeParameter.Size = 510;
                    if (schedule_time != null)
                    {
                        schedule_timeParameter.Value = schedule_time;
                    }
                    else
                    {
                        schedule_timeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(schedule_timeParameter);

                    DbParameter mail_listParameter = cmd.CreateParameter();
                    mail_listParameter.ParameterName = "mail_list";
                    mail_listParameter.Direction = ParameterDirection.Input;
                    mail_listParameter.DbType = DbType.String;
                    mail_listParameter.Size = 510;
                    if (mail_list != null)
                    {
                        mail_listParameter.Value = mail_list;
                    }
                    else
                    {
                        mail_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(mail_listParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    stored_procedureParameter.Size = 510;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);

                    DbParameter template_fileParameter = cmd.CreateParameter();
                    template_fileParameter.ParameterName = "template_file";
                    template_fileParameter.Direction = ParameterDirection.Input;
                    template_fileParameter.DbType = DbType.String;
                    template_fileParameter.Size = 510;
                    if (template_file != null)
                    {
                        template_fileParameter.Value = template_file;
                    }
                    else
                    {
                        template_fileParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(template_fileParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> UI_UPDATE_MAIL_NOTIFICATIONAsync (System.Nullable<int> id, System.Nullable<int> section_id, string description, string mail_subject, string summary, string schedule_period, string schedule_time, string mail_list, string stored_procedure, string template_file, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_UPDATE_MAIL_NOTIFICATION";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter section_idParameter = cmd.CreateParameter();
                    section_idParameter.ParameterName = "section_id";
                    section_idParameter.Direction = ParameterDirection.Input;
                    section_idParameter.DbType = DbType.Int32;
                    section_idParameter.Precision = 10;
                    section_idParameter.Scale = 0;
                    if (section_id.HasValue)
                    {
                        section_idParameter.Value = section_id.Value;
                    }
                    else
                    {
                        section_idParameter.Size = -1;
                        section_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(section_idParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    descriptionParameter.Size = 510;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter mail_subjectParameter = cmd.CreateParameter();
                    mail_subjectParameter.ParameterName = "mail_subject";
                    mail_subjectParameter.Direction = ParameterDirection.Input;
                    mail_subjectParameter.DbType = DbType.String;
                    mail_subjectParameter.Size = 1000;
                    if (mail_subject != null)
                    {
                        mail_subjectParameter.Value = mail_subject;
                    }
                    else
                    {
                        mail_subjectParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(mail_subjectParameter);

                    DbParameter summaryParameter = cmd.CreateParameter();
                    summaryParameter.ParameterName = "summary";
                    summaryParameter.Direction = ParameterDirection.Input;
                    summaryParameter.DbType = DbType.String;
                    if (summary != null)
                    {
                        summaryParameter.Value = summary;
                    }
                    else
                    {
                        summaryParameter.Size = -1;
                        summaryParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(summaryParameter);

                    DbParameter schedule_periodParameter = cmd.CreateParameter();
                    schedule_periodParameter.ParameterName = "schedule_period";
                    schedule_periodParameter.Direction = ParameterDirection.Input;
                    schedule_periodParameter.DbType = DbType.String;
                    schedule_periodParameter.Size = 510;
                    if (schedule_period != null)
                    {
                        schedule_periodParameter.Value = schedule_period;
                    }
                    else
                    {
                        schedule_periodParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(schedule_periodParameter);

                    DbParameter schedule_timeParameter = cmd.CreateParameter();
                    schedule_timeParameter.ParameterName = "schedule_time";
                    schedule_timeParameter.Direction = ParameterDirection.Input;
                    schedule_timeParameter.DbType = DbType.String;
                    schedule_timeParameter.Size = 510;
                    if (schedule_time != null)
                    {
                        schedule_timeParameter.Value = schedule_time;
                    }
                    else
                    {
                        schedule_timeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(schedule_timeParameter);

                    DbParameter mail_listParameter = cmd.CreateParameter();
                    mail_listParameter.ParameterName = "mail_list";
                    mail_listParameter.Direction = ParameterDirection.Input;
                    mail_listParameter.DbType = DbType.String;
                    mail_listParameter.Size = 510;
                    if (mail_list != null)
                    {
                        mail_listParameter.Value = mail_list;
                    }
                    else
                    {
                        mail_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(mail_listParameter);

                    DbParameter stored_procedureParameter = cmd.CreateParameter();
                    stored_procedureParameter.ParameterName = "stored_procedure";
                    stored_procedureParameter.Direction = ParameterDirection.Input;
                    stored_procedureParameter.DbType = DbType.String;
                    stored_procedureParameter.Size = 510;
                    if (stored_procedure != null)
                    {
                        stored_procedureParameter.Value = stored_procedure;
                    }
                    else
                    {
                        stored_procedureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(stored_procedureParameter);

                    DbParameter template_fileParameter = cmd.CreateParameter();
                    template_fileParameter.ParameterName = "template_file";
                    template_fileParameter.Direction = ParameterDirection.Input;
                    template_fileParameter.DbType = DbType.String;
                    template_fileParameter.Size = 510;
                    if (template_file != null)
                    {
                        template_fileParameter.Value = template_file;
                    }
                    else
                    {
                        template_fileParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(template_fileParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> APL_UPDATE_PRSLNO_STATE (string id_list, System.Nullable<int> state_id, string reason_change_state, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_PRSLNO_STATE";

                    DbParameter id_listParameter = cmd.CreateParameter();
                    id_listParameter.ParameterName = "id_list";
                    id_listParameter.Direction = ParameterDirection.Input;
                    id_listParameter.DbType = DbType.String;
                    if (id_list != null)
                    {
                        id_listParameter.Value = id_list;
                    }
                    else
                    {
                        id_listParameter.Size = -1;
                        id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(id_listParameter);

                    DbParameter state_idParameter = cmd.CreateParameter();
                    state_idParameter.ParameterName = "state_id";
                    state_idParameter.Direction = ParameterDirection.Input;
                    state_idParameter.DbType = DbType.Int32;
                    state_idParameter.Precision = 10;
                    state_idParameter.Scale = 0;
                    if (state_id.HasValue)
                    {
                        state_idParameter.Value = state_id.Value;
                    }
                    else
                    {
                        state_idParameter.Size = -1;
                        state_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(state_idParameter);

                    DbParameter reason_change_stateParameter = cmd.CreateParameter();
                    reason_change_stateParameter.ParameterName = "reason_change_state";
                    reason_change_stateParameter.Direction = ParameterDirection.Input;
                    reason_change_stateParameter.DbType = DbType.String;
                    if (reason_change_state != null)
                    {
                        reason_change_stateParameter.Value = reason_change_state;
                    }
                    else
                    {
                        reason_change_stateParameter.Size = -1;
                        reason_change_stateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(reason_change_stateParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> APL_UPDATE_PRSLNO_STATEAsync (string id_list, System.Nullable<int> state_id, string reason_change_state, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_PRSLNO_STATE";

                    DbParameter id_listParameter = cmd.CreateParameter();
                    id_listParameter.ParameterName = "id_list";
                    id_listParameter.Direction = ParameterDirection.Input;
                    id_listParameter.DbType = DbType.String;
                    if (id_list != null)
                    {
                        id_listParameter.Value = id_list;
                    }
                    else
                    {
                        id_listParameter.Size = -1;
                        id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(id_listParameter);

                    DbParameter state_idParameter = cmd.CreateParameter();
                    state_idParameter.ParameterName = "state_id";
                    state_idParameter.Direction = ParameterDirection.Input;
                    state_idParameter.DbType = DbType.Int32;
                    state_idParameter.Precision = 10;
                    state_idParameter.Scale = 0;
                    if (state_id.HasValue)
                    {
                        state_idParameter.Value = state_id.Value;
                    }
                    else
                    {
                        state_idParameter.Size = -1;
                        state_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(state_idParameter);

                    DbParameter reason_change_stateParameter = cmd.CreateParameter();
                    reason_change_stateParameter.ParameterName = "reason_change_state";
                    reason_change_stateParameter.Direction = ParameterDirection.Input;
                    reason_change_stateParameter.DbType = DbType.String;
                    if (reason_change_state != null)
                    {
                        reason_change_stateParameter.Value = reason_change_state;
                    }
                    else
                    {
                        reason_change_stateParameter.Size = -1;
                        reason_change_stateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(reason_change_stateParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECT_REQUIREMENTSResult> APL_SELECT_PROJECT_REQUIREMENTS (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> project_id)
        {

            List<APL_SELECT_PROJECT_REQUIREMENTSResult> result = new List<APL_SELECT_PROJECT_REQUIREMENTSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_REQUIREMENTS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_REQUIREMENTSResult row = new APL_SELECT_PROJECT_REQUIREMENTSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("object_description_id") && !reader.IsDBNull(reader.GetOrdinal("object_description_id")))
                                row.object_description_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description_id")), typeof(int));

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("subobject_id") && !reader.IsDBNull(reader.GetOrdinal("subobject_id")))
                                row.subobject_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_id")), typeof(int));

                            if (fieldNames.Contains("subobject") && !reader.IsDBNull(reader.GetOrdinal("subobject")))
                                row.subobject = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject")), typeof(string));
                            else
                                row.subobject = null;

                            if (fieldNames.Contains("subobject_font_color") && !reader.IsDBNull(reader.GetOrdinal("subobject_font_color")))
                                row.subobject_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_font_color")), typeof(string));
                            else
                                row.subobject_font_color = null;

                            if (fieldNames.Contains("ps_id") && !reader.IsDBNull(reader.GetOrdinal("ps_id")))
                                row.ps_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ps_id")), typeof(int));

                            if (fieldNames.Contains("ps") && !reader.IsDBNull(reader.GetOrdinal("ps")))
                                row.ps = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ps")), typeof(string));
                            else
                                row.ps = null;

                            if (fieldNames.Contains("ps_font_color") && !reader.IsDBNull(reader.GetOrdinal("ps_font_color")))
                                row.ps_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ps_font_color")), typeof(string));
                            else
                                row.ps_font_color = null;

                            if (fieldNames.Contains("plno_id") && !reader.IsDBNull(reader.GetOrdinal("plno_id")))
                                row.plno_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"plno_id")), typeof(int));

                            if (fieldNames.Contains("plno") && !reader.IsDBNull(reader.GetOrdinal("plno")))
                                row.plno = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"plno")), typeof(string));
                            else
                                row.plno = null;

                            if (fieldNames.Contains("plno_font_color") && !reader.IsDBNull(reader.GetOrdinal("plno_font_color")))
                                row.plno_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"plno_font_color")), typeof(string));
                            else
                                row.plno_font_color = null;

                            if (fieldNames.Contains("project_documentation_id") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_id")))
                                row.project_documentation_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_id")), typeof(int));

                            if (fieldNames.Contains("project_documentation") && !reader.IsDBNull(reader.GetOrdinal("project_documentation")))
                                row.project_documentation = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation")), typeof(string));
                            else
                                row.project_documentation = null;

                            if (fieldNames.Contains("project_documentation_font_color") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_font_color")))
                                row.project_documentation_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_font_color")), typeof(string));
                            else
                                row.project_documentation_font_color = null;

                            if (fieldNames.Contains("revision_id") && !reader.IsDBNull(reader.GetOrdinal("revision_id")))
                                row.revision_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_id")), typeof(int));

                            if (fieldNames.Contains("revision") && !reader.IsDBNull(reader.GetOrdinal("revision")))
                                row.revision = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision")), typeof(int));
                            else
                                row.revision = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("description_font_color") && !reader.IsDBNull(reader.GetOrdinal("description_font_color")))
                                row.description_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description_font_color")), typeof(string));
                            else
                                row.description_font_color = null;

                            if (fieldNames.Contains("package_contents") && !reader.IsDBNull(reader.GetOrdinal("package_contents")))
                                row.package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_contents")), typeof(string));
                            else
                                row.package_contents = null;

                            if (fieldNames.Contains("package_contents_font_color") && !reader.IsDBNull(reader.GetOrdinal("package_contents_font_color")))
                                row.package_contents_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_contents_font_color")), typeof(string));
                            else
                                row.package_contents_font_color = null;

                            if (fieldNames.Contains("additional_properties") && !reader.IsDBNull(reader.GetOrdinal("additional_properties")))
                                row.additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_properties")), typeof(string));
                            else
                                row.additional_properties = null;

                            if (fieldNames.Contains("additional_properties_font_color") && !reader.IsDBNull(reader.GetOrdinal("additional_properties_font_color")))
                                row.additional_properties_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_properties_font_color")), typeof(string));
                            else
                                row.additional_properties_font_color = null;

                            if (fieldNames.Contains("manufacturer") && !reader.IsDBNull(reader.GetOrdinal("manufacturer")))
                                row.manufacturer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"manufacturer")), typeof(string));
                            else
                                row.manufacturer = null;

                            if (fieldNames.Contains("manufacturer_font_color") && !reader.IsDBNull(reader.GetOrdinal("manufacturer_font_color")))
                                row.manufacturer_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"manufacturer_font_color")), typeof(string));
                            else
                                row.manufacturer_font_color = null;

                            if (fieldNames.Contains("unit_id") && !reader.IsDBNull(reader.GetOrdinal("unit_id")))
                                row.unit_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_id")), typeof(int));

                            if (fieldNames.Contains("unit") && !reader.IsDBNull(reader.GetOrdinal("unit")))
                                row.unit = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit")), typeof(string));
                            else
                                row.unit = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("quantity_font_color") && !reader.IsDBNull(reader.GetOrdinal("quantity_font_color")))
                                row.quantity_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity_font_color")), typeof(string));
                            else
                                row.quantity_font_color = null;

                            if (fieldNames.Contains("main_prslno_id") && !reader.IsDBNull(reader.GetOrdinal("main_prslno_id")))
                                row.main_prslno_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"main_prslno_id")), typeof(int));

                            if (fieldNames.Contains("prslno_total_info") && !reader.IsDBNull(reader.GetOrdinal("prslno_total_info")))
                                row.prslno_total_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prslno_total_info")), typeof(string));

                            if (fieldNames.Contains("mass_per_unit") && !reader.IsDBNull(reader.GetOrdinal("mass_per_unit")))
                                row.mass_per_unit = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_per_unit")), typeof(double));
                            else
                                row.mass_per_unit = null;

                            if (fieldNames.Contains("mass_per_unit_font_color") && !reader.IsDBNull(reader.GetOrdinal("mass_per_unit_font_color")))
                                row.mass_per_unit_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_per_unit_font_color")), typeof(string));
                            else
                                row.mass_per_unit_font_color = null;

                            if (fieldNames.Contains("mass_size") && !reader.IsDBNull(reader.GetOrdinal("mass_size")))
                                row.mass_size = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_size")), typeof(string));
                            else
                                row.mass_size = null;

                            if (fieldNames.Contains("mass_size_font_color") && !reader.IsDBNull(reader.GetOrdinal("mass_size_font_color")))
                                row.mass_size_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_size_font_color")), typeof(string));
                            else
                                row.mass_size_font_color = null;

                            if (fieldNames.Contains("item_state_id") && !reader.IsDBNull(reader.GetOrdinal("item_state_id")))
                                row.item_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_state_id")), typeof(int));

                            if (fieldNames.Contains("item_state_description") && !reader.IsDBNull(reader.GetOrdinal("item_state_description")))
                                row.item_state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_state_description")), typeof(string));
                            else
                                row.item_state_description = null;

                            if (fieldNames.Contains("reason_change_state") && !reader.IsDBNull(reader.GetOrdinal("reason_change_state")))
                                row.reason_change_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"reason_change_state")), typeof(string));

                            if (fieldNames.Contains("delivery_type_id") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_id")))
                                row.delivery_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_id")), typeof(int));
                            else
                                row.delivery_type_id = null;

                            if (fieldNames.Contains("delivery_type") && !reader.IsDBNull(reader.GetOrdinal("delivery_type")))
                                row.delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type")), typeof(string));
                            else
                                row.delivery_type = null;

                            if (fieldNames.Contains("delivery_type_font_color") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_font_color")))
                                row.delivery_type_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_font_color")), typeof(string));
                            else
                                row.delivery_type_font_color = null;

                            if (fieldNames.Contains("goods_type_id") && !reader.IsDBNull(reader.GetOrdinal("goods_type_id")))
                                row.goods_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"goods_type_id")), typeof(int));
                            else
                                row.goods_type_id = null;

                            if (fieldNames.Contains("goods_type") && !reader.IsDBNull(reader.GetOrdinal("goods_type")))
                                row.goods_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"goods_type")), typeof(string));
                            else
                                row.goods_type = null;

                            if (fieldNames.Contains("goods_type_font_color") && !reader.IsDBNull(reader.GetOrdinal("goods_type_font_color")))
                                row.goods_type_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"goods_type_font_color")), typeof(string));
                            else
                                row.goods_type_font_color = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("summary_font_color") && !reader.IsDBNull(reader.GetOrdinal("summary_font_color")))
                                row.summary_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary_font_color")), typeof(string));
                            else
                                row.summary_font_color = null;

                            if (fieldNames.Contains("summary2") && !reader.IsDBNull(reader.GetOrdinal("summary2")))
                                row.summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary2")), typeof(string));
                            else
                                row.summary2 = null;

                            if (fieldNames.Contains("summary2_font_color") && !reader.IsDBNull(reader.GetOrdinal("summary2_font_color")))
                                row.summary2_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary2_font_color")), typeof(string));
                            else
                                row.summary2_font_color = null;

                            if (fieldNames.Contains("in_kd_id") && !reader.IsDBNull(reader.GetOrdinal("in_kd_id")))
                                row.in_kd_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"in_kd_id")), typeof(int));
                            else
                                row.in_kd_id = null;

                            if (fieldNames.Contains("in_kd") && !reader.IsDBNull(reader.GetOrdinal("in_kd")))
                                row.in_kd = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"in_kd")), typeof(string));

                            if (fieldNames.Contains("in_kd_font_color") && !reader.IsDBNull(reader.GetOrdinal("in_kd_font_color")))
                                row.in_kd_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"in_kd_font_color")), typeof(string));
                            else
                                row.in_kd_font_color = null;

                            if (fieldNames.Contains("psd_state_id") && !reader.IsDBNull(reader.GetOrdinal("psd_state_id")))
                                row.psd_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"psd_state_id")), typeof(int));
                            else
                                row.psd_state_id = null;

                            if (fieldNames.Contains("psd_state") && !reader.IsDBNull(reader.GetOrdinal("psd_state")))
                                row.psd_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"psd_state")), typeof(string));

                            if (fieldNames.Contains("psd_state_font_color") && !reader.IsDBNull(reader.GetOrdinal("psd_state_font_color")))
                                row.psd_state_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"psd_state_font_color")), typeof(string));
                            else
                                row.psd_state_font_color = null;

                            if (fieldNames.Contains("pr_source_id") && !reader.IsDBNull(reader.GetOrdinal("pr_source_id")))
                                row.pr_source_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"pr_source_id")), typeof(int));
                            else
                                row.pr_source_id = null;

                            if (fieldNames.Contains("pr_source") && !reader.IsDBNull(reader.GetOrdinal("pr_source")))
                                row.pr_source = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"pr_source")), typeof(string));

                            if (fieldNames.Contains("pr_source_font_color") && !reader.IsDBNull(reader.GetOrdinal("pr_source_font_color")))
                                row.pr_source_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"pr_source_font_color")), typeof(string));
                            else
                                row.pr_source_font_color = null;

                            if (fieldNames.Contains("creation_date") && !reader.IsDBNull(reader.GetOrdinal("creation_date")))
                                row.creation_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"creation_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("modification_date") && !reader.IsDBNull(reader.GetOrdinal("modification_date")))
                                row.modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("parent_package_code") && !reader.IsDBNull(reader.GetOrdinal("parent_package_code")))
                                row.parent_package_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"parent_package_code")), typeof(string));
                            else
                                row.parent_package_code = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));
                            else
                                row.ekk_code = null;

                            if (fieldNames.Contains("drv_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("drv_delivery_type")))
                                row.drv_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"drv_delivery_type")), typeof(string));

                            if (fieldNames.Contains("supply_manager") && !reader.IsDBNull(reader.GetOrdinal("supply_manager")))
                                row.supply_manager = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_manager")), typeof(string));
                            else
                                row.supply_manager = null;

                            if (fieldNames.Contains("order_information") && !reader.IsDBNull(reader.GetOrdinal("order_information")))
                                row.order_information = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_information")), typeof(string));
                            else
                                row.order_information = null;

                            if (fieldNames.Contains("specification_information") && !reader.IsDBNull(reader.GetOrdinal("specification_information")))
                                row.specification_information = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"specification_information")), typeof(string));
                            else
                                row.specification_information = null;

                            if (fieldNames.Contains("change_history") && !reader.IsDBNull(reader.GetOrdinal("change_history")))
                                row.change_history = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"change_history")), typeof(string));
                            else
                                row.change_history = null;

                            if (fieldNames.Contains("start_delivery_date") && !reader.IsDBNull(reader.GetOrdinal("start_delivery_date")))
                                row.start_delivery_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start_delivery_date")), typeof(System.DateTime));
                            else
                                row.start_delivery_date = null;

                            if (fieldNames.Contains("finish_delivery_date") && !reader.IsDBNull(reader.GetOrdinal("finish_delivery_date")))
                                row.finish_delivery_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish_delivery_date")), typeof(System.DateTime));
                            else
                                row.finish_delivery_date = null;

                            if (fieldNames.Contains("unsi_comment") && !reader.IsDBNull(reader.GetOrdinal("unsi_comment")))
                                row.unsi_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unsi_comment")), typeof(string));
                            else
                                row.unsi_comment = null;

                            if (fieldNames.Contains("dmtos_comment") && !reader.IsDBNull(reader.GetOrdinal("dmtos_comment")))
                                row.dmtos_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dmtos_comment")), typeof(string));
                            else
                                row.dmtos_comment = null;

                            if (fieldNames.Contains("color") && !reader.IsDBNull(reader.GetOrdinal("color")))
                                row.color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color")), typeof(string));

                            if (fieldNames.Contains("delivered") && !reader.IsDBNull(reader.GetOrdinal("delivered")))
                                row.delivered = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivered")), typeof(decimal));

                            if (fieldNames.Contains("not_delivered") && !reader.IsDBNull(reader.GetOrdinal("not_delivered")))
                                row.not_delivered = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"not_delivered")), typeof(decimal));

                            if (fieldNames.Contains("deficit_delivery_date") && !reader.IsDBNull(reader.GetOrdinal("deficit_delivery_date")))
                                row.deficit_delivery_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"deficit_delivery_date")), typeof(System.DateTime));
                            else
                                row.deficit_delivery_date = null;

                            if (fieldNames.Contains("fact_delivery_date") && !reader.IsDBNull(reader.GetOrdinal("fact_delivery_date")))
                                row.fact_delivery_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"fact_delivery_date")), typeof(System.DateTime));
                            else
                                row.fact_delivery_date = null;

                            if (fieldNames.Contains("dks_customer_letter_info") && !reader.IsDBNull(reader.GetOrdinal("dks_customer_letter_info")))
                                row.dks_customer_letter_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dks_customer_letter_info")), typeof(string));

                            if (fieldNames.Contains("edit_notes") && !reader.IsDBNull(reader.GetOrdinal("edit_notes")))
                                row.edit_notes = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"edit_notes")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_REQUIREMENTSResult>> APL_SELECT_PROJECT_REQUIREMENTSAsync (System.Nullable<int> event_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> project_id)
        {

            List<APL_SELECT_PROJECT_REQUIREMENTSResult> result = new List<APL_SELECT_PROJECT_REQUIREMENTSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_REQUIREMENTS";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_REQUIREMENTSResult row = new APL_SELECT_PROJECT_REQUIREMENTSResult();
                            if (fieldNames.Contains("id") && !reader.IsDBNull(reader.GetOrdinal("id")))
                                row.id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"id")), typeof(int));

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("object_description_id") && !reader.IsDBNull(reader.GetOrdinal("object_description_id")))
                                row.object_description_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description_id")), typeof(int));

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("subobject_id") && !reader.IsDBNull(reader.GetOrdinal("subobject_id")))
                                row.subobject_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_id")), typeof(int));

                            if (fieldNames.Contains("subobject") && !reader.IsDBNull(reader.GetOrdinal("subobject")))
                                row.subobject = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject")), typeof(string));
                            else
                                row.subobject = null;

                            if (fieldNames.Contains("subobject_font_color") && !reader.IsDBNull(reader.GetOrdinal("subobject_font_color")))
                                row.subobject_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_font_color")), typeof(string));
                            else
                                row.subobject_font_color = null;

                            if (fieldNames.Contains("ps_id") && !reader.IsDBNull(reader.GetOrdinal("ps_id")))
                                row.ps_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ps_id")), typeof(int));

                            if (fieldNames.Contains("ps") && !reader.IsDBNull(reader.GetOrdinal("ps")))
                                row.ps = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ps")), typeof(string));
                            else
                                row.ps = null;

                            if (fieldNames.Contains("ps_font_color") && !reader.IsDBNull(reader.GetOrdinal("ps_font_color")))
                                row.ps_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ps_font_color")), typeof(string));
                            else
                                row.ps_font_color = null;

                            if (fieldNames.Contains("plno_id") && !reader.IsDBNull(reader.GetOrdinal("plno_id")))
                                row.plno_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"plno_id")), typeof(int));

                            if (fieldNames.Contains("plno") && !reader.IsDBNull(reader.GetOrdinal("plno")))
                                row.plno = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"plno")), typeof(string));
                            else
                                row.plno = null;

                            if (fieldNames.Contains("plno_font_color") && !reader.IsDBNull(reader.GetOrdinal("plno_font_color")))
                                row.plno_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"plno_font_color")), typeof(string));
                            else
                                row.plno_font_color = null;

                            if (fieldNames.Contains("project_documentation_id") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_id")))
                                row.project_documentation_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_id")), typeof(int));

                            if (fieldNames.Contains("project_documentation") && !reader.IsDBNull(reader.GetOrdinal("project_documentation")))
                                row.project_documentation = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation")), typeof(string));
                            else
                                row.project_documentation = null;

                            if (fieldNames.Contains("project_documentation_font_color") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_font_color")))
                                row.project_documentation_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_font_color")), typeof(string));
                            else
                                row.project_documentation_font_color = null;

                            if (fieldNames.Contains("revision_id") && !reader.IsDBNull(reader.GetOrdinal("revision_id")))
                                row.revision_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_id")), typeof(int));

                            if (fieldNames.Contains("revision") && !reader.IsDBNull(reader.GetOrdinal("revision")))
                                row.revision = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision")), typeof(int));
                            else
                                row.revision = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("description_font_color") && !reader.IsDBNull(reader.GetOrdinal("description_font_color")))
                                row.description_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description_font_color")), typeof(string));
                            else
                                row.description_font_color = null;

                            if (fieldNames.Contains("package_contents") && !reader.IsDBNull(reader.GetOrdinal("package_contents")))
                                row.package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_contents")), typeof(string));
                            else
                                row.package_contents = null;

                            if (fieldNames.Contains("package_contents_font_color") && !reader.IsDBNull(reader.GetOrdinal("package_contents_font_color")))
                                row.package_contents_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_contents_font_color")), typeof(string));
                            else
                                row.package_contents_font_color = null;

                            if (fieldNames.Contains("additional_properties") && !reader.IsDBNull(reader.GetOrdinal("additional_properties")))
                                row.additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_properties")), typeof(string));
                            else
                                row.additional_properties = null;

                            if (fieldNames.Contains("additional_properties_font_color") && !reader.IsDBNull(reader.GetOrdinal("additional_properties_font_color")))
                                row.additional_properties_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_properties_font_color")), typeof(string));
                            else
                                row.additional_properties_font_color = null;

                            if (fieldNames.Contains("manufacturer") && !reader.IsDBNull(reader.GetOrdinal("manufacturer")))
                                row.manufacturer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"manufacturer")), typeof(string));
                            else
                                row.manufacturer = null;

                            if (fieldNames.Contains("manufacturer_font_color") && !reader.IsDBNull(reader.GetOrdinal("manufacturer_font_color")))
                                row.manufacturer_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"manufacturer_font_color")), typeof(string));
                            else
                                row.manufacturer_font_color = null;

                            if (fieldNames.Contains("unit_id") && !reader.IsDBNull(reader.GetOrdinal("unit_id")))
                                row.unit_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_id")), typeof(int));

                            if (fieldNames.Contains("unit") && !reader.IsDBNull(reader.GetOrdinal("unit")))
                                row.unit = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit")), typeof(string));
                            else
                                row.unit = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal("quantity")))
                                row.quantity = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(double));
                            else
                                row.quantity = null;

                            if (fieldNames.Contains("quantity_font_color") && !reader.IsDBNull(reader.GetOrdinal("quantity_font_color")))
                                row.quantity_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity_font_color")), typeof(string));
                            else
                                row.quantity_font_color = null;

                            if (fieldNames.Contains("main_prslno_id") && !reader.IsDBNull(reader.GetOrdinal("main_prslno_id")))
                                row.main_prslno_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"main_prslno_id")), typeof(int));

                            if (fieldNames.Contains("prslno_total_info") && !reader.IsDBNull(reader.GetOrdinal("prslno_total_info")))
                                row.prslno_total_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prslno_total_info")), typeof(string));

                            if (fieldNames.Contains("mass_per_unit") && !reader.IsDBNull(reader.GetOrdinal("mass_per_unit")))
                                row.mass_per_unit = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_per_unit")), typeof(double));
                            else
                                row.mass_per_unit = null;

                            if (fieldNames.Contains("mass_per_unit_font_color") && !reader.IsDBNull(reader.GetOrdinal("mass_per_unit_font_color")))
                                row.mass_per_unit_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_per_unit_font_color")), typeof(string));
                            else
                                row.mass_per_unit_font_color = null;

                            if (fieldNames.Contains("mass_size") && !reader.IsDBNull(reader.GetOrdinal("mass_size")))
                                row.mass_size = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_size")), typeof(string));
                            else
                                row.mass_size = null;

                            if (fieldNames.Contains("mass_size_font_color") && !reader.IsDBNull(reader.GetOrdinal("mass_size_font_color")))
                                row.mass_size_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_size_font_color")), typeof(string));
                            else
                                row.mass_size_font_color = null;

                            if (fieldNames.Contains("item_state_id") && !reader.IsDBNull(reader.GetOrdinal("item_state_id")))
                                row.item_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_state_id")), typeof(int));

                            if (fieldNames.Contains("item_state_description") && !reader.IsDBNull(reader.GetOrdinal("item_state_description")))
                                row.item_state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"item_state_description")), typeof(string));
                            else
                                row.item_state_description = null;

                            if (fieldNames.Contains("reason_change_state") && !reader.IsDBNull(reader.GetOrdinal("reason_change_state")))
                                row.reason_change_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"reason_change_state")), typeof(string));

                            if (fieldNames.Contains("delivery_type_id") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_id")))
                                row.delivery_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_id")), typeof(int));
                            else
                                row.delivery_type_id = null;

                            if (fieldNames.Contains("delivery_type") && !reader.IsDBNull(reader.GetOrdinal("delivery_type")))
                                row.delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type")), typeof(string));
                            else
                                row.delivery_type = null;

                            if (fieldNames.Contains("delivery_type_font_color") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_font_color")))
                                row.delivery_type_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_font_color")), typeof(string));
                            else
                                row.delivery_type_font_color = null;

                            if (fieldNames.Contains("goods_type_id") && !reader.IsDBNull(reader.GetOrdinal("goods_type_id")))
                                row.goods_type_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"goods_type_id")), typeof(int));
                            else
                                row.goods_type_id = null;

                            if (fieldNames.Contains("goods_type") && !reader.IsDBNull(reader.GetOrdinal("goods_type")))
                                row.goods_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"goods_type")), typeof(string));
                            else
                                row.goods_type = null;

                            if (fieldNames.Contains("goods_type_font_color") && !reader.IsDBNull(reader.GetOrdinal("goods_type_font_color")))
                                row.goods_type_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"goods_type_font_color")), typeof(string));
                            else
                                row.goods_type_font_color = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("summary_font_color") && !reader.IsDBNull(reader.GetOrdinal("summary_font_color")))
                                row.summary_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary_font_color")), typeof(string));
                            else
                                row.summary_font_color = null;

                            if (fieldNames.Contains("summary2") && !reader.IsDBNull(reader.GetOrdinal("summary2")))
                                row.summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary2")), typeof(string));
                            else
                                row.summary2 = null;

                            if (fieldNames.Contains("summary2_font_color") && !reader.IsDBNull(reader.GetOrdinal("summary2_font_color")))
                                row.summary2_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary2_font_color")), typeof(string));
                            else
                                row.summary2_font_color = null;

                            if (fieldNames.Contains("in_kd_id") && !reader.IsDBNull(reader.GetOrdinal("in_kd_id")))
                                row.in_kd_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"in_kd_id")), typeof(int));
                            else
                                row.in_kd_id = null;

                            if (fieldNames.Contains("in_kd") && !reader.IsDBNull(reader.GetOrdinal("in_kd")))
                                row.in_kd = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"in_kd")), typeof(string));

                            if (fieldNames.Contains("in_kd_font_color") && !reader.IsDBNull(reader.GetOrdinal("in_kd_font_color")))
                                row.in_kd_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"in_kd_font_color")), typeof(string));
                            else
                                row.in_kd_font_color = null;

                            if (fieldNames.Contains("psd_state_id") && !reader.IsDBNull(reader.GetOrdinal("psd_state_id")))
                                row.psd_state_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"psd_state_id")), typeof(int));
                            else
                                row.psd_state_id = null;

                            if (fieldNames.Contains("psd_state") && !reader.IsDBNull(reader.GetOrdinal("psd_state")))
                                row.psd_state = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"psd_state")), typeof(string));

                            if (fieldNames.Contains("psd_state_font_color") && !reader.IsDBNull(reader.GetOrdinal("psd_state_font_color")))
                                row.psd_state_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"psd_state_font_color")), typeof(string));
                            else
                                row.psd_state_font_color = null;

                            if (fieldNames.Contains("pr_source_id") && !reader.IsDBNull(reader.GetOrdinal("pr_source_id")))
                                row.pr_source_id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"pr_source_id")), typeof(int));
                            else
                                row.pr_source_id = null;

                            if (fieldNames.Contains("pr_source") && !reader.IsDBNull(reader.GetOrdinal("pr_source")))
                                row.pr_source = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"pr_source")), typeof(string));

                            if (fieldNames.Contains("pr_source_font_color") && !reader.IsDBNull(reader.GetOrdinal("pr_source_font_color")))
                                row.pr_source_font_color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"pr_source_font_color")), typeof(string));
                            else
                                row.pr_source_font_color = null;

                            if (fieldNames.Contains("creation_date") && !reader.IsDBNull(reader.GetOrdinal("creation_date")))
                                row.creation_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"creation_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("modification_date") && !reader.IsDBNull(reader.GetOrdinal("modification_date")))
                                row.modification_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"modification_date")), typeof(System.DateTime));

                            if (fieldNames.Contains("parent_package_code") && !reader.IsDBNull(reader.GetOrdinal("parent_package_code")))
                                row.parent_package_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"parent_package_code")), typeof(string));
                            else
                                row.parent_package_code = null;

                            if (fieldNames.Contains("ekk_code") && !reader.IsDBNull(reader.GetOrdinal("ekk_code")))
                                row.ekk_code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ekk_code")), typeof(string));
                            else
                                row.ekk_code = null;

                            if (fieldNames.Contains("drv_delivery_type") && !reader.IsDBNull(reader.GetOrdinal("drv_delivery_type")))
                                row.drv_delivery_type = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"drv_delivery_type")), typeof(string));

                            if (fieldNames.Contains("supply_manager") && !reader.IsDBNull(reader.GetOrdinal("supply_manager")))
                                row.supply_manager = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"supply_manager")), typeof(string));
                            else
                                row.supply_manager = null;

                            if (fieldNames.Contains("order_information") && !reader.IsDBNull(reader.GetOrdinal("order_information")))
                                row.order_information = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order_information")), typeof(string));
                            else
                                row.order_information = null;

                            if (fieldNames.Contains("specification_information") && !reader.IsDBNull(reader.GetOrdinal("specification_information")))
                                row.specification_information = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"specification_information")), typeof(string));
                            else
                                row.specification_information = null;

                            if (fieldNames.Contains("change_history") && !reader.IsDBNull(reader.GetOrdinal("change_history")))
                                row.change_history = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"change_history")), typeof(string));
                            else
                                row.change_history = null;

                            if (fieldNames.Contains("start_delivery_date") && !reader.IsDBNull(reader.GetOrdinal("start_delivery_date")))
                                row.start_delivery_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start_delivery_date")), typeof(System.DateTime));
                            else
                                row.start_delivery_date = null;

                            if (fieldNames.Contains("finish_delivery_date") && !reader.IsDBNull(reader.GetOrdinal("finish_delivery_date")))
                                row.finish_delivery_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish_delivery_date")), typeof(System.DateTime));
                            else
                                row.finish_delivery_date = null;

                            if (fieldNames.Contains("unsi_comment") && !reader.IsDBNull(reader.GetOrdinal("unsi_comment")))
                                row.unsi_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unsi_comment")), typeof(string));
                            else
                                row.unsi_comment = null;

                            if (fieldNames.Contains("dmtos_comment") && !reader.IsDBNull(reader.GetOrdinal("dmtos_comment")))
                                row.dmtos_comment = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dmtos_comment")), typeof(string));
                            else
                                row.dmtos_comment = null;

                            if (fieldNames.Contains("color") && !reader.IsDBNull(reader.GetOrdinal("color")))
                                row.color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color")), typeof(string));

                            if (fieldNames.Contains("delivered") && !reader.IsDBNull(reader.GetOrdinal("delivered")))
                                row.delivered = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivered")), typeof(decimal));

                            if (fieldNames.Contains("not_delivered") && !reader.IsDBNull(reader.GetOrdinal("not_delivered")))
                                row.not_delivered = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"not_delivered")), typeof(decimal));

                            if (fieldNames.Contains("deficit_delivery_date") && !reader.IsDBNull(reader.GetOrdinal("deficit_delivery_date")))
                                row.deficit_delivery_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"deficit_delivery_date")), typeof(System.DateTime));
                            else
                                row.deficit_delivery_date = null;

                            if (fieldNames.Contains("fact_delivery_date") && !reader.IsDBNull(reader.GetOrdinal("fact_delivery_date")))
                                row.fact_delivery_date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"fact_delivery_date")), typeof(System.DateTime));
                            else
                                row.fact_delivery_date = null;

                            if (fieldNames.Contains("dks_customer_letter_info") && !reader.IsDBNull(reader.GetOrdinal("dks_customer_letter_info")))
                                row.dks_customer_letter_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dks_customer_letter_info")), typeof(string));

                            if (fieldNames.Contains("edit_notes") && !reader.IsDBNull(reader.GetOrdinal("edit_notes")))
                                row.edit_notes = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"edit_notes")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> APL_UPDATE_PROJECT_REQUIREMENT (System.Nullable<int> id, System.Nullable<int> object_description_id, System.Nullable<int> subobject_id, System.Nullable<int> ps_id, System.Nullable<int> plno_id, System.Nullable<int> project_documentation_id, System.Nullable<int> revision_id, string description, string package_contents, string additional_properties, string manufacturer, System.Nullable<int> unit_id, System.Nullable<double> quantity, System.Nullable<double> mass_per_unit, string mass_size, System.Nullable<int> delivery_type_id, System.Nullable<int> goods_type_id, string summary, string summary2, string parent_package_code, System.Nullable<int> in_kd_id, System.Nullable<int> psd_state_id, System.Nullable<int> pr_source_id, string dks_customer_letter_info, System.Nullable<int> change_request_id, System.Nullable<int> main_prslno_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_PROJECT_REQUIREMENT";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter object_description_idParameter = cmd.CreateParameter();
                    object_description_idParameter.ParameterName = "object_description_id";
                    object_description_idParameter.Direction = ParameterDirection.Input;
                    object_description_idParameter.DbType = DbType.Int32;
                    object_description_idParameter.Precision = 10;
                    object_description_idParameter.Scale = 0;
                    if (object_description_id.HasValue)
                    {
                        object_description_idParameter.Value = object_description_id.Value;
                    }
                    else
                    {
                        object_description_idParameter.Size = -1;
                        object_description_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(object_description_idParameter);

                    DbParameter subobject_idParameter = cmd.CreateParameter();
                    subobject_idParameter.ParameterName = "subobject_id";
                    subobject_idParameter.Direction = ParameterDirection.Input;
                    subobject_idParameter.DbType = DbType.Int32;
                    subobject_idParameter.Precision = 10;
                    subobject_idParameter.Scale = 0;
                    if (subobject_id.HasValue)
                    {
                        subobject_idParameter.Value = subobject_id.Value;
                    }
                    else
                    {
                        subobject_idParameter.Size = -1;
                        subobject_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subobject_idParameter);

                    DbParameter ps_idParameter = cmd.CreateParameter();
                    ps_idParameter.ParameterName = "ps_id";
                    ps_idParameter.Direction = ParameterDirection.Input;
                    ps_idParameter.DbType = DbType.Int32;
                    ps_idParameter.Precision = 10;
                    ps_idParameter.Scale = 0;
                    if (ps_id.HasValue)
                    {
                        ps_idParameter.Value = ps_id.Value;
                    }
                    else
                    {
                        ps_idParameter.Size = -1;
                        ps_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ps_idParameter);

                    DbParameter plno_idParameter = cmd.CreateParameter();
                    plno_idParameter.ParameterName = "plno_id";
                    plno_idParameter.Direction = ParameterDirection.Input;
                    plno_idParameter.DbType = DbType.Int32;
                    plno_idParameter.Precision = 10;
                    plno_idParameter.Scale = 0;
                    if (plno_id.HasValue)
                    {
                        plno_idParameter.Value = plno_id.Value;
                    }
                    else
                    {
                        plno_idParameter.Size = -1;
                        plno_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(plno_idParameter);

                    DbParameter project_documentation_idParameter = cmd.CreateParameter();
                    project_documentation_idParameter.ParameterName = "project_documentation_id";
                    project_documentation_idParameter.Direction = ParameterDirection.Input;
                    project_documentation_idParameter.DbType = DbType.Int32;
                    project_documentation_idParameter.Precision = 10;
                    project_documentation_idParameter.Scale = 0;
                    if (project_documentation_id.HasValue)
                    {
                        project_documentation_idParameter.Value = project_documentation_id.Value;
                    }
                    else
                    {
                        project_documentation_idParameter.Size = -1;
                        project_documentation_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_documentation_idParameter);

                    DbParameter revision_idParameter = cmd.CreateParameter();
                    revision_idParameter.ParameterName = "revision_id";
                    revision_idParameter.Direction = ParameterDirection.Input;
                    revision_idParameter.DbType = DbType.Int32;
                    revision_idParameter.Precision = 10;
                    revision_idParameter.Scale = 0;
                    if (revision_id.HasValue)
                    {
                        revision_idParameter.Value = revision_id.Value;
                    }
                    else
                    {
                        revision_idParameter.Size = -1;
                        revision_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(revision_idParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter package_contentsParameter = cmd.CreateParameter();
                    package_contentsParameter.ParameterName = "package_contents";
                    package_contentsParameter.Direction = ParameterDirection.Input;
                    package_contentsParameter.DbType = DbType.String;
                    if (package_contents != null)
                    {
                        package_contentsParameter.Value = package_contents;
                    }
                    else
                    {
                        package_contentsParameter.Size = -1;
                        package_contentsParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(package_contentsParameter);

                    DbParameter additional_propertiesParameter = cmd.CreateParameter();
                    additional_propertiesParameter.ParameterName = "additional_properties";
                    additional_propertiesParameter.Direction = ParameterDirection.Input;
                    additional_propertiesParameter.DbType = DbType.String;
                    if (additional_properties != null)
                    {
                        additional_propertiesParameter.Value = additional_properties;
                    }
                    else
                    {
                        additional_propertiesParameter.Size = -1;
                        additional_propertiesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(additional_propertiesParameter);

                    DbParameter manufacturerParameter = cmd.CreateParameter();
                    manufacturerParameter.ParameterName = "manufacturer";
                    manufacturerParameter.Direction = ParameterDirection.Input;
                    manufacturerParameter.DbType = DbType.String;
                    if (manufacturer != null)
                    {
                        manufacturerParameter.Value = manufacturer;
                    }
                    else
                    {
                        manufacturerParameter.Size = -1;
                        manufacturerParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(manufacturerParameter);

                    DbParameter unit_idParameter = cmd.CreateParameter();
                    unit_idParameter.ParameterName = "unit_id";
                    unit_idParameter.Direction = ParameterDirection.Input;
                    unit_idParameter.DbType = DbType.Int32;
                    unit_idParameter.Precision = 10;
                    unit_idParameter.Scale = 0;
                    if (unit_id.HasValue)
                    {
                        unit_idParameter.Value = unit_id.Value;
                    }
                    else
                    {
                        unit_idParameter.Size = -1;
                        unit_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(unit_idParameter);

                    DbParameter quantityParameter = cmd.CreateParameter();
                    quantityParameter.ParameterName = "quantity";
                    quantityParameter.Direction = ParameterDirection.Input;
                    quantityParameter.DbType = DbType.Double;
                    quantityParameter.Precision = 53;
                    if (quantity.HasValue)
                    {
                        quantityParameter.Value = quantity.Value;
                    }
                    else
                    {
                        quantityParameter.Size = -1;
                        quantityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(quantityParameter);

                    DbParameter mass_per_unitParameter = cmd.CreateParameter();
                    mass_per_unitParameter.ParameterName = "mass_per_unit";
                    mass_per_unitParameter.Direction = ParameterDirection.Input;
                    mass_per_unitParameter.DbType = DbType.Double;
                    mass_per_unitParameter.Precision = 53;
                    if (mass_per_unit.HasValue)
                    {
                        mass_per_unitParameter.Value = mass_per_unit.Value;
                    }
                    else
                    {
                        mass_per_unitParameter.Size = -1;
                        mass_per_unitParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(mass_per_unitParameter);

                    DbParameter mass_sizeParameter = cmd.CreateParameter();
                    mass_sizeParameter.ParameterName = "mass_size";
                    mass_sizeParameter.Direction = ParameterDirection.Input;
                    mass_sizeParameter.DbType = DbType.String;
                    if (mass_size != null)
                    {
                        mass_sizeParameter.Value = mass_size;
                    }
                    else
                    {
                        mass_sizeParameter.Size = -1;
                        mass_sizeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(mass_sizeParameter);

                    DbParameter delivery_type_idParameter = cmd.CreateParameter();
                    delivery_type_idParameter.ParameterName = "delivery_type_id";
                    delivery_type_idParameter.Direction = ParameterDirection.Input;
                    delivery_type_idParameter.DbType = DbType.Int32;
                    delivery_type_idParameter.Precision = 10;
                    delivery_type_idParameter.Scale = 0;
                    if (delivery_type_id.HasValue)
                    {
                        delivery_type_idParameter.Value = delivery_type_id.Value;
                    }
                    else
                    {
                        delivery_type_idParameter.Size = -1;
                        delivery_type_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_idParameter);

                    DbParameter goods_type_idParameter = cmd.CreateParameter();
                    goods_type_idParameter.ParameterName = "goods_type_id";
                    goods_type_idParameter.Direction = ParameterDirection.Input;
                    goods_type_idParameter.DbType = DbType.Int32;
                    goods_type_idParameter.Precision = 10;
                    goods_type_idParameter.Scale = 0;
                    if (goods_type_id.HasValue)
                    {
                        goods_type_idParameter.Value = goods_type_id.Value;
                    }
                    else
                    {
                        goods_type_idParameter.Size = -1;
                        goods_type_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(goods_type_idParameter);

                    DbParameter summaryParameter = cmd.CreateParameter();
                    summaryParameter.ParameterName = "summary";
                    summaryParameter.Direction = ParameterDirection.Input;
                    summaryParameter.DbType = DbType.String;
                    if (summary != null)
                    {
                        summaryParameter.Value = summary;
                    }
                    else
                    {
                        summaryParameter.Size = -1;
                        summaryParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(summaryParameter);

                    DbParameter summary2Parameter = cmd.CreateParameter();
                    summary2Parameter.ParameterName = "summary2";
                    summary2Parameter.Direction = ParameterDirection.Input;
                    summary2Parameter.DbType = DbType.String;
                    if (summary2 != null)
                    {
                        summary2Parameter.Value = summary2;
                    }
                    else
                    {
                        summary2Parameter.Size = -1;
                        summary2Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(summary2Parameter);

                    DbParameter parent_package_codeParameter = cmd.CreateParameter();
                    parent_package_codeParameter.ParameterName = "parent_package_code";
                    parent_package_codeParameter.Direction = ParameterDirection.Input;
                    parent_package_codeParameter.DbType = DbType.String;
                    parent_package_codeParameter.Size = 510;
                    if (parent_package_code != null)
                    {
                        parent_package_codeParameter.Value = parent_package_code;
                    }
                    else
                    {
                        parent_package_codeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(parent_package_codeParameter);

                    DbParameter in_kd_idParameter = cmd.CreateParameter();
                    in_kd_idParameter.ParameterName = "in_kd_id";
                    in_kd_idParameter.Direction = ParameterDirection.Input;
                    in_kd_idParameter.DbType = DbType.Int32;
                    in_kd_idParameter.Precision = 10;
                    in_kd_idParameter.Scale = 0;
                    if (in_kd_id.HasValue)
                    {
                        in_kd_idParameter.Value = in_kd_id.Value;
                    }
                    else
                    {
                        in_kd_idParameter.Size = -1;
                        in_kd_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(in_kd_idParameter);

                    DbParameter psd_state_idParameter = cmd.CreateParameter();
                    psd_state_idParameter.ParameterName = "psd_state_id";
                    psd_state_idParameter.Direction = ParameterDirection.Input;
                    psd_state_idParameter.DbType = DbType.Int32;
                    psd_state_idParameter.Precision = 10;
                    psd_state_idParameter.Scale = 0;
                    if (psd_state_id.HasValue)
                    {
                        psd_state_idParameter.Value = psd_state_id.Value;
                    }
                    else
                    {
                        psd_state_idParameter.Size = -1;
                        psd_state_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(psd_state_idParameter);

                    DbParameter pr_source_idParameter = cmd.CreateParameter();
                    pr_source_idParameter.ParameterName = "pr_source_id";
                    pr_source_idParameter.Direction = ParameterDirection.Input;
                    pr_source_idParameter.DbType = DbType.Int32;
                    pr_source_idParameter.Precision = 10;
                    pr_source_idParameter.Scale = 0;
                    if (pr_source_id.HasValue)
                    {
                        pr_source_idParameter.Value = pr_source_id.Value;
                    }
                    else
                    {
                        pr_source_idParameter.Size = -1;
                        pr_source_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(pr_source_idParameter);

                    DbParameter dks_customer_letter_infoParameter = cmd.CreateParameter();
                    dks_customer_letter_infoParameter.ParameterName = "dks_customer_letter_info";
                    dks_customer_letter_infoParameter.Direction = ParameterDirection.Input;
                    dks_customer_letter_infoParameter.DbType = DbType.String;
                    if (dks_customer_letter_info != null)
                    {
                        dks_customer_letter_infoParameter.Value = dks_customer_letter_info;
                    }
                    else
                    {
                        dks_customer_letter_infoParameter.Size = -1;
                        dks_customer_letter_infoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(dks_customer_letter_infoParameter);

                    DbParameter change_request_idParameter = cmd.CreateParameter();
                    change_request_idParameter.ParameterName = "change_request_id";
                    change_request_idParameter.Direction = ParameterDirection.Input;
                    change_request_idParameter.DbType = DbType.Int32;
                    change_request_idParameter.Precision = 10;
                    change_request_idParameter.Scale = 0;
                    if (change_request_id.HasValue)
                    {
                        change_request_idParameter.Value = change_request_id.Value;
                    }
                    else
                    {
                        change_request_idParameter.Size = -1;
                        change_request_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(change_request_idParameter);

                    DbParameter main_prslno_idParameter = cmd.CreateParameter();
                    main_prslno_idParameter.ParameterName = "main_prslno_id";
                    main_prslno_idParameter.Direction = ParameterDirection.Input;
                    main_prslno_idParameter.DbType = DbType.Int32;
                    main_prslno_idParameter.Precision = 10;
                    main_prslno_idParameter.Scale = 0;
                    if (main_prslno_id.HasValue)
                    {
                        main_prslno_idParameter.Value = main_prslno_id.Value;
                    }
                    else
                    {
                        main_prslno_idParameter.Size = -1;
                        main_prslno_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(main_prslno_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> APL_UPDATE_PROJECT_REQUIREMENTAsync (System.Nullable<int> id, System.Nullable<int> object_description_id, System.Nullable<int> subobject_id, System.Nullable<int> ps_id, System.Nullable<int> plno_id, System.Nullable<int> project_documentation_id, System.Nullable<int> revision_id, string description, string package_contents, string additional_properties, string manufacturer, System.Nullable<int> unit_id, System.Nullable<double> quantity, System.Nullable<double> mass_per_unit, string mass_size, System.Nullable<int> delivery_type_id, System.Nullable<int> goods_type_id, string summary, string summary2, string parent_package_code, System.Nullable<int> in_kd_id, System.Nullable<int> psd_state_id, System.Nullable<int> pr_source_id, string dks_customer_letter_info, System.Nullable<int> change_request_id, System.Nullable<int> main_prslno_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_PROJECT_REQUIREMENT";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);

                    DbParameter object_description_idParameter = cmd.CreateParameter();
                    object_description_idParameter.ParameterName = "object_description_id";
                    object_description_idParameter.Direction = ParameterDirection.Input;
                    object_description_idParameter.DbType = DbType.Int32;
                    object_description_idParameter.Precision = 10;
                    object_description_idParameter.Scale = 0;
                    if (object_description_id.HasValue)
                    {
                        object_description_idParameter.Value = object_description_id.Value;
                    }
                    else
                    {
                        object_description_idParameter.Size = -1;
                        object_description_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(object_description_idParameter);

                    DbParameter subobject_idParameter = cmd.CreateParameter();
                    subobject_idParameter.ParameterName = "subobject_id";
                    subobject_idParameter.Direction = ParameterDirection.Input;
                    subobject_idParameter.DbType = DbType.Int32;
                    subobject_idParameter.Precision = 10;
                    subobject_idParameter.Scale = 0;
                    if (subobject_id.HasValue)
                    {
                        subobject_idParameter.Value = subobject_id.Value;
                    }
                    else
                    {
                        subobject_idParameter.Size = -1;
                        subobject_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subobject_idParameter);

                    DbParameter ps_idParameter = cmd.CreateParameter();
                    ps_idParameter.ParameterName = "ps_id";
                    ps_idParameter.Direction = ParameterDirection.Input;
                    ps_idParameter.DbType = DbType.Int32;
                    ps_idParameter.Precision = 10;
                    ps_idParameter.Scale = 0;
                    if (ps_id.HasValue)
                    {
                        ps_idParameter.Value = ps_id.Value;
                    }
                    else
                    {
                        ps_idParameter.Size = -1;
                        ps_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ps_idParameter);

                    DbParameter plno_idParameter = cmd.CreateParameter();
                    plno_idParameter.ParameterName = "plno_id";
                    plno_idParameter.Direction = ParameterDirection.Input;
                    plno_idParameter.DbType = DbType.Int32;
                    plno_idParameter.Precision = 10;
                    plno_idParameter.Scale = 0;
                    if (plno_id.HasValue)
                    {
                        plno_idParameter.Value = plno_id.Value;
                    }
                    else
                    {
                        plno_idParameter.Size = -1;
                        plno_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(plno_idParameter);

                    DbParameter project_documentation_idParameter = cmd.CreateParameter();
                    project_documentation_idParameter.ParameterName = "project_documentation_id";
                    project_documentation_idParameter.Direction = ParameterDirection.Input;
                    project_documentation_idParameter.DbType = DbType.Int32;
                    project_documentation_idParameter.Precision = 10;
                    project_documentation_idParameter.Scale = 0;
                    if (project_documentation_id.HasValue)
                    {
                        project_documentation_idParameter.Value = project_documentation_id.Value;
                    }
                    else
                    {
                        project_documentation_idParameter.Size = -1;
                        project_documentation_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_documentation_idParameter);

                    DbParameter revision_idParameter = cmd.CreateParameter();
                    revision_idParameter.ParameterName = "revision_id";
                    revision_idParameter.Direction = ParameterDirection.Input;
                    revision_idParameter.DbType = DbType.Int32;
                    revision_idParameter.Precision = 10;
                    revision_idParameter.Scale = 0;
                    if (revision_id.HasValue)
                    {
                        revision_idParameter.Value = revision_id.Value;
                    }
                    else
                    {
                        revision_idParameter.Size = -1;
                        revision_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(revision_idParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter package_contentsParameter = cmd.CreateParameter();
                    package_contentsParameter.ParameterName = "package_contents";
                    package_contentsParameter.Direction = ParameterDirection.Input;
                    package_contentsParameter.DbType = DbType.String;
                    if (package_contents != null)
                    {
                        package_contentsParameter.Value = package_contents;
                    }
                    else
                    {
                        package_contentsParameter.Size = -1;
                        package_contentsParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(package_contentsParameter);

                    DbParameter additional_propertiesParameter = cmd.CreateParameter();
                    additional_propertiesParameter.ParameterName = "additional_properties";
                    additional_propertiesParameter.Direction = ParameterDirection.Input;
                    additional_propertiesParameter.DbType = DbType.String;
                    if (additional_properties != null)
                    {
                        additional_propertiesParameter.Value = additional_properties;
                    }
                    else
                    {
                        additional_propertiesParameter.Size = -1;
                        additional_propertiesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(additional_propertiesParameter);

                    DbParameter manufacturerParameter = cmd.CreateParameter();
                    manufacturerParameter.ParameterName = "manufacturer";
                    manufacturerParameter.Direction = ParameterDirection.Input;
                    manufacturerParameter.DbType = DbType.String;
                    if (manufacturer != null)
                    {
                        manufacturerParameter.Value = manufacturer;
                    }
                    else
                    {
                        manufacturerParameter.Size = -1;
                        manufacturerParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(manufacturerParameter);

                    DbParameter unit_idParameter = cmd.CreateParameter();
                    unit_idParameter.ParameterName = "unit_id";
                    unit_idParameter.Direction = ParameterDirection.Input;
                    unit_idParameter.DbType = DbType.Int32;
                    unit_idParameter.Precision = 10;
                    unit_idParameter.Scale = 0;
                    if (unit_id.HasValue)
                    {
                        unit_idParameter.Value = unit_id.Value;
                    }
                    else
                    {
                        unit_idParameter.Size = -1;
                        unit_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(unit_idParameter);

                    DbParameter quantityParameter = cmd.CreateParameter();
                    quantityParameter.ParameterName = "quantity";
                    quantityParameter.Direction = ParameterDirection.Input;
                    quantityParameter.DbType = DbType.Double;
                    quantityParameter.Precision = 53;
                    if (quantity.HasValue)
                    {
                        quantityParameter.Value = quantity.Value;
                    }
                    else
                    {
                        quantityParameter.Size = -1;
                        quantityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(quantityParameter);

                    DbParameter mass_per_unitParameter = cmd.CreateParameter();
                    mass_per_unitParameter.ParameterName = "mass_per_unit";
                    mass_per_unitParameter.Direction = ParameterDirection.Input;
                    mass_per_unitParameter.DbType = DbType.Double;
                    mass_per_unitParameter.Precision = 53;
                    if (mass_per_unit.HasValue)
                    {
                        mass_per_unitParameter.Value = mass_per_unit.Value;
                    }
                    else
                    {
                        mass_per_unitParameter.Size = -1;
                        mass_per_unitParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(mass_per_unitParameter);

                    DbParameter mass_sizeParameter = cmd.CreateParameter();
                    mass_sizeParameter.ParameterName = "mass_size";
                    mass_sizeParameter.Direction = ParameterDirection.Input;
                    mass_sizeParameter.DbType = DbType.String;
                    if (mass_size != null)
                    {
                        mass_sizeParameter.Value = mass_size;
                    }
                    else
                    {
                        mass_sizeParameter.Size = -1;
                        mass_sizeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(mass_sizeParameter);

                    DbParameter delivery_type_idParameter = cmd.CreateParameter();
                    delivery_type_idParameter.ParameterName = "delivery_type_id";
                    delivery_type_idParameter.Direction = ParameterDirection.Input;
                    delivery_type_idParameter.DbType = DbType.Int32;
                    delivery_type_idParameter.Precision = 10;
                    delivery_type_idParameter.Scale = 0;
                    if (delivery_type_id.HasValue)
                    {
                        delivery_type_idParameter.Value = delivery_type_id.Value;
                    }
                    else
                    {
                        delivery_type_idParameter.Size = -1;
                        delivery_type_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_idParameter);

                    DbParameter goods_type_idParameter = cmd.CreateParameter();
                    goods_type_idParameter.ParameterName = "goods_type_id";
                    goods_type_idParameter.Direction = ParameterDirection.Input;
                    goods_type_idParameter.DbType = DbType.Int32;
                    goods_type_idParameter.Precision = 10;
                    goods_type_idParameter.Scale = 0;
                    if (goods_type_id.HasValue)
                    {
                        goods_type_idParameter.Value = goods_type_id.Value;
                    }
                    else
                    {
                        goods_type_idParameter.Size = -1;
                        goods_type_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(goods_type_idParameter);

                    DbParameter summaryParameter = cmd.CreateParameter();
                    summaryParameter.ParameterName = "summary";
                    summaryParameter.Direction = ParameterDirection.Input;
                    summaryParameter.DbType = DbType.String;
                    if (summary != null)
                    {
                        summaryParameter.Value = summary;
                    }
                    else
                    {
                        summaryParameter.Size = -1;
                        summaryParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(summaryParameter);

                    DbParameter summary2Parameter = cmd.CreateParameter();
                    summary2Parameter.ParameterName = "summary2";
                    summary2Parameter.Direction = ParameterDirection.Input;
                    summary2Parameter.DbType = DbType.String;
                    if (summary2 != null)
                    {
                        summary2Parameter.Value = summary2;
                    }
                    else
                    {
                        summary2Parameter.Size = -1;
                        summary2Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(summary2Parameter);

                    DbParameter parent_package_codeParameter = cmd.CreateParameter();
                    parent_package_codeParameter.ParameterName = "parent_package_code";
                    parent_package_codeParameter.Direction = ParameterDirection.Input;
                    parent_package_codeParameter.DbType = DbType.String;
                    parent_package_codeParameter.Size = 510;
                    if (parent_package_code != null)
                    {
                        parent_package_codeParameter.Value = parent_package_code;
                    }
                    else
                    {
                        parent_package_codeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(parent_package_codeParameter);

                    DbParameter in_kd_idParameter = cmd.CreateParameter();
                    in_kd_idParameter.ParameterName = "in_kd_id";
                    in_kd_idParameter.Direction = ParameterDirection.Input;
                    in_kd_idParameter.DbType = DbType.Int32;
                    in_kd_idParameter.Precision = 10;
                    in_kd_idParameter.Scale = 0;
                    if (in_kd_id.HasValue)
                    {
                        in_kd_idParameter.Value = in_kd_id.Value;
                    }
                    else
                    {
                        in_kd_idParameter.Size = -1;
                        in_kd_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(in_kd_idParameter);

                    DbParameter psd_state_idParameter = cmd.CreateParameter();
                    psd_state_idParameter.ParameterName = "psd_state_id";
                    psd_state_idParameter.Direction = ParameterDirection.Input;
                    psd_state_idParameter.DbType = DbType.Int32;
                    psd_state_idParameter.Precision = 10;
                    psd_state_idParameter.Scale = 0;
                    if (psd_state_id.HasValue)
                    {
                        psd_state_idParameter.Value = psd_state_id.Value;
                    }
                    else
                    {
                        psd_state_idParameter.Size = -1;
                        psd_state_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(psd_state_idParameter);

                    DbParameter pr_source_idParameter = cmd.CreateParameter();
                    pr_source_idParameter.ParameterName = "pr_source_id";
                    pr_source_idParameter.Direction = ParameterDirection.Input;
                    pr_source_idParameter.DbType = DbType.Int32;
                    pr_source_idParameter.Precision = 10;
                    pr_source_idParameter.Scale = 0;
                    if (pr_source_id.HasValue)
                    {
                        pr_source_idParameter.Value = pr_source_id.Value;
                    }
                    else
                    {
                        pr_source_idParameter.Size = -1;
                        pr_source_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(pr_source_idParameter);

                    DbParameter dks_customer_letter_infoParameter = cmd.CreateParameter();
                    dks_customer_letter_infoParameter.ParameterName = "dks_customer_letter_info";
                    dks_customer_letter_infoParameter.Direction = ParameterDirection.Input;
                    dks_customer_letter_infoParameter.DbType = DbType.String;
                    if (dks_customer_letter_info != null)
                    {
                        dks_customer_letter_infoParameter.Value = dks_customer_letter_info;
                    }
                    else
                    {
                        dks_customer_letter_infoParameter.Size = -1;
                        dks_customer_letter_infoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(dks_customer_letter_infoParameter);

                    DbParameter change_request_idParameter = cmd.CreateParameter();
                    change_request_idParameter.ParameterName = "change_request_id";
                    change_request_idParameter.Direction = ParameterDirection.Input;
                    change_request_idParameter.DbType = DbType.Int32;
                    change_request_idParameter.Precision = 10;
                    change_request_idParameter.Scale = 0;
                    if (change_request_id.HasValue)
                    {
                        change_request_idParameter.Value = change_request_id.Value;
                    }
                    else
                    {
                        change_request_idParameter.Size = -1;
                        change_request_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(change_request_idParameter);

                    DbParameter main_prslno_idParameter = cmd.CreateParameter();
                    main_prslno_idParameter.ParameterName = "main_prslno_id";
                    main_prslno_idParameter.Direction = ParameterDirection.Input;
                    main_prslno_idParameter.DbType = DbType.Int32;
                    main_prslno_idParameter.Precision = 10;
                    main_prslno_idParameter.Scale = 0;
                    if (main_prslno_id.HasValue)
                    {
                        main_prslno_idParameter.Value = main_prslno_id.Value;
                    }
                    else
                    {
                        main_prslno_idParameter.Size = -1;
                        main_prslno_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(main_prslno_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_INSERT_PROJECT_REQUIREMENT_LOADING_ITEMResult> APL_INSERT_PROJECT_REQUIREMENT_LOADING_ITEM (System.Nullable<int> loading_id, System.Nullable<int> project_id, string code, string object_description, string subobject_description, string project_documentation, string project_documentation_date_description, string project_documentation_receive_date_description, string revision_number_description, string revision_number_date_description, string revision_number_receive_date_description, string start_description, string finish_description, string station_description, string description, string additional_properties, string package_contents, string unit_description, string quantity_description, string mass_per_unit_description, string mass_size, string manufacturer_description, string delivery_type_description, string goods_type_description, string summary, string summary2, string state_description, string package_description, string in_kd_description, string psd_state_description, string pr_source_description, string subcontractor_description, string dks_customer_letter_info, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<APL_INSERT_PROJECT_REQUIREMENT_LOADING_ITEMResult> result = new List<APL_INSERT_PROJECT_REQUIREMENT_LOADING_ITEMResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_INSERT_PROJECT_REQUIREMENT_LOADING_ITEM";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);

                    DbParameter codeParameter = cmd.CreateParameter();
                    codeParameter.ParameterName = "code";
                    codeParameter.Direction = ParameterDirection.Input;
                    codeParameter.DbType = DbType.String;
                    if (code != null)
                    {
                        codeParameter.Value = code;
                    }
                    else
                    {
                        codeParameter.Size = -1;
                        codeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(codeParameter);

                    DbParameter object_descriptionParameter = cmd.CreateParameter();
                    object_descriptionParameter.ParameterName = "object_description";
                    object_descriptionParameter.Direction = ParameterDirection.Input;
                    object_descriptionParameter.DbType = DbType.String;
                    if (object_description != null)
                    {
                        object_descriptionParameter.Value = object_description;
                    }
                    else
                    {
                        object_descriptionParameter.Size = -1;
                        object_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(object_descriptionParameter);

                    DbParameter subobject_descriptionParameter = cmd.CreateParameter();
                    subobject_descriptionParameter.ParameterName = "subobject_description";
                    subobject_descriptionParameter.Direction = ParameterDirection.Input;
                    subobject_descriptionParameter.DbType = DbType.String;
                    if (subobject_description != null)
                    {
                        subobject_descriptionParameter.Value = subobject_description;
                    }
                    else
                    {
                        subobject_descriptionParameter.Size = -1;
                        subobject_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subobject_descriptionParameter);

                    DbParameter project_documentationParameter = cmd.CreateParameter();
                    project_documentationParameter.ParameterName = "project_documentation";
                    project_documentationParameter.Direction = ParameterDirection.Input;
                    project_documentationParameter.DbType = DbType.String;
                    if (project_documentation != null)
                    {
                        project_documentationParameter.Value = project_documentation;
                    }
                    else
                    {
                        project_documentationParameter.Size = -1;
                        project_documentationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_documentationParameter);

                    DbParameter project_documentation_date_descriptionParameter = cmd.CreateParameter();
                    project_documentation_date_descriptionParameter.ParameterName = "project_documentation_date_description";
                    project_documentation_date_descriptionParameter.Direction = ParameterDirection.Input;
                    project_documentation_date_descriptionParameter.DbType = DbType.String;
                    if (project_documentation_date_description != null)
                    {
                        project_documentation_date_descriptionParameter.Value = project_documentation_date_description;
                    }
                    else
                    {
                        project_documentation_date_descriptionParameter.Size = -1;
                        project_documentation_date_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_documentation_date_descriptionParameter);

                    DbParameter project_documentation_receive_date_descriptionParameter = cmd.CreateParameter();
                    project_documentation_receive_date_descriptionParameter.ParameterName = "project_documentation_receive_date_description";
                    project_documentation_receive_date_descriptionParameter.Direction = ParameterDirection.Input;
                    project_documentation_receive_date_descriptionParameter.DbType = DbType.String;
                    if (project_documentation_receive_date_description != null)
                    {
                        project_documentation_receive_date_descriptionParameter.Value = project_documentation_receive_date_description;
                    }
                    else
                    {
                        project_documentation_receive_date_descriptionParameter.Size = -1;
                        project_documentation_receive_date_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_documentation_receive_date_descriptionParameter);

                    DbParameter revision_number_descriptionParameter = cmd.CreateParameter();
                    revision_number_descriptionParameter.ParameterName = "revision_number_description";
                    revision_number_descriptionParameter.Direction = ParameterDirection.Input;
                    revision_number_descriptionParameter.DbType = DbType.String;
                    if (revision_number_description != null)
                    {
                        revision_number_descriptionParameter.Value = revision_number_description;
                    }
                    else
                    {
                        revision_number_descriptionParameter.Size = -1;
                        revision_number_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(revision_number_descriptionParameter);

                    DbParameter revision_number_date_descriptionParameter = cmd.CreateParameter();
                    revision_number_date_descriptionParameter.ParameterName = "revision_number_date_description";
                    revision_number_date_descriptionParameter.Direction = ParameterDirection.Input;
                    revision_number_date_descriptionParameter.DbType = DbType.String;
                    if (revision_number_date_description != null)
                    {
                        revision_number_date_descriptionParameter.Value = revision_number_date_description;
                    }
                    else
                    {
                        revision_number_date_descriptionParameter.Size = -1;
                        revision_number_date_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(revision_number_date_descriptionParameter);

                    DbParameter revision_number_receive_date_descriptionParameter = cmd.CreateParameter();
                    revision_number_receive_date_descriptionParameter.ParameterName = "revision_number_receive_date_description";
                    revision_number_receive_date_descriptionParameter.Direction = ParameterDirection.Input;
                    revision_number_receive_date_descriptionParameter.DbType = DbType.String;
                    if (revision_number_receive_date_description != null)
                    {
                        revision_number_receive_date_descriptionParameter.Value = revision_number_receive_date_description;
                    }
                    else
                    {
                        revision_number_receive_date_descriptionParameter.Size = -1;
                        revision_number_receive_date_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(revision_number_receive_date_descriptionParameter);

                    DbParameter start_descriptionParameter = cmd.CreateParameter();
                    start_descriptionParameter.ParameterName = "start_description";
                    start_descriptionParameter.Direction = ParameterDirection.Input;
                    start_descriptionParameter.DbType = DbType.String;
                    if (start_description != null)
                    {
                        start_descriptionParameter.Value = start_description;
                    }
                    else
                    {
                        start_descriptionParameter.Size = -1;
                        start_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(start_descriptionParameter);

                    DbParameter finish_descriptionParameter = cmd.CreateParameter();
                    finish_descriptionParameter.ParameterName = "finish_description";
                    finish_descriptionParameter.Direction = ParameterDirection.Input;
                    finish_descriptionParameter.DbType = DbType.String;
                    if (finish_description != null)
                    {
                        finish_descriptionParameter.Value = finish_description;
                    }
                    else
                    {
                        finish_descriptionParameter.Size = -1;
                        finish_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finish_descriptionParameter);

                    DbParameter station_descriptionParameter = cmd.CreateParameter();
                    station_descriptionParameter.ParameterName = "station_description";
                    station_descriptionParameter.Direction = ParameterDirection.Input;
                    station_descriptionParameter.DbType = DbType.String;
                    if (station_description != null)
                    {
                        station_descriptionParameter.Value = station_description;
                    }
                    else
                    {
                        station_descriptionParameter.Size = -1;
                        station_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(station_descriptionParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter additional_propertiesParameter = cmd.CreateParameter();
                    additional_propertiesParameter.ParameterName = "additional_properties";
                    additional_propertiesParameter.Direction = ParameterDirection.Input;
                    additional_propertiesParameter.DbType = DbType.String;
                    if (additional_properties != null)
                    {
                        additional_propertiesParameter.Value = additional_properties;
                    }
                    else
                    {
                        additional_propertiesParameter.Size = -1;
                        additional_propertiesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(additional_propertiesParameter);

                    DbParameter package_contentsParameter = cmd.CreateParameter();
                    package_contentsParameter.ParameterName = "package_contents";
                    package_contentsParameter.Direction = ParameterDirection.Input;
                    package_contentsParameter.DbType = DbType.String;
                    if (package_contents != null)
                    {
                        package_contentsParameter.Value = package_contents;
                    }
                    else
                    {
                        package_contentsParameter.Size = -1;
                        package_contentsParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(package_contentsParameter);

                    DbParameter unit_descriptionParameter = cmd.CreateParameter();
                    unit_descriptionParameter.ParameterName = "unit_description";
                    unit_descriptionParameter.Direction = ParameterDirection.Input;
                    unit_descriptionParameter.DbType = DbType.String;
                    if (unit_description != null)
                    {
                        unit_descriptionParameter.Value = unit_description;
                    }
                    else
                    {
                        unit_descriptionParameter.Size = -1;
                        unit_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(unit_descriptionParameter);

                    DbParameter quantity_descriptionParameter = cmd.CreateParameter();
                    quantity_descriptionParameter.ParameterName = "quantity_description";
                    quantity_descriptionParameter.Direction = ParameterDirection.Input;
                    quantity_descriptionParameter.DbType = DbType.String;
                    if (quantity_description != null)
                    {
                        quantity_descriptionParameter.Value = quantity_description;
                    }
                    else
                    {
                        quantity_descriptionParameter.Size = -1;
                        quantity_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(quantity_descriptionParameter);

                    DbParameter mass_per_unit_descriptionParameter = cmd.CreateParameter();
                    mass_per_unit_descriptionParameter.ParameterName = "mass_per_unit_description";
                    mass_per_unit_descriptionParameter.Direction = ParameterDirection.Input;
                    mass_per_unit_descriptionParameter.DbType = DbType.String;
                    if (mass_per_unit_description != null)
                    {
                        mass_per_unit_descriptionParameter.Value = mass_per_unit_description;
                    }
                    else
                    {
                        mass_per_unit_descriptionParameter.Size = -1;
                        mass_per_unit_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(mass_per_unit_descriptionParameter);

                    DbParameter mass_sizeParameter = cmd.CreateParameter();
                    mass_sizeParameter.ParameterName = "mass_size";
                    mass_sizeParameter.Direction = ParameterDirection.Input;
                    mass_sizeParameter.DbType = DbType.String;
                    if (mass_size != null)
                    {
                        mass_sizeParameter.Value = mass_size;
                    }
                    else
                    {
                        mass_sizeParameter.Size = -1;
                        mass_sizeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(mass_sizeParameter);

                    DbParameter manufacturer_descriptionParameter = cmd.CreateParameter();
                    manufacturer_descriptionParameter.ParameterName = "manufacturer_description";
                    manufacturer_descriptionParameter.Direction = ParameterDirection.Input;
                    manufacturer_descriptionParameter.DbType = DbType.String;
                    if (manufacturer_description != null)
                    {
                        manufacturer_descriptionParameter.Value = manufacturer_description;
                    }
                    else
                    {
                        manufacturer_descriptionParameter.Size = -1;
                        manufacturer_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(manufacturer_descriptionParameter);

                    DbParameter delivery_type_descriptionParameter = cmd.CreateParameter();
                    delivery_type_descriptionParameter.ParameterName = "delivery_type_description";
                    delivery_type_descriptionParameter.Direction = ParameterDirection.Input;
                    delivery_type_descriptionParameter.DbType = DbType.String;
                    if (delivery_type_description != null)
                    {
                        delivery_type_descriptionParameter.Value = delivery_type_description;
                    }
                    else
                    {
                        delivery_type_descriptionParameter.Size = -1;
                        delivery_type_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_descriptionParameter);

                    DbParameter goods_type_descriptionParameter = cmd.CreateParameter();
                    goods_type_descriptionParameter.ParameterName = "goods_type_description";
                    goods_type_descriptionParameter.Direction = ParameterDirection.Input;
                    goods_type_descriptionParameter.DbType = DbType.String;
                    if (goods_type_description != null)
                    {
                        goods_type_descriptionParameter.Value = goods_type_description;
                    }
                    else
                    {
                        goods_type_descriptionParameter.Size = -1;
                        goods_type_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(goods_type_descriptionParameter);

                    DbParameter summaryParameter = cmd.CreateParameter();
                    summaryParameter.ParameterName = "summary";
                    summaryParameter.Direction = ParameterDirection.Input;
                    summaryParameter.DbType = DbType.String;
                    if (summary != null)
                    {
                        summaryParameter.Value = summary;
                    }
                    else
                    {
                        summaryParameter.Size = -1;
                        summaryParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(summaryParameter);

                    DbParameter summary2Parameter = cmd.CreateParameter();
                    summary2Parameter.ParameterName = "summary2";
                    summary2Parameter.Direction = ParameterDirection.Input;
                    summary2Parameter.DbType = DbType.String;
                    if (summary2 != null)
                    {
                        summary2Parameter.Value = summary2;
                    }
                    else
                    {
                        summary2Parameter.Size = -1;
                        summary2Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(summary2Parameter);

                    DbParameter state_descriptionParameter = cmd.CreateParameter();
                    state_descriptionParameter.ParameterName = "state_description";
                    state_descriptionParameter.Direction = ParameterDirection.Input;
                    state_descriptionParameter.DbType = DbType.String;
                    if (state_description != null)
                    {
                        state_descriptionParameter.Value = state_description;
                    }
                    else
                    {
                        state_descriptionParameter.Size = -1;
                        state_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(state_descriptionParameter);

                    DbParameter package_descriptionParameter = cmd.CreateParameter();
                    package_descriptionParameter.ParameterName = "package_description";
                    package_descriptionParameter.Direction = ParameterDirection.Input;
                    package_descriptionParameter.DbType = DbType.String;
                    if (package_description != null)
                    {
                        package_descriptionParameter.Value = package_description;
                    }
                    else
                    {
                        package_descriptionParameter.Size = -1;
                        package_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(package_descriptionParameter);

                    DbParameter in_kd_descriptionParameter = cmd.CreateParameter();
                    in_kd_descriptionParameter.ParameterName = "in_kd_description";
                    in_kd_descriptionParameter.Direction = ParameterDirection.Input;
                    in_kd_descriptionParameter.DbType = DbType.String;
                    if (in_kd_description != null)
                    {
                        in_kd_descriptionParameter.Value = in_kd_description;
                    }
                    else
                    {
                        in_kd_descriptionParameter.Size = -1;
                        in_kd_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(in_kd_descriptionParameter);

                    DbParameter psd_state_descriptionParameter = cmd.CreateParameter();
                    psd_state_descriptionParameter.ParameterName = "psd_state_description";
                    psd_state_descriptionParameter.Direction = ParameterDirection.Input;
                    psd_state_descriptionParameter.DbType = DbType.String;
                    if (psd_state_description != null)
                    {
                        psd_state_descriptionParameter.Value = psd_state_description;
                    }
                    else
                    {
                        psd_state_descriptionParameter.Size = -1;
                        psd_state_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(psd_state_descriptionParameter);

                    DbParameter pr_source_descriptionParameter = cmd.CreateParameter();
                    pr_source_descriptionParameter.ParameterName = "pr_source_description";
                    pr_source_descriptionParameter.Direction = ParameterDirection.Input;
                    pr_source_descriptionParameter.DbType = DbType.String;
                    if (pr_source_description != null)
                    {
                        pr_source_descriptionParameter.Value = pr_source_description;
                    }
                    else
                    {
                        pr_source_descriptionParameter.Size = -1;
                        pr_source_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(pr_source_descriptionParameter);

                    DbParameter subcontractor_descriptionParameter = cmd.CreateParameter();
                    subcontractor_descriptionParameter.ParameterName = "subcontractor_description";
                    subcontractor_descriptionParameter.Direction = ParameterDirection.Input;
                    subcontractor_descriptionParameter.DbType = DbType.String;
                    if (subcontractor_description != null)
                    {
                        subcontractor_descriptionParameter.Value = subcontractor_description;
                    }
                    else
                    {
                        subcontractor_descriptionParameter.Size = -1;
                        subcontractor_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subcontractor_descriptionParameter);

                    DbParameter dks_customer_letter_infoParameter = cmd.CreateParameter();
                    dks_customer_letter_infoParameter.ParameterName = "dks_customer_letter_info";
                    dks_customer_letter_infoParameter.Direction = ParameterDirection.Input;
                    dks_customer_letter_infoParameter.DbType = DbType.String;
                    if (dks_customer_letter_info != null)
                    {
                        dks_customer_letter_infoParameter.Value = dks_customer_letter_info;
                    }
                    else
                    {
                        dks_customer_letter_infoParameter.Size = -1;
                        dks_customer_letter_infoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(dks_customer_letter_infoParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_INSERT_PROJECT_REQUIREMENT_LOADING_ITEMResult row = new APL_INSERT_PROJECT_REQUIREMENT_LOADING_ITEMResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.column0 = (decimal)Convert.ChangeType(reader.GetValue(0), typeof(decimal));
                            else
                            if (fieldNames.Contains("column0") && !reader.IsDBNull(reader.GetOrdinal("column0")))
                                row.column0 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"column0")), typeof(decimal));
                            else
                                row.column0 = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_INSERT_PROJECT_REQUIREMENT_LOADING_ITEMResult>> APL_INSERT_PROJECT_REQUIREMENT_LOADING_ITEMAsync (System.Nullable<int> loading_id, System.Nullable<int> project_id, string code, string object_description, string subobject_description, string project_documentation, string project_documentation_date_description, string project_documentation_receive_date_description, string revision_number_description, string revision_number_date_description, string revision_number_receive_date_description, string start_description, string finish_description, string station_description, string description, string additional_properties, string package_contents, string unit_description, string quantity_description, string mass_per_unit_description, string mass_size, string manufacturer_description, string delivery_type_description, string goods_type_description, string summary, string summary2, string state_description, string package_description, string in_kd_description, string psd_state_description, string pr_source_description, string subcontractor_description, string dks_customer_letter_info, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<APL_INSERT_PROJECT_REQUIREMENT_LOADING_ITEMResult> result = new List<APL_INSERT_PROJECT_REQUIREMENT_LOADING_ITEMResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_INSERT_PROJECT_REQUIREMENT_LOADING_ITEM";

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);

                    DbParameter codeParameter = cmd.CreateParameter();
                    codeParameter.ParameterName = "code";
                    codeParameter.Direction = ParameterDirection.Input;
                    codeParameter.DbType = DbType.String;
                    if (code != null)
                    {
                        codeParameter.Value = code;
                    }
                    else
                    {
                        codeParameter.Size = -1;
                        codeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(codeParameter);

                    DbParameter object_descriptionParameter = cmd.CreateParameter();
                    object_descriptionParameter.ParameterName = "object_description";
                    object_descriptionParameter.Direction = ParameterDirection.Input;
                    object_descriptionParameter.DbType = DbType.String;
                    if (object_description != null)
                    {
                        object_descriptionParameter.Value = object_description;
                    }
                    else
                    {
                        object_descriptionParameter.Size = -1;
                        object_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(object_descriptionParameter);

                    DbParameter subobject_descriptionParameter = cmd.CreateParameter();
                    subobject_descriptionParameter.ParameterName = "subobject_description";
                    subobject_descriptionParameter.Direction = ParameterDirection.Input;
                    subobject_descriptionParameter.DbType = DbType.String;
                    if (subobject_description != null)
                    {
                        subobject_descriptionParameter.Value = subobject_description;
                    }
                    else
                    {
                        subobject_descriptionParameter.Size = -1;
                        subobject_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subobject_descriptionParameter);

                    DbParameter project_documentationParameter = cmd.CreateParameter();
                    project_documentationParameter.ParameterName = "project_documentation";
                    project_documentationParameter.Direction = ParameterDirection.Input;
                    project_documentationParameter.DbType = DbType.String;
                    if (project_documentation != null)
                    {
                        project_documentationParameter.Value = project_documentation;
                    }
                    else
                    {
                        project_documentationParameter.Size = -1;
                        project_documentationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_documentationParameter);

                    DbParameter project_documentation_date_descriptionParameter = cmd.CreateParameter();
                    project_documentation_date_descriptionParameter.ParameterName = "project_documentation_date_description";
                    project_documentation_date_descriptionParameter.Direction = ParameterDirection.Input;
                    project_documentation_date_descriptionParameter.DbType = DbType.String;
                    if (project_documentation_date_description != null)
                    {
                        project_documentation_date_descriptionParameter.Value = project_documentation_date_description;
                    }
                    else
                    {
                        project_documentation_date_descriptionParameter.Size = -1;
                        project_documentation_date_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_documentation_date_descriptionParameter);

                    DbParameter project_documentation_receive_date_descriptionParameter = cmd.CreateParameter();
                    project_documentation_receive_date_descriptionParameter.ParameterName = "project_documentation_receive_date_description";
                    project_documentation_receive_date_descriptionParameter.Direction = ParameterDirection.Input;
                    project_documentation_receive_date_descriptionParameter.DbType = DbType.String;
                    if (project_documentation_receive_date_description != null)
                    {
                        project_documentation_receive_date_descriptionParameter.Value = project_documentation_receive_date_description;
                    }
                    else
                    {
                        project_documentation_receive_date_descriptionParameter.Size = -1;
                        project_documentation_receive_date_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_documentation_receive_date_descriptionParameter);

                    DbParameter revision_number_descriptionParameter = cmd.CreateParameter();
                    revision_number_descriptionParameter.ParameterName = "revision_number_description";
                    revision_number_descriptionParameter.Direction = ParameterDirection.Input;
                    revision_number_descriptionParameter.DbType = DbType.String;
                    if (revision_number_description != null)
                    {
                        revision_number_descriptionParameter.Value = revision_number_description;
                    }
                    else
                    {
                        revision_number_descriptionParameter.Size = -1;
                        revision_number_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(revision_number_descriptionParameter);

                    DbParameter revision_number_date_descriptionParameter = cmd.CreateParameter();
                    revision_number_date_descriptionParameter.ParameterName = "revision_number_date_description";
                    revision_number_date_descriptionParameter.Direction = ParameterDirection.Input;
                    revision_number_date_descriptionParameter.DbType = DbType.String;
                    if (revision_number_date_description != null)
                    {
                        revision_number_date_descriptionParameter.Value = revision_number_date_description;
                    }
                    else
                    {
                        revision_number_date_descriptionParameter.Size = -1;
                        revision_number_date_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(revision_number_date_descriptionParameter);

                    DbParameter revision_number_receive_date_descriptionParameter = cmd.CreateParameter();
                    revision_number_receive_date_descriptionParameter.ParameterName = "revision_number_receive_date_description";
                    revision_number_receive_date_descriptionParameter.Direction = ParameterDirection.Input;
                    revision_number_receive_date_descriptionParameter.DbType = DbType.String;
                    if (revision_number_receive_date_description != null)
                    {
                        revision_number_receive_date_descriptionParameter.Value = revision_number_receive_date_description;
                    }
                    else
                    {
                        revision_number_receive_date_descriptionParameter.Size = -1;
                        revision_number_receive_date_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(revision_number_receive_date_descriptionParameter);

                    DbParameter start_descriptionParameter = cmd.CreateParameter();
                    start_descriptionParameter.ParameterName = "start_description";
                    start_descriptionParameter.Direction = ParameterDirection.Input;
                    start_descriptionParameter.DbType = DbType.String;
                    if (start_description != null)
                    {
                        start_descriptionParameter.Value = start_description;
                    }
                    else
                    {
                        start_descriptionParameter.Size = -1;
                        start_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(start_descriptionParameter);

                    DbParameter finish_descriptionParameter = cmd.CreateParameter();
                    finish_descriptionParameter.ParameterName = "finish_description";
                    finish_descriptionParameter.Direction = ParameterDirection.Input;
                    finish_descriptionParameter.DbType = DbType.String;
                    if (finish_description != null)
                    {
                        finish_descriptionParameter.Value = finish_description;
                    }
                    else
                    {
                        finish_descriptionParameter.Size = -1;
                        finish_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(finish_descriptionParameter);

                    DbParameter station_descriptionParameter = cmd.CreateParameter();
                    station_descriptionParameter.ParameterName = "station_description";
                    station_descriptionParameter.Direction = ParameterDirection.Input;
                    station_descriptionParameter.DbType = DbType.String;
                    if (station_description != null)
                    {
                        station_descriptionParameter.Value = station_description;
                    }
                    else
                    {
                        station_descriptionParameter.Size = -1;
                        station_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(station_descriptionParameter);

                    DbParameter descriptionParameter = cmd.CreateParameter();
                    descriptionParameter.ParameterName = "description";
                    descriptionParameter.Direction = ParameterDirection.Input;
                    descriptionParameter.DbType = DbType.String;
                    if (description != null)
                    {
                        descriptionParameter.Value = description;
                    }
                    else
                    {
                        descriptionParameter.Size = -1;
                        descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(descriptionParameter);

                    DbParameter additional_propertiesParameter = cmd.CreateParameter();
                    additional_propertiesParameter.ParameterName = "additional_properties";
                    additional_propertiesParameter.Direction = ParameterDirection.Input;
                    additional_propertiesParameter.DbType = DbType.String;
                    if (additional_properties != null)
                    {
                        additional_propertiesParameter.Value = additional_properties;
                    }
                    else
                    {
                        additional_propertiesParameter.Size = -1;
                        additional_propertiesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(additional_propertiesParameter);

                    DbParameter package_contentsParameter = cmd.CreateParameter();
                    package_contentsParameter.ParameterName = "package_contents";
                    package_contentsParameter.Direction = ParameterDirection.Input;
                    package_contentsParameter.DbType = DbType.String;
                    if (package_contents != null)
                    {
                        package_contentsParameter.Value = package_contents;
                    }
                    else
                    {
                        package_contentsParameter.Size = -1;
                        package_contentsParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(package_contentsParameter);

                    DbParameter unit_descriptionParameter = cmd.CreateParameter();
                    unit_descriptionParameter.ParameterName = "unit_description";
                    unit_descriptionParameter.Direction = ParameterDirection.Input;
                    unit_descriptionParameter.DbType = DbType.String;
                    if (unit_description != null)
                    {
                        unit_descriptionParameter.Value = unit_description;
                    }
                    else
                    {
                        unit_descriptionParameter.Size = -1;
                        unit_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(unit_descriptionParameter);

                    DbParameter quantity_descriptionParameter = cmd.CreateParameter();
                    quantity_descriptionParameter.ParameterName = "quantity_description";
                    quantity_descriptionParameter.Direction = ParameterDirection.Input;
                    quantity_descriptionParameter.DbType = DbType.String;
                    if (quantity_description != null)
                    {
                        quantity_descriptionParameter.Value = quantity_description;
                    }
                    else
                    {
                        quantity_descriptionParameter.Size = -1;
                        quantity_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(quantity_descriptionParameter);

                    DbParameter mass_per_unit_descriptionParameter = cmd.CreateParameter();
                    mass_per_unit_descriptionParameter.ParameterName = "mass_per_unit_description";
                    mass_per_unit_descriptionParameter.Direction = ParameterDirection.Input;
                    mass_per_unit_descriptionParameter.DbType = DbType.String;
                    if (mass_per_unit_description != null)
                    {
                        mass_per_unit_descriptionParameter.Value = mass_per_unit_description;
                    }
                    else
                    {
                        mass_per_unit_descriptionParameter.Size = -1;
                        mass_per_unit_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(mass_per_unit_descriptionParameter);

                    DbParameter mass_sizeParameter = cmd.CreateParameter();
                    mass_sizeParameter.ParameterName = "mass_size";
                    mass_sizeParameter.Direction = ParameterDirection.Input;
                    mass_sizeParameter.DbType = DbType.String;
                    if (mass_size != null)
                    {
                        mass_sizeParameter.Value = mass_size;
                    }
                    else
                    {
                        mass_sizeParameter.Size = -1;
                        mass_sizeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(mass_sizeParameter);

                    DbParameter manufacturer_descriptionParameter = cmd.CreateParameter();
                    manufacturer_descriptionParameter.ParameterName = "manufacturer_description";
                    manufacturer_descriptionParameter.Direction = ParameterDirection.Input;
                    manufacturer_descriptionParameter.DbType = DbType.String;
                    if (manufacturer_description != null)
                    {
                        manufacturer_descriptionParameter.Value = manufacturer_description;
                    }
                    else
                    {
                        manufacturer_descriptionParameter.Size = -1;
                        manufacturer_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(manufacturer_descriptionParameter);

                    DbParameter delivery_type_descriptionParameter = cmd.CreateParameter();
                    delivery_type_descriptionParameter.ParameterName = "delivery_type_description";
                    delivery_type_descriptionParameter.Direction = ParameterDirection.Input;
                    delivery_type_descriptionParameter.DbType = DbType.String;
                    if (delivery_type_description != null)
                    {
                        delivery_type_descriptionParameter.Value = delivery_type_description;
                    }
                    else
                    {
                        delivery_type_descriptionParameter.Size = -1;
                        delivery_type_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(delivery_type_descriptionParameter);

                    DbParameter goods_type_descriptionParameter = cmd.CreateParameter();
                    goods_type_descriptionParameter.ParameterName = "goods_type_description";
                    goods_type_descriptionParameter.Direction = ParameterDirection.Input;
                    goods_type_descriptionParameter.DbType = DbType.String;
                    if (goods_type_description != null)
                    {
                        goods_type_descriptionParameter.Value = goods_type_description;
                    }
                    else
                    {
                        goods_type_descriptionParameter.Size = -1;
                        goods_type_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(goods_type_descriptionParameter);

                    DbParameter summaryParameter = cmd.CreateParameter();
                    summaryParameter.ParameterName = "summary";
                    summaryParameter.Direction = ParameterDirection.Input;
                    summaryParameter.DbType = DbType.String;
                    if (summary != null)
                    {
                        summaryParameter.Value = summary;
                    }
                    else
                    {
                        summaryParameter.Size = -1;
                        summaryParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(summaryParameter);

                    DbParameter summary2Parameter = cmd.CreateParameter();
                    summary2Parameter.ParameterName = "summary2";
                    summary2Parameter.Direction = ParameterDirection.Input;
                    summary2Parameter.DbType = DbType.String;
                    if (summary2 != null)
                    {
                        summary2Parameter.Value = summary2;
                    }
                    else
                    {
                        summary2Parameter.Size = -1;
                        summary2Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(summary2Parameter);

                    DbParameter state_descriptionParameter = cmd.CreateParameter();
                    state_descriptionParameter.ParameterName = "state_description";
                    state_descriptionParameter.Direction = ParameterDirection.Input;
                    state_descriptionParameter.DbType = DbType.String;
                    if (state_description != null)
                    {
                        state_descriptionParameter.Value = state_description;
                    }
                    else
                    {
                        state_descriptionParameter.Size = -1;
                        state_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(state_descriptionParameter);

                    DbParameter package_descriptionParameter = cmd.CreateParameter();
                    package_descriptionParameter.ParameterName = "package_description";
                    package_descriptionParameter.Direction = ParameterDirection.Input;
                    package_descriptionParameter.DbType = DbType.String;
                    if (package_description != null)
                    {
                        package_descriptionParameter.Value = package_description;
                    }
                    else
                    {
                        package_descriptionParameter.Size = -1;
                        package_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(package_descriptionParameter);

                    DbParameter in_kd_descriptionParameter = cmd.CreateParameter();
                    in_kd_descriptionParameter.ParameterName = "in_kd_description";
                    in_kd_descriptionParameter.Direction = ParameterDirection.Input;
                    in_kd_descriptionParameter.DbType = DbType.String;
                    if (in_kd_description != null)
                    {
                        in_kd_descriptionParameter.Value = in_kd_description;
                    }
                    else
                    {
                        in_kd_descriptionParameter.Size = -1;
                        in_kd_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(in_kd_descriptionParameter);

                    DbParameter psd_state_descriptionParameter = cmd.CreateParameter();
                    psd_state_descriptionParameter.ParameterName = "psd_state_description";
                    psd_state_descriptionParameter.Direction = ParameterDirection.Input;
                    psd_state_descriptionParameter.DbType = DbType.String;
                    if (psd_state_description != null)
                    {
                        psd_state_descriptionParameter.Value = psd_state_description;
                    }
                    else
                    {
                        psd_state_descriptionParameter.Size = -1;
                        psd_state_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(psd_state_descriptionParameter);

                    DbParameter pr_source_descriptionParameter = cmd.CreateParameter();
                    pr_source_descriptionParameter.ParameterName = "pr_source_description";
                    pr_source_descriptionParameter.Direction = ParameterDirection.Input;
                    pr_source_descriptionParameter.DbType = DbType.String;
                    if (pr_source_description != null)
                    {
                        pr_source_descriptionParameter.Value = pr_source_description;
                    }
                    else
                    {
                        pr_source_descriptionParameter.Size = -1;
                        pr_source_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(pr_source_descriptionParameter);

                    DbParameter subcontractor_descriptionParameter = cmd.CreateParameter();
                    subcontractor_descriptionParameter.ParameterName = "subcontractor_description";
                    subcontractor_descriptionParameter.Direction = ParameterDirection.Input;
                    subcontractor_descriptionParameter.DbType = DbType.String;
                    if (subcontractor_description != null)
                    {
                        subcontractor_descriptionParameter.Value = subcontractor_description;
                    }
                    else
                    {
                        subcontractor_descriptionParameter.Size = -1;
                        subcontractor_descriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(subcontractor_descriptionParameter);

                    DbParameter dks_customer_letter_infoParameter = cmd.CreateParameter();
                    dks_customer_letter_infoParameter.ParameterName = "dks_customer_letter_info";
                    dks_customer_letter_infoParameter.Direction = ParameterDirection.Input;
                    dks_customer_letter_infoParameter.DbType = DbType.String;
                    if (dks_customer_letter_info != null)
                    {
                        dks_customer_letter_infoParameter.Value = dks_customer_letter_info;
                    }
                    else
                    {
                        dks_customer_letter_infoParameter.Size = -1;
                        dks_customer_letter_infoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(dks_customer_letter_infoParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_INSERT_PROJECT_REQUIREMENT_LOADING_ITEMResult row = new APL_INSERT_PROJECT_REQUIREMENT_LOADING_ITEMResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.column0 = (decimal)Convert.ChangeType(reader.GetValue(0), typeof(decimal));
                            else
                            if (fieldNames.Contains("column0") && !reader.IsDBNull(reader.GetOrdinal("column0")))
                                row.column0 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"column0")), typeof(decimal));
                            else
                                row.column0 = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECT_REQUIREMENT_LOADING_ITEMS2Result> APL_SELECT_PROJECT_REQUIREMENT_LOADING_ITEMS2 (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> loading_id)
        {

            List<APL_SELECT_PROJECT_REQUIREMENT_LOADING_ITEMS2Result> result = new List<APL_SELECT_PROJECT_REQUIREMENT_LOADING_ITEMS2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_REQUIREMENT_LOADING_ITEMS2";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_REQUIREMENT_LOADING_ITEMS2Result row = new APL_SELECT_PROJECT_REQUIREMENT_LOADING_ITEMS2Result();
                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("project_documentation") && !reader.IsDBNull(reader.GetOrdinal("project_documentation")))
                                row.project_documentation = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation")), typeof(string));
                            else
                                row.project_documentation = null;

                            if (fieldNames.Contains("project_documentation_date_description") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_date_description")))
                                row.project_documentation_date_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_date_description")), typeof(string));
                            else
                                row.project_documentation_date_description = null;

                            if (fieldNames.Contains("project_documentation_receive_date_description") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_receive_date_description")))
                                row.project_documentation_receive_date_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_receive_date_description")), typeof(string));
                            else
                                row.project_documentation_receive_date_description = null;

                            if (fieldNames.Contains("revision_number_description") && !reader.IsDBNull(reader.GetOrdinal("revision_number_description")))
                                row.revision_number_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_number_description")), typeof(string));
                            else
                                row.revision_number_description = null;

                            if (fieldNames.Contains("revision_number_date_description") && !reader.IsDBNull(reader.GetOrdinal("revision_number_date_description")))
                                row.revision_number_date_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_number_date_description")), typeof(string));
                            else
                                row.revision_number_date_description = null;

                            if (fieldNames.Contains("revision_number_receive_date_description") && !reader.IsDBNull(reader.GetOrdinal("revision_number_receive_date_description")))
                                row.revision_number_receive_date_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_number_receive_date_description")), typeof(string));
                            else
                                row.revision_number_receive_date_description = null;

                            if (fieldNames.Contains("start_description") && !reader.IsDBNull(reader.GetOrdinal("start_description")))
                                row.start_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start_description")), typeof(string));
                            else
                                row.start_description = null;

                            if (fieldNames.Contains("finish_description") && !reader.IsDBNull(reader.GetOrdinal("finish_description")))
                                row.finish_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish_description")), typeof(string));
                            else
                                row.finish_description = null;

                            if (fieldNames.Contains("station_description") && !reader.IsDBNull(reader.GetOrdinal("station_description")))
                                row.station_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"station_description")), typeof(string));
                            else
                                row.station_description = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("additional_properties") && !reader.IsDBNull(reader.GetOrdinal("additional_properties")))
                                row.additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_properties")), typeof(string));
                            else
                                row.additional_properties = null;

                            if (fieldNames.Contains("package_contents") && !reader.IsDBNull(reader.GetOrdinal("package_contents")))
                                row.package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_contents")), typeof(string));
                            else
                                row.package_contents = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity_description") && !reader.IsDBNull(reader.GetOrdinal("quantity_description")))
                                row.quantity_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity_description")), typeof(string));
                            else
                                row.quantity_description = null;

                            if (fieldNames.Contains("mass_per_unit_description") && !reader.IsDBNull(reader.GetOrdinal("mass_per_unit_description")))
                                row.mass_per_unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_per_unit_description")), typeof(string));
                            else
                                row.mass_per_unit_description = null;

                            if (fieldNames.Contains("mass_size") && !reader.IsDBNull(reader.GetOrdinal("mass_size")))
                                row.mass_size = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_size")), typeof(string));
                            else
                                row.mass_size = null;

                            if (fieldNames.Contains("manufacturer_description") && !reader.IsDBNull(reader.GetOrdinal("manufacturer_description")))
                                row.manufacturer_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"manufacturer_description")), typeof(string));
                            else
                                row.manufacturer_description = null;

                            if (fieldNames.Contains("delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_description")))
                                row.delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_description")), typeof(string));
                            else
                                row.delivery_type_description = null;

                            if (fieldNames.Contains("goods_type_description") && !reader.IsDBNull(reader.GetOrdinal("goods_type_description")))
                                row.goods_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"goods_type_description")), typeof(string));
                            else
                                row.goods_type_description = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("summary2") && !reader.IsDBNull(reader.GetOrdinal("summary2")))
                                row.summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary2")), typeof(string));
                            else
                                row.summary2 = null;

                            if (fieldNames.Contains("state_description") && !reader.IsDBNull(reader.GetOrdinal("state_description")))
                                row.state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"state_description")), typeof(string));
                            else
                                row.state_description = null;

                            if (fieldNames.Contains("package_description") && !reader.IsDBNull(reader.GetOrdinal("package_description")))
                                row.package_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_description")), typeof(string));
                            else
                                row.package_description = null;

                            if (fieldNames.Contains("in_kd_description") && !reader.IsDBNull(reader.GetOrdinal("in_kd_description")))
                                row.in_kd_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"in_kd_description")), typeof(string));
                            else
                                row.in_kd_description = null;

                            if (fieldNames.Contains("psd_state_description") && !reader.IsDBNull(reader.GetOrdinal("psd_state_description")))
                                row.psd_state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"psd_state_description")), typeof(string));
                            else
                                row.psd_state_description = null;

                            if (fieldNames.Contains("pr_source_description") && !reader.IsDBNull(reader.GetOrdinal("pr_source_description")))
                                row.pr_source_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"pr_source_description")), typeof(string));
                            else
                                row.pr_source_description = null;

                            if (fieldNames.Contains("subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_description")))
                                row.subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_description")), typeof(string));
                            else
                                row.subcontractor_description = null;

                            if (fieldNames.Contains("dks_customer_letter_info") && !reader.IsDBNull(reader.GetOrdinal("dks_customer_letter_info")))
                                row.dks_customer_letter_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dks_customer_letter_info")), typeof(string));

                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            if (fieldNames.Contains("warning_description") && !reader.IsDBNull(reader.GetOrdinal("warning_description")))
                                row.warning_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warning_description")), typeof(string));
                            else
                                row.warning_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_REQUIREMENT_LOADING_ITEMS2Result>> APL_SELECT_PROJECT_REQUIREMENT_LOADING_ITEMS2Async (System.Nullable<int> user_id, System.Nullable<int> real_user_id, System.Nullable<int> event_id, System.Nullable<int> loading_id)
        {

            List<APL_SELECT_PROJECT_REQUIREMENT_LOADING_ITEMS2Result> result = new List<APL_SELECT_PROJECT_REQUIREMENT_LOADING_ITEMS2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_REQUIREMENT_LOADING_ITEMS2";

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter loading_idParameter = cmd.CreateParameter();
                    loading_idParameter.ParameterName = "loading_id";
                    loading_idParameter.Direction = ParameterDirection.Input;
                    loading_idParameter.DbType = DbType.Int32;
                    loading_idParameter.Precision = 10;
                    loading_idParameter.Scale = 0;
                    if (loading_id.HasValue)
                    {
                        loading_idParameter.Value = loading_id.Value;
                    }
                    else
                    {
                        loading_idParameter.Size = -1;
                        loading_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(loading_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_REQUIREMENT_LOADING_ITEMS2Result row = new APL_SELECT_PROJECT_REQUIREMENT_LOADING_ITEMS2Result();
                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("project_documentation") && !reader.IsDBNull(reader.GetOrdinal("project_documentation")))
                                row.project_documentation = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation")), typeof(string));
                            else
                                row.project_documentation = null;

                            if (fieldNames.Contains("project_documentation_date_description") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_date_description")))
                                row.project_documentation_date_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_date_description")), typeof(string));
                            else
                                row.project_documentation_date_description = null;

                            if (fieldNames.Contains("project_documentation_receive_date_description") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_receive_date_description")))
                                row.project_documentation_receive_date_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_receive_date_description")), typeof(string));
                            else
                                row.project_documentation_receive_date_description = null;

                            if (fieldNames.Contains("revision_number_description") && !reader.IsDBNull(reader.GetOrdinal("revision_number_description")))
                                row.revision_number_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_number_description")), typeof(string));
                            else
                                row.revision_number_description = null;

                            if (fieldNames.Contains("revision_number_date_description") && !reader.IsDBNull(reader.GetOrdinal("revision_number_date_description")))
                                row.revision_number_date_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_number_date_description")), typeof(string));
                            else
                                row.revision_number_date_description = null;

                            if (fieldNames.Contains("revision_number_receive_date_description") && !reader.IsDBNull(reader.GetOrdinal("revision_number_receive_date_description")))
                                row.revision_number_receive_date_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_number_receive_date_description")), typeof(string));
                            else
                                row.revision_number_receive_date_description = null;

                            if (fieldNames.Contains("start_description") && !reader.IsDBNull(reader.GetOrdinal("start_description")))
                                row.start_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start_description")), typeof(string));
                            else
                                row.start_description = null;

                            if (fieldNames.Contains("finish_description") && !reader.IsDBNull(reader.GetOrdinal("finish_description")))
                                row.finish_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish_description")), typeof(string));
                            else
                                row.finish_description = null;

                            if (fieldNames.Contains("station_description") && !reader.IsDBNull(reader.GetOrdinal("station_description")))
                                row.station_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"station_description")), typeof(string));
                            else
                                row.station_description = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("additional_properties") && !reader.IsDBNull(reader.GetOrdinal("additional_properties")))
                                row.additional_properties = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_properties")), typeof(string));
                            else
                                row.additional_properties = null;

                            if (fieldNames.Contains("package_contents") && !reader.IsDBNull(reader.GetOrdinal("package_contents")))
                                row.package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_contents")), typeof(string));
                            else
                                row.package_contents = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity_description") && !reader.IsDBNull(reader.GetOrdinal("quantity_description")))
                                row.quantity_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity_description")), typeof(string));
                            else
                                row.quantity_description = null;

                            if (fieldNames.Contains("mass_per_unit_description") && !reader.IsDBNull(reader.GetOrdinal("mass_per_unit_description")))
                                row.mass_per_unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_per_unit_description")), typeof(string));
                            else
                                row.mass_per_unit_description = null;

                            if (fieldNames.Contains("mass_size") && !reader.IsDBNull(reader.GetOrdinal("mass_size")))
                                row.mass_size = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_size")), typeof(string));
                            else
                                row.mass_size = null;

                            if (fieldNames.Contains("manufacturer_description") && !reader.IsDBNull(reader.GetOrdinal("manufacturer_description")))
                                row.manufacturer_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"manufacturer_description")), typeof(string));
                            else
                                row.manufacturer_description = null;

                            if (fieldNames.Contains("delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_description")))
                                row.delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_description")), typeof(string));
                            else
                                row.delivery_type_description = null;

                            if (fieldNames.Contains("goods_type_description") && !reader.IsDBNull(reader.GetOrdinal("goods_type_description")))
                                row.goods_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"goods_type_description")), typeof(string));
                            else
                                row.goods_type_description = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("summary2") && !reader.IsDBNull(reader.GetOrdinal("summary2")))
                                row.summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary2")), typeof(string));
                            else
                                row.summary2 = null;

                            if (fieldNames.Contains("state_description") && !reader.IsDBNull(reader.GetOrdinal("state_description")))
                                row.state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"state_description")), typeof(string));
                            else
                                row.state_description = null;

                            if (fieldNames.Contains("package_description") && !reader.IsDBNull(reader.GetOrdinal("package_description")))
                                row.package_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_description")), typeof(string));
                            else
                                row.package_description = null;

                            if (fieldNames.Contains("in_kd_description") && !reader.IsDBNull(reader.GetOrdinal("in_kd_description")))
                                row.in_kd_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"in_kd_description")), typeof(string));
                            else
                                row.in_kd_description = null;

                            if (fieldNames.Contains("psd_state_description") && !reader.IsDBNull(reader.GetOrdinal("psd_state_description")))
                                row.psd_state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"psd_state_description")), typeof(string));
                            else
                                row.psd_state_description = null;

                            if (fieldNames.Contains("pr_source_description") && !reader.IsDBNull(reader.GetOrdinal("pr_source_description")))
                                row.pr_source_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"pr_source_description")), typeof(string));
                            else
                                row.pr_source_description = null;

                            if (fieldNames.Contains("subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_description")))
                                row.subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_description")), typeof(string));
                            else
                                row.subcontractor_description = null;

                            if (fieldNames.Contains("dks_customer_letter_info") && !reader.IsDBNull(reader.GetOrdinal("dks_customer_letter_info")))
                                row.dks_customer_letter_info = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dks_customer_letter_info")), typeof(string));

                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            if (fieldNames.Contains("warning_description") && !reader.IsDBNull(reader.GetOrdinal("warning_description")))
                                row.warning_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warning_description")), typeof(string));
                            else
                                row.warning_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_SELECT_PROJECT_REQUIREMENTS_FOR_CHANGEResult> APL_SELECT_PROJECT_REQUIREMENTS_FOR_CHANGE (System.Nullable<int> event_id, string id_list, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<APL_SELECT_PROJECT_REQUIREMENTS_FOR_CHANGEResult> result = new List<APL_SELECT_PROJECT_REQUIREMENTS_FOR_CHANGEResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_REQUIREMENTS_FOR_CHANGE";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter id_listParameter = cmd.CreateParameter();
                    id_listParameter.ParameterName = "id_list";
                    id_listParameter.Direction = ParameterDirection.Input;
                    id_listParameter.DbType = DbType.String;
                    if (id_list != null)
                    {
                        id_listParameter.Value = id_list;
                    }
                    else
                    {
                        id_listParameter.Size = -1;
                        id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(id_listParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_REQUIREMENTS_FOR_CHANGEResult row = new APL_SELECT_PROJECT_REQUIREMENTS_FOR_CHANGEResult();
                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("project_documentation") && !reader.IsDBNull(reader.GetOrdinal("project_documentation")))
                                row.project_documentation = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation")), typeof(string));
                            else
                                row.project_documentation = null;

                            if (fieldNames.Contains("project_documentation_date_description") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_date_description")))
                                row.project_documentation_date_description = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_date_description")), typeof(System.DateTime));
                            else
                                row.project_documentation_date_description = null;

                            if (fieldNames.Contains("project_documentation_receive_date_description") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_receive_date_description")))
                                row.project_documentation_receive_date_description = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_receive_date_description")), typeof(System.DateTime));
                            else
                                row.project_documentation_receive_date_description = null;

                            if (fieldNames.Contains("revision_number_description") && !reader.IsDBNull(reader.GetOrdinal("revision_number_description")))
                                row.revision_number_description = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_number_description")), typeof(int));
                            else
                                row.revision_number_description = null;

                            if (fieldNames.Contains("revision_number_date_description") && !reader.IsDBNull(reader.GetOrdinal("revision_number_date_description")))
                                row.revision_number_date_description = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_number_date_description")), typeof(System.DateTime));
                            else
                                row.revision_number_date_description = null;

                            if (fieldNames.Contains("revision_number_receive_date_description") && !reader.IsDBNull(reader.GetOrdinal("revision_number_receive_date_description")))
                                row.revision_number_receive_date_description = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_number_receive_date_description")), typeof(System.DateTime));
                            else
                                row.revision_number_receive_date_description = null;

                            if (fieldNames.Contains("start_description") && !reader.IsDBNull(reader.GetOrdinal("start_description")))
                                row.start_description = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start_description")), typeof(double));

                            if (fieldNames.Contains("finish_description") && !reader.IsDBNull(reader.GetOrdinal("finish_description")))
                                row.finish_description = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish_description")), typeof(double));
                            else
                                row.finish_description = null;

                            if (fieldNames.Contains("station_description") && !reader.IsDBNull(reader.GetOrdinal("station_description")))
                                row.station_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"station_description")), typeof(string));
                            else
                                row.station_description = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("additional_properties") && !reader.IsDBNull(reader.GetOrdinal("additional_properties")))
                                row.additional_properties = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_properties")), typeof(int));
                            else
                                row.additional_properties = null;

                            if (fieldNames.Contains("package_contents") && !reader.IsDBNull(reader.GetOrdinal("package_contents")))
                                row.package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_contents")), typeof(string));
                            else
                                row.package_contents = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity_description") && !reader.IsDBNull(reader.GetOrdinal("quantity_description")))
                                row.quantity_description = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity_description")), typeof(double));
                            else
                                row.quantity_description = null;

                            if (fieldNames.Contains("mass_per_unit_description") && !reader.IsDBNull(reader.GetOrdinal("mass_per_unit_description")))
                                row.mass_per_unit_description = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_per_unit_description")), typeof(double));
                            else
                                row.mass_per_unit_description = null;

                            if (fieldNames.Contains("mass_size") && !reader.IsDBNull(reader.GetOrdinal("mass_size")))
                                row.mass_size = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_size")), typeof(string));
                            else
                                row.mass_size = null;

                            if (fieldNames.Contains("manufacturer_description") && !reader.IsDBNull(reader.GetOrdinal("manufacturer_description")))
                                row.manufacturer_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"manufacturer_description")), typeof(string));
                            else
                                row.manufacturer_description = null;

                            if (fieldNames.Contains("delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_description")))
                                row.delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_description")), typeof(string));
                            else
                                row.delivery_type_description = null;

                            if (fieldNames.Contains("goods_type_description") && !reader.IsDBNull(reader.GetOrdinal("goods_type_description")))
                                row.goods_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"goods_type_description")), typeof(string));
                            else
                                row.goods_type_description = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("summary2") && !reader.IsDBNull(reader.GetOrdinal("summary2")))
                                row.summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary2")), typeof(string));
                            else
                                row.summary2 = null;

                            if (fieldNames.Contains("state_description") && !reader.IsDBNull(reader.GetOrdinal("state_description")))
                                row.state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"state_description")), typeof(string));
                            else
                                row.state_description = null;

                            if (fieldNames.Contains("package_description") && !reader.IsDBNull(reader.GetOrdinal("package_description")))
                                row.package_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_description")), typeof(string));

                            if (fieldNames.Contains("in_kd_description") && !reader.IsDBNull(reader.GetOrdinal("in_kd_description")))
                                row.in_kd_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"in_kd_description")), typeof(string));
                            else
                                row.in_kd_description = null;

                            if (fieldNames.Contains("psd_state_description") && !reader.IsDBNull(reader.GetOrdinal("psd_state_description")))
                                row.psd_state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"psd_state_description")), typeof(string));
                            else
                                row.psd_state_description = null;

                            if (fieldNames.Contains("pr_source_description") && !reader.IsDBNull(reader.GetOrdinal("pr_source_description")))
                                row.pr_source_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"pr_source_description")), typeof(string));
                            else
                                row.pr_source_description = null;

                            if (fieldNames.Contains("subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_description")))
                                row.subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_description")), typeof(string));
                            else
                                row.subcontractor_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_SELECT_PROJECT_REQUIREMENTS_FOR_CHANGEResult>> APL_SELECT_PROJECT_REQUIREMENTS_FOR_CHANGEAsync (System.Nullable<int> event_id, string id_list, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<APL_SELECT_PROJECT_REQUIREMENTS_FOR_CHANGEResult> result = new List<APL_SELECT_PROJECT_REQUIREMENTS_FOR_CHANGEResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_SELECT_PROJECT_REQUIREMENTS_FOR_CHANGE";

                    DbParameter event_idParameter = cmd.CreateParameter();
                    event_idParameter.ParameterName = "event_id";
                    event_idParameter.Direction = ParameterDirection.Input;
                    event_idParameter.DbType = DbType.Int32;
                    event_idParameter.Precision = 10;
                    event_idParameter.Scale = 0;
                    if (event_id.HasValue)
                    {
                        event_idParameter.Value = event_id.Value;
                    }
                    else
                    {
                        event_idParameter.Size = -1;
                        event_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(event_idParameter);

                    DbParameter id_listParameter = cmd.CreateParameter();
                    id_listParameter.ParameterName = "id_list";
                    id_listParameter.Direction = ParameterDirection.Input;
                    id_listParameter.DbType = DbType.String;
                    if (id_list != null)
                    {
                        id_listParameter.Value = id_list;
                    }
                    else
                    {
                        id_listParameter.Size = -1;
                        id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(id_listParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_SELECT_PROJECT_REQUIREMENTS_FOR_CHANGEResult row = new APL_SELECT_PROJECT_REQUIREMENTS_FOR_CHANGEResult();
                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal("code")))
                                row.code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));
                            else
                                row.code = null;

                            if (fieldNames.Contains("object_description") && !reader.IsDBNull(reader.GetOrdinal("object_description")))
                                row.object_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"object_description")), typeof(string));
                            else
                                row.object_description = null;

                            if (fieldNames.Contains("subobject_description") && !reader.IsDBNull(reader.GetOrdinal("subobject_description")))
                                row.subobject_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subobject_description")), typeof(string));
                            else
                                row.subobject_description = null;

                            if (fieldNames.Contains("project_documentation") && !reader.IsDBNull(reader.GetOrdinal("project_documentation")))
                                row.project_documentation = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation")), typeof(string));
                            else
                                row.project_documentation = null;

                            if (fieldNames.Contains("project_documentation_date_description") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_date_description")))
                                row.project_documentation_date_description = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_date_description")), typeof(System.DateTime));
                            else
                                row.project_documentation_date_description = null;

                            if (fieldNames.Contains("project_documentation_receive_date_description") && !reader.IsDBNull(reader.GetOrdinal("project_documentation_receive_date_description")))
                                row.project_documentation_receive_date_description = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"project_documentation_receive_date_description")), typeof(System.DateTime));
                            else
                                row.project_documentation_receive_date_description = null;

                            if (fieldNames.Contains("revision_number_description") && !reader.IsDBNull(reader.GetOrdinal("revision_number_description")))
                                row.revision_number_description = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_number_description")), typeof(int));
                            else
                                row.revision_number_description = null;

                            if (fieldNames.Contains("revision_number_date_description") && !reader.IsDBNull(reader.GetOrdinal("revision_number_date_description")))
                                row.revision_number_date_description = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_number_date_description")), typeof(System.DateTime));
                            else
                                row.revision_number_date_description = null;

                            if (fieldNames.Contains("revision_number_receive_date_description") && !reader.IsDBNull(reader.GetOrdinal("revision_number_receive_date_description")))
                                row.revision_number_receive_date_description = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"revision_number_receive_date_description")), typeof(System.DateTime));
                            else
                                row.revision_number_receive_date_description = null;

                            if (fieldNames.Contains("start_description") && !reader.IsDBNull(reader.GetOrdinal("start_description")))
                                row.start_description = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"start_description")), typeof(double));

                            if (fieldNames.Contains("finish_description") && !reader.IsDBNull(reader.GetOrdinal("finish_description")))
                                row.finish_description = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"finish_description")), typeof(double));
                            else
                                row.finish_description = null;

                            if (fieldNames.Contains("station_description") && !reader.IsDBNull(reader.GetOrdinal("station_description")))
                                row.station_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"station_description")), typeof(string));
                            else
                                row.station_description = null;

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal("description")))
                                row.description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.description = null;

                            if (fieldNames.Contains("additional_properties") && !reader.IsDBNull(reader.GetOrdinal("additional_properties")))
                                row.additional_properties = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"additional_properties")), typeof(int));
                            else
                                row.additional_properties = null;

                            if (fieldNames.Contains("package_contents") && !reader.IsDBNull(reader.GetOrdinal("package_contents")))
                                row.package_contents = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_contents")), typeof(string));
                            else
                                row.package_contents = null;

                            if (fieldNames.Contains("unit_description") && !reader.IsDBNull(reader.GetOrdinal("unit_description")))
                                row.unit_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unit_description")), typeof(string));
                            else
                                row.unit_description = null;

                            if (fieldNames.Contains("quantity_description") && !reader.IsDBNull(reader.GetOrdinal("quantity_description")))
                                row.quantity_description = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity_description")), typeof(double));
                            else
                                row.quantity_description = null;

                            if (fieldNames.Contains("mass_per_unit_description") && !reader.IsDBNull(reader.GetOrdinal("mass_per_unit_description")))
                                row.mass_per_unit_description = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_per_unit_description")), typeof(double));
                            else
                                row.mass_per_unit_description = null;

                            if (fieldNames.Contains("mass_size") && !reader.IsDBNull(reader.GetOrdinal("mass_size")))
                                row.mass_size = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mass_size")), typeof(string));
                            else
                                row.mass_size = null;

                            if (fieldNames.Contains("manufacturer_description") && !reader.IsDBNull(reader.GetOrdinal("manufacturer_description")))
                                row.manufacturer_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"manufacturer_description")), typeof(string));
                            else
                                row.manufacturer_description = null;

                            if (fieldNames.Contains("delivery_type_description") && !reader.IsDBNull(reader.GetOrdinal("delivery_type_description")))
                                row.delivery_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"delivery_type_description")), typeof(string));
                            else
                                row.delivery_type_description = null;

                            if (fieldNames.Contains("goods_type_description") && !reader.IsDBNull(reader.GetOrdinal("goods_type_description")))
                                row.goods_type_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"goods_type_description")), typeof(string));
                            else
                                row.goods_type_description = null;

                            if (fieldNames.Contains("summary") && !reader.IsDBNull(reader.GetOrdinal("summary")))
                                row.summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary")), typeof(string));
                            else
                                row.summary = null;

                            if (fieldNames.Contains("summary2") && !reader.IsDBNull(reader.GetOrdinal("summary2")))
                                row.summary2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"summary2")), typeof(string));
                            else
                                row.summary2 = null;

                            if (fieldNames.Contains("state_description") && !reader.IsDBNull(reader.GetOrdinal("state_description")))
                                row.state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"state_description")), typeof(string));
                            else
                                row.state_description = null;

                            if (fieldNames.Contains("package_description") && !reader.IsDBNull(reader.GetOrdinal("package_description")))
                                row.package_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"package_description")), typeof(string));

                            if (fieldNames.Contains("in_kd_description") && !reader.IsDBNull(reader.GetOrdinal("in_kd_description")))
                                row.in_kd_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"in_kd_description")), typeof(string));
                            else
                                row.in_kd_description = null;

                            if (fieldNames.Contains("psd_state_description") && !reader.IsDBNull(reader.GetOrdinal("psd_state_description")))
                                row.psd_state_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"psd_state_description")), typeof(string));
                            else
                                row.psd_state_description = null;

                            if (fieldNames.Contains("pr_source_description") && !reader.IsDBNull(reader.GetOrdinal("pr_source_description")))
                                row.pr_source_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"pr_source_description")), typeof(string));
                            else
                                row.pr_source_description = null;

                            if (fieldNames.Contains("subcontractor_description") && !reader.IsDBNull(reader.GetOrdinal("subcontractor_description")))
                                row.subcontractor_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subcontractor_description")), typeof(string));
                            else
                                row.subcontractor_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public void APL_APPROVE_PROJECT_REQUIREMENT_CHANGE_REQUEST2 (string item_id_list, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_APPROVE_PROJECT_REQUIREMENT_CHANGE_REQUEST2";

                    DbParameter item_id_listParameter = cmd.CreateParameter();
                    item_id_listParameter.ParameterName = "item_id_list";
                    item_id_listParameter.Direction = ParameterDirection.Input;
                    item_id_listParameter.DbType = DbType.String;
                    if (item_id_list != null)
                    {
                        item_id_listParameter.Value = item_id_list;
                    }
                    else
                    {
                        item_id_listParameter.Size = -1;
                        item_id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(item_id_listParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task APL_APPROVE_PROJECT_REQUIREMENT_CHANGE_REQUEST2Async (string item_id_list, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_APPROVE_PROJECT_REQUIREMENT_CHANGE_REQUEST2";

                    DbParameter item_id_listParameter = cmd.CreateParameter();
                    item_id_listParameter.ParameterName = "item_id_list";
                    item_id_listParameter.Direction = ParameterDirection.Input;
                    item_id_listParameter.DbType = DbType.String;
                    if (item_id_list != null)
                    {
                        item_id_listParameter.Value = item_id_list;
                    }
                    else
                    {
                        item_id_listParameter.Size = -1;
                        item_id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(item_id_listParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> APL_DECLINE_PROJECT_REQUIREMENT_CHANGE_REQUEST2 (string item_id_list, string note, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_DECLINE_PROJECT_REQUIREMENT_CHANGE_REQUEST2";

                    DbParameter item_id_listParameter = cmd.CreateParameter();
                    item_id_listParameter.ParameterName = "item_id_list";
                    item_id_listParameter.Direction = ParameterDirection.Input;
                    item_id_listParameter.DbType = DbType.String;
                    if (item_id_list != null)
                    {
                        item_id_listParameter.Value = item_id_list;
                    }
                    else
                    {
                        item_id_listParameter.Size = -1;
                        item_id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(item_id_listParameter);

                    DbParameter noteParameter = cmd.CreateParameter();
                    noteParameter.ParameterName = "note";
                    noteParameter.Direction = ParameterDirection.Input;
                    noteParameter.DbType = DbType.String;
                    if (note != null)
                    {
                        noteParameter.Value = note;
                    }
                    else
                    {
                        noteParameter.Size = -1;
                        noteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(noteParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> APL_DECLINE_PROJECT_REQUIREMENT_CHANGE_REQUEST2Async (string item_id_list, string note, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_DECLINE_PROJECT_REQUIREMENT_CHANGE_REQUEST2";

                    DbParameter item_id_listParameter = cmd.CreateParameter();
                    item_id_listParameter.ParameterName = "item_id_list";
                    item_id_listParameter.Direction = ParameterDirection.Input;
                    item_id_listParameter.DbType = DbType.String;
                    if (item_id_list != null)
                    {
                        item_id_listParameter.Value = item_id_list;
                    }
                    else
                    {
                        item_id_listParameter.Size = -1;
                        item_id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(item_id_listParameter);

                    DbParameter noteParameter = cmd.CreateParameter();
                    noteParameter.ParameterName = "note";
                    noteParameter.Direction = ParameterDirection.Input;
                    noteParameter.DbType = DbType.String;
                    if (note != null)
                    {
                        noteParameter.Value = note;
                    }
                    else
                    {
                        noteParameter.Size = -1;
                        noteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(noteParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> APL_UPDATE_PROJECT_REQUIREMENT_CHANGE_REQUEST_STATE2 (string item_id_list, System.Nullable<int> is_nps, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_PROJECT_REQUIREMENT_CHANGE_REQUEST_STATE2";

                    DbParameter item_id_listParameter = cmd.CreateParameter();
                    item_id_listParameter.ParameterName = "item_id_list";
                    item_id_listParameter.Direction = ParameterDirection.Input;
                    item_id_listParameter.DbType = DbType.String;
                    if (item_id_list != null)
                    {
                        item_id_listParameter.Value = item_id_list;
                    }
                    else
                    {
                        item_id_listParameter.Size = -1;
                        item_id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(item_id_listParameter);

                    DbParameter is_npsParameter = cmd.CreateParameter();
                    is_npsParameter.ParameterName = "is_nps";
                    is_npsParameter.Direction = ParameterDirection.Input;
                    is_npsParameter.DbType = DbType.Int32;
                    is_npsParameter.Precision = 10;
                    is_npsParameter.Scale = 0;
                    if (is_nps.HasValue)
                    {
                        is_npsParameter.Value = is_nps.Value;
                    }
                    else
                    {
                        is_npsParameter.Size = -1;
                        is_npsParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_npsParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> APL_UPDATE_PROJECT_REQUIREMENT_CHANGE_REQUEST_STATE2Async (string item_id_list, System.Nullable<int> is_nps, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_PROJECT_REQUIREMENT_CHANGE_REQUEST_STATE2";

                    DbParameter item_id_listParameter = cmd.CreateParameter();
                    item_id_listParameter.ParameterName = "item_id_list";
                    item_id_listParameter.Direction = ParameterDirection.Input;
                    item_id_listParameter.DbType = DbType.String;
                    if (item_id_list != null)
                    {
                        item_id_listParameter.Value = item_id_list;
                    }
                    else
                    {
                        item_id_listParameter.Size = -1;
                        item_id_listParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(item_id_listParameter);

                    DbParameter is_npsParameter = cmd.CreateParameter();
                    is_npsParameter.ParameterName = "is_nps";
                    is_npsParameter.Direction = ParameterDirection.Input;
                    is_npsParameter.DbType = DbType.Int32;
                    is_npsParameter.Precision = 10;
                    is_npsParameter.Scale = 0;
                    if (is_nps.HasValue)
                    {
                        is_npsParameter.Value = is_nps.Value;
                    }
                    else
                    {
                        is_npsParameter.Size = -1;
                        is_npsParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(is_npsParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_DELETE_LINK_FUNCTIONResult> APL_ADD_PRSLNO_QUANTITY (System.Nullable<int> main_prslno_id, System.Nullable<double> quantity, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_ADD_PRSLNO_QUANTITY";

                    DbParameter main_prslno_idParameter = cmd.CreateParameter();
                    main_prslno_idParameter.ParameterName = "main_prslno_id";
                    main_prslno_idParameter.Direction = ParameterDirection.Input;
                    main_prslno_idParameter.DbType = DbType.Int32;
                    main_prslno_idParameter.Precision = 10;
                    main_prslno_idParameter.Scale = 0;
                    if (main_prslno_id.HasValue)
                    {
                        main_prslno_idParameter.Value = main_prslno_id.Value;
                    }
                    else
                    {
                        main_prslno_idParameter.Size = -1;
                        main_prslno_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(main_prslno_idParameter);

                    DbParameter quantityParameter = cmd.CreateParameter();
                    quantityParameter.ParameterName = "quantity";
                    quantityParameter.Direction = ParameterDirection.Input;
                    quantityParameter.DbType = DbType.Double;
                    quantityParameter.Precision = 53;
                    if (quantity.HasValue)
                    {
                        quantityParameter.Value = quantity.Value;
                    }
                    else
                    {
                        quantityParameter.Size = -1;
                        quantityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(quantityParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_DELETE_LINK_FUNCTIONResult>> APL_ADD_PRSLNO_QUANTITYAsync (System.Nullable<int> main_prslno_id, System.Nullable<double> quantity, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<UI_DELETE_LINK_FUNCTIONResult> result = new List<UI_DELETE_LINK_FUNCTIONResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_ADD_PRSLNO_QUANTITY";

                    DbParameter main_prslno_idParameter = cmd.CreateParameter();
                    main_prslno_idParameter.ParameterName = "main_prslno_id";
                    main_prslno_idParameter.Direction = ParameterDirection.Input;
                    main_prslno_idParameter.DbType = DbType.Int32;
                    main_prslno_idParameter.Precision = 10;
                    main_prslno_idParameter.Scale = 0;
                    if (main_prslno_id.HasValue)
                    {
                        main_prslno_idParameter.Value = main_prslno_id.Value;
                    }
                    else
                    {
                        main_prslno_idParameter.Size = -1;
                        main_prslno_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(main_prslno_idParameter);

                    DbParameter quantityParameter = cmd.CreateParameter();
                    quantityParameter.ParameterName = "quantity";
                    quantityParameter.Direction = ParameterDirection.Input;
                    quantityParameter.DbType = DbType.Double;
                    quantityParameter.Precision = 53;
                    if (quantity.HasValue)
                    {
                        quantityParameter.Value = quantity.Value;
                    }
                    else
                    {
                        quantityParameter.Size = -1;
                        quantityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(quantityParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_DELETE_LINK_FUNCTIONResult row = new UI_DELETE_LINK_FUNCTIONResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error_description") && !reader.IsDBNull(reader.GetOrdinal("error_description")))
                                row.error_description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error_description")), typeof(string));
                            else
                                row.error_description = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<APL_UPDATE_PROJECT_REQUIREMENT_STATE_9_2Result> APL_UPDATE_PROJECT_REQUIREMENT_STATE_9_2 (System.Nullable<int> project_id, System.Nullable<int> state_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<APL_UPDATE_PROJECT_REQUIREMENT_STATE_9_2Result> result = new List<APL_UPDATE_PROJECT_REQUIREMENT_STATE_9_2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_PROJECT_REQUIREMENT_STATE_9_2";

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);

                    DbParameter state_idParameter = cmd.CreateParameter();
                    state_idParameter.ParameterName = "state_id";
                    state_idParameter.Direction = ParameterDirection.Input;
                    state_idParameter.DbType = DbType.Int32;
                    state_idParameter.Precision = 10;
                    state_idParameter.Scale = 0;
                    if (state_id.HasValue)
                    {
                        state_idParameter.Value = state_id.Value;
                    }
                    else
                    {
                        state_idParameter.Size = -1;
                        state_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(state_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_UPDATE_PROJECT_REQUIREMENT_STATE_9_2Result row = new APL_UPDATE_PROJECT_REQUIREMENT_STATE_9_2Result();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error") && !reader.IsDBNull(reader.GetOrdinal("error")))
                                row.error = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error")), typeof(string));
                            else
                                row.error = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<APL_UPDATE_PROJECT_REQUIREMENT_STATE_9_2Result>> APL_UPDATE_PROJECT_REQUIREMENT_STATE_9_2Async (System.Nullable<int> project_id, System.Nullable<int> state_id, System.Nullable<int> user_id, System.Nullable<int> real_user_id)
        {

            List<APL_UPDATE_PROJECT_REQUIREMENT_STATE_9_2Result> result = new List<APL_UPDATE_PROJECT_REQUIREMENT_STATE_9_2Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.APL_UPDATE_PROJECT_REQUIREMENT_STATE_9_2";

                    DbParameter project_idParameter = cmd.CreateParameter();
                    project_idParameter.ParameterName = "project_id";
                    project_idParameter.Direction = ParameterDirection.Input;
                    project_idParameter.DbType = DbType.Int32;
                    project_idParameter.Precision = 10;
                    project_idParameter.Scale = 0;
                    if (project_id.HasValue)
                    {
                        project_idParameter.Value = project_id.Value;
                    }
                    else
                    {
                        project_idParameter.Size = -1;
                        project_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(project_idParameter);

                    DbParameter state_idParameter = cmd.CreateParameter();
                    state_idParameter.ParameterName = "state_id";
                    state_idParameter.Direction = ParameterDirection.Input;
                    state_idParameter.DbType = DbType.Int32;
                    state_idParameter.Precision = 10;
                    state_idParameter.Scale = 0;
                    if (state_id.HasValue)
                    {
                        state_idParameter.Value = state_id.Value;
                    }
                    else
                    {
                        state_idParameter.Size = -1;
                        state_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(state_idParameter);

                    DbParameter user_idParameter = cmd.CreateParameter();
                    user_idParameter.ParameterName = "user_id";
                    user_idParameter.Direction = ParameterDirection.Input;
                    user_idParameter.DbType = DbType.Int32;
                    user_idParameter.Precision = 10;
                    user_idParameter.Scale = 0;
                    if (user_id.HasValue)
                    {
                        user_idParameter.Value = user_id.Value;
                    }
                    else
                    {
                        user_idParameter.Size = -1;
                        user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(user_idParameter);

                    DbParameter real_user_idParameter = cmd.CreateParameter();
                    real_user_idParameter.ParameterName = "real_user_id";
                    real_user_idParameter.Direction = ParameterDirection.Input;
                    real_user_idParameter.DbType = DbType.Int32;
                    real_user_idParameter.Precision = 10;
                    real_user_idParameter.Scale = 0;
                    if (real_user_id.HasValue)
                    {
                        real_user_idParameter.Value = real_user_id.Value;
                    }
                    else
                    {
                        real_user_idParameter.Size = -1;
                        real_user_idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(real_user_idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            APL_UPDATE_PROJECT_REQUIREMENT_STATE_9_2Result row = new APL_UPDATE_PROJECT_REQUIREMENT_STATE_9_2Result();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.error = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("error") && !reader.IsDBNull(reader.GetOrdinal("error")))
                                row.error = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"error")), typeof(string));
                            else
                                row.error = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<UI_SELECT_GRID_COLORSResult> UI_SELECT_GRID_COLORS ()
        {

            List<UI_SELECT_GRID_COLORSResult> result = new List<UI_SELECT_GRID_COLORSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_GRID_COLORS";
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_GRID_COLORSResult row = new UI_SELECT_GRID_COLORSResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.color_list = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("color_list") && !reader.IsDBNull(reader.GetOrdinal("color_list")))
                                row.color_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_list")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<UI_SELECT_GRID_COLORSResult>> UI_SELECT_GRID_COLORSAsync ()
        {

            List<UI_SELECT_GRID_COLORSResult> result = new List<UI_SELECT_GRID_COLORSResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UI_SELECT_GRID_COLORS";
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            UI_SELECT_GRID_COLORSResult row = new UI_SELECT_GRID_COLORSResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.color_list = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("color_list") && !reader.IsDBNull(reader.GetOrdinal("color_list")))
                                row.color_list = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"color_list")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        #endregion

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
