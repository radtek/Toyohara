@using ToyoharaCore.Models
@using ToyoharaCore.Models.CustomModel
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string control = ViewContext.RouteData.Values["Controller"].ToString();
}

<script src="~/js/Projects/Projects.js"></script>
<link href="~/css/Projects/Projects.css" rel="stylesheet" />
<style>
    #GridPrjLogNet {
        max-width: 100% !important;
    }
</style>
@Html.Partial("Settings", (Settings)ViewBag.Settings)
<div id="part">
@Html.Partial("UpdateGridCard", (UpdateGridCardModel)ViewBag.GridCard)
</div>

<div id="partPrjLogNet">    
</div>
<div id="FullSearch" class="modal fade" tabindex="-1" role="dialog" style="z-index:10000;">
    <div class="modal-dialog" style="width: 60%;" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick='RemoveFullSearchFilters("FullSearch", "", "");'>
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title"> Расширенный поиск</h4>
            </div>
            <div class="modal-body">
                <table class="table table-condensed" style="width:100%; table-layout:fixed;">
                    <tbody >
                        <tr>
                            <td>
                                <label class='form-check-label btn_in_grid' for='hide_closed'>Скрыть завершенные проекты</label>
                                <input type='checkbox' class='form-check-input btn_in_grid full_search_check' id='hide_closed' data_type="check" checked>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <label class='form-check-label btn_in_grid' for='show_mine'>Показать только мои проекты</label>
                                <input type='checkbox' class='form-check-input btn_in_grid full_search_check' id='show_mine' data_type="check" checked>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <div class="modal-footer">
                    <button type="button" class="btn btn_icon" style="margin-left:auto; margin-right:0; " onclick=' SaveFullSearchFilters("FullSearch", "",""); $("#FullSearch").modal("hide"); Reloading("Grid");'>
                        <span class="dx-icon-floppy icon"></span>@*</i>*@
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>


<div id="roads" class="modal fade" tabindex="-1" role="dialog" style="z-index:10000;">
    <div class="modal-dialog" style="width: 60%;" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" >
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title"> Расширенный поиск</h4>
            </div>
            <div class="modal-body">
                @(Html.DevExtreme().DataGrid<APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSResult>()
                                                                                                                                        .ID("GridPrjLogNet")
                                                                                                                                        .ShowBorders(true)
                                                                                                                                        .DataSource(d => d.Mvc()
                                                                                                                                        .InsertAction("PostData").OnBeforeSend("onBeforeSendPrjLogNet")
                                                                                                                                        .LoadAction("GetData")
                                                                                                                                        .Controller("Common")
                                                                                                                                        .Key("id")

                                                                                                                                        .LoadParams(new
                                                                                                                                        {
                                                                                                                                            additionalParams = new JS("function(){return ReturnDataPrjLogNet('" + control + "');}")
                                                                                                                                            //showSelected = new JS("function(){return showSelected;}"),
                                                                                                                                            //selectedRecord = new JS("function(){return selectedRecord;}"),
                                                                                                                                            //only_new = new JS("function(){return document.getElementById('only_new').checked;}"),
                                                                                                                                            //rebind = new JS("function(){return rebind;}"),
                                                                                                                                            //ekk_guid_list = new JS("function(){return ReturnEkkNodes('ekk_code_name').selected_node.toString();}")
                                                                                                                                        })
                                                                                                                                        .UpdateAction("PutData").OnBeforeSend("onBeforeSendPrjLogNet"))
                                                                                                                                        .Editing(editing =>
                                                                                                                                        {
                                                                                                                                            editing.Mode(GridEditMode.Batch);
                                                                                                                                            editing.AllowUpdating(true);
                                                                                                                                            editing.AllowAdding(true).UseIcons(true);

                                                                                                                                        })


                                                        //.Editing(editing =>
                                                        //{
                                                        //    editing.Mode(GridEditMode.Batch);
                                                        //    editing.AllowUpdating(true);
                                                        //})
                                                        //  .Selection(s => s.Mode(SelectionMode.Multiple).ShowCheckBoxesMode(DevExtreme.AspNet.Mvc.GridSelectionShowCheckBoxesMode.Always).AllowSelectAll(true))
                                                        .Selection(s => s.Mode(SelectionMode.Single))

                                                        .Columns(columns =>
                                                        {
                                                            columns.AddFor(m => m.id).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_id_grid_settings2_ru"])).Visible((bool)ViewData["CK_UI_id_grid_settings2"]).Width((int)ViewData["CK_UI_id_grid_settings2_width"]).VisibleIndex((int)ViewData["CK_UI_id_grid_settings2_pos"]).AllowEditing((bool)ViewData["CK_UI_id_grid_settings2_edit"]).ValidationRules(validation=>validation.AddCustom().ValidationCallback("validFunc"));
                                                            columns.AddFor(m => m.lno_id).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_lno_id_grid_settings2_ru"])).Visible((bool)ViewData["CK_UI_lno_id_grid_settings2"]).Width((int)ViewData["CK_UI_lno_id_grid_settings2_width"]).VisibleIndex((int)ViewData["CK_UI_lno_id_grid_settings2_pos"]).AllowEditing((bool)ViewData["CK_UI_lno_id_grid_settings2_edit"]).ValidationRules(validation => validation.AddCustom().ValidationCallback("validFunc"));
                                                            columns.AddFor(m => m.lno_description).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_lno_description_grid_settings2_ru"])).Visible((bool)ViewData["CK_UI_lno_description_grid_settings2"]).Width((int)ViewData["CK_UI_lno_description_grid_settings2_width"]).VisibleIndex((int)ViewData["CK_UI_lno_description_grid_settings2_pos"]).AllowEditing((bool)ViewData["CK_UI_lno_description_grid_settings2_edit"]);
                                                            columns.AddFor(m => m.start).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_start_grid_settings2_ru"])).Visible((bool)ViewData["CK_UI_start_grid_settings2"]).Width((int)ViewData["CK_UI_start_grid_settings2_width"]).VisibleIndex((int)ViewData["CK_UI_start_pos"]).AllowEditing((bool)ViewData["CK_UI_start_grid_settings2_edit"]);
                                                            columns.AddFor(m => m.finish).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_finish_grid_settings2_ru"])).Visible((bool)ViewData["CK_UI_finish_grid_settings2"]).Width((int)ViewData["CK_UI_finish_grid_settings2_width"]).VisibleIndex((int)ViewData["CK_UI_finish_grid_settings2_pos"]).AllowEditing((bool)ViewData["CK_UI_finish_grid_settings2_edit"]);
                                                        })
                                                                                                                            //.Paging(p => p.PageSize(30))
                                                                                                                            //.Pager(pager =>
                                                                                                                            //{
                                                                                                                            //    pager.ShowPageSizeSelector(true);
                                                                                                                            //    pager.AllowedPageSizes(new List<int> { 5, 10, 20, 30, 50 });
                                                                                                                            //    pager.AllowedPageSizes(new List<int> { 5, 10, 20, 30, 50 });
                                                                                                                            //    pager.ShowInfo(true);
                                                                                                                            //    pager.ShowNavigationButtons(true);
                                                                                                                            //    pager.Visible(true);
                                                                                                                            //})

                                                                                                                            .FilterRow(f => f.Visible(true).ApplyFilter(GridApplyFilterMode.Auto))
                                                                                                                            .HeaderFilter(f => f.Visible(true))
                                                                                                                            .RemoteOperations(true)
                                                                                                                            .ShowRowLines(true)
                                                                                                                            .ColumnAutoWidth(true)
                                                                                                                            .FilterSyncEnabled(true)
                                                                                                                            .Height(new JS("function() { return window.innerHeight-$('div.myheader').height();}"))
                                                                                                                            .Width("100%")
                                                                                                                            .LoadPanel(load => load.IndicatorSrc("/../../img/orig.gif").ShowIndicator(true).Height(200).Width(200))
                                                                                                                            //.Summary(s => s
                                                                                                                            //    .TotalItems(totalItems =>
                                                                                                                            //    {
                                                                                                                            //        totalItems.AddFor(m => m.id).SummaryType(SummaryType.Count);
                                                                                                                            //    })
                                                                                                                            //    .GroupItems(groupItems =>
                                                                                                                            //    {
                                                                                                                            //        groupItems.Add().SummaryType(SummaryType.Count);
                                                                                                                            //    })
                                                                                                                            //)
                                                                                                                            .Sorting(s => s.Mode(GridSortingMode.Multiple))
                                                                                                                            .AllowColumnResizing(true)
                                                                                                                            .AllowColumnReordering(true)
                                                                                                                            .Option("columnResizingMode", ColumnResizingMode.Widget)
                                                                                                                            .WordWrapEnabled(true)
                                                                                                                            .OnToolbarPreparing("onToolbarPreparingPrjLogNet")
                                                                                                                            .OnContentReady("contentReadyPrjLogNet")
                                                                                                                            //.OnRowClick("onRowClick")
                                                                                                                            .Scrolling(scrolling => scrolling.UseNative(true).ShowScrollbar(DevExtreme.AspNet.Mvc.ShowScrollbarMode.Always)))
                @*<div class="modal-footer">
        <button type="button" class="btn btn_icon" style="margin-left:auto; margin-right:0; " onclick=' SaveFullSearchFilters("FullSearch", "",""); $("#FullSearch").modal("hide"); Reloading("Grid");'>
            <span class="dx-icon-floppy icon"></span>@*</i>*@
                @*</button>*@
                @*</div>*@
            </div>
        </div>
    </div>
</div>

@(Html.DevExtreme().DataGrid<APL_SELECT_PROJECT_LIST_INFO2Result>()
                                                                                                            .ID("Grid")
                                                                                                            .ShowBorders(true)
                                                                                                            .DataSource(d => d.Mvc()
                                                                                                            .LoadAction("GetData")
                                                                                                            .Controller("Common")
                                                                                                            .Key("id")

                                                                                                            .LoadParams(new
                                                                                                            {
                                                                                                                additionalParams = new JS("function(){return ReturnData('" + control + "');}")
                                                                                                                //showSelected = new JS("function(){return showSelected;}"),
                                                                                                                //selectedRecord = new JS("function(){return selectedRecord;}"),
                                                                                                                //only_new = new JS("function(){return document.getElementById('only_new').checked;}"),
                                                                                                                //rebind = new JS("function(){return rebind;}"),
                                                                                                                //ekk_guid_list = new JS("function(){return ReturnEkkNodes('ekk_code_name').selected_node.toString();}")
                                                                                                            }))

                            .Selection(s => s.Mode(SelectionMode.Single))
                            .Columns(columns =>
                            {
                                columns.AddFor(m => m.id).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_id_ru"])).Visible((bool)ViewData["CK_UI_id"]).Width((int)ViewData["CK_UI_id_width"]).VisibleIndex((int)ViewData["CK_UI_id_pos"]).AllowEditing((bool)ViewData["CK_UI_id_edit"]);
                                columns.AddFor(m => m.code).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_code_ru"])).Visible((bool)ViewData["CK_UI_code"]).Width((int)ViewData["CK_UI_code_width"]).VisibleIndex((int)ViewData["CK_UI_code_pos"]).AllowEditing((bool)ViewData["CK_UI_code_edit"]);
                                columns.AddFor(m => m.project_short_description).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_project_short_description_ru"])).Visible((bool)ViewData["CK_UI_project_short_description"]).Width((int)ViewData["CK_UI_project_short_description_width"]).VisibleIndex((int)ViewData["CK_UI_project_short_description_pos"]).AllowEditing((bool)ViewData["CK_UI_project_short_description_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.project_type).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_project_type_ru"])).Visible((bool)ViewData["CK_UI_project_type"]).Width((int)ViewData["CK_UI_project_type_width"]).VisibleIndex((int)ViewData["CK_UI_project_type_pos"]).AllowEditing((bool)ViewData["CK_UI_project_type_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.build_curator_list_id).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_build_curator_list_id_ru"])).Visible((bool)ViewData["CK_UI_build_curator_list_id"]).Width((int)ViewData["CK_UI_build_curator_list_id_width"]).VisibleIndex((int)ViewData["CK_UI_build_curator_list_id_pos"]).AllowEditing((bool)ViewData["CK_UI_build_curator_list_id_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.build_curator_list).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_build_curator_list_ru"])).Visible((bool)ViewData["CK_UI_build_curator_list"]).Width((int)ViewData["CK_UI_build_curator_list_width"]).VisibleIndex((int)ViewData["CK_UI_build_curator_list_pos"]).AllowEditing((bool)ViewData["CK_UI_build_curator_list_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.package_curator).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_package_curator_ru"])).Visible((bool)ViewData["CK_UI_package_curator"]).Width((int)ViewData["CK_UI_package_curator_width"]).VisibleIndex((int)ViewData["CK_UI_package_curator_pos"]).AllowEditing((bool)ViewData["CK_UI_package_curator_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.supply_curator).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_supply_curator_ru"])).Visible((bool)ViewData["CK_UI_supply_curator"]).Width((int)ViewData["CK_UI_supply_curator_width"]).VisibleIndex((int)ViewData["CK_UI_supply_curator_pos"]).AllowEditing((bool)ViewData["CK_UI_supply_curator_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.supply_curator_list_id).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_supply_curator_list_id_ru"])).Visible((bool)ViewData["CK_UI_supply_curator_list_id"]).Width((int)ViewData["CK_UI_supply_curator_list_id_width"]).VisibleIndex((int)ViewData["CK_UI_supply_curator_list_id_pos"]).AllowEditing((bool)ViewData["CK_UI_supply_curator_list_id_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.supply_curator_list).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_supply_curator_list_ru"])).Visible((bool)ViewData["CK_UI_supply_curator_list"]).Width((int)ViewData["CK_UI_supply_curator_list_width"]).VisibleIndex((int)ViewData["CK_UI_supply_curator_list_pos"]).AllowEditing((bool)ViewData["CK_UI_supply_curator_list_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.deliveryplan_curator_list_id).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_deliveryplan_curator_list_id_ru"])).Visible((bool)ViewData["CK_UI_deliveryplan_curator_list_id"]).Width((int)ViewData["CK_UI_deliveryplan_curator_list_id_width"]).VisibleIndex((int)ViewData["CK_UI_deliveryplan_curator_list_id_pos"]).AllowEditing((bool)ViewData["CK_UI_deliveryplan_curator_list_id_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.deliveryplan_curator_list).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_deliveryplan_curator_list_ru"])).Visible((bool)ViewData["CK_UI_deliveryplan_curator_list"]).Width((int)ViewData["CK_UI_deliveryplan_curator_list_width"]).VisibleIndex((int)ViewData["CK_UI_deliveryplan_curator_list_pos"]).AllowEditing((bool)ViewData["CK_UI_deliveryplan_curator_list_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.project_curator).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_project_curator_ru"])).Visible((bool)ViewData["CK_UI_project_curator"]).Width((int)ViewData["CK_UI_project_curator_width"]).VisibleIndex((int)ViewData["CK_UI_project_curator_pos"]).AllowEditing((bool)ViewData["CK_UI_project_curator_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.stocks_curator).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_stocks_curator_ru"])).Visible((bool)ViewData["CK_UI_stocks_curator"]).Width((int)ViewData["CK_UI_stocks_curator_width"]).VisibleIndex((int)ViewData["CK_UI_stocks_curator_pos"]).AllowEditing((bool)ViewData["CK_UI_stocks_curator_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.normative_delivery_time).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_normative_delivery_time_ru"])).Visible((bool)ViewData["CK_UI_normative_delivery_time"]).Width((int)ViewData["CK_UI_normative_delivery_time_width"]).VisibleIndex((int)ViewData["CK_UI_normative_delivery_time_pos"]).AllowEditing((bool)ViewData["CK_UI_normative_delivery_time_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.storage_contract).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_storage_contract_ru"])).Visible((bool)ViewData["CK_UI_storage_contract"]).Width((int)ViewData["CK_UI_storage_contract_width"]).VisibleIndex((int)ViewData["CK_UI_storage_contract_pos"]).AllowEditing((bool)ViewData["CK_UI_storage_contract_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.storage_contract_finish_date).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_storage_contract_finish_date_ru"])).Visible((bool)ViewData["CK_UI_storage_contract_finish_date"]).Width((int)ViewData["CK_UI_storage_contract_finish_date_width"]).VisibleIndex((int)ViewData["CK_UI_storage_contract_finish_date_pos"]).AllowEditing((bool)ViewData["CK_UI_storage_contract_finish_date_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.build_start_date).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_build_start_date_ru"])).Visible((bool)ViewData["CK_UI_build_start_date"]).Width((int)ViewData["CK_UI_build_start_date_width"]).VisibleIndex((int)ViewData["CK_UI_build_start_date_pos"]).AllowEditing((bool)ViewData["CK_UI_build_start_date_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.build_finish_date).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_build_finish_date_ru"])).Visible((bool)ViewData["CK_UI_build_finish_date"]).Width((int)ViewData["CK_UI_build_finish_date_width"]).VisibleIndex((int)ViewData["CK_UI_build_finish_date_pos"]).AllowEditing((bool)ViewData["CK_UI_build_finish_date_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.non_project_supplier_approve_required).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_non_project_supplier_approve_required_ru"])).Visible((bool)ViewData["CK_UI_non_project_supplier_approve_required"]).Width((int)ViewData["CK_UI_non_project_supplier_approve_required_width"]).VisibleIndex((int)ViewData["CK_UI_non_project_supplier_approve_required_pos"]).AllowEditing((bool)ViewData["CK_UI_non_project_supplier_approve_required_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.rss_match_type).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_rss_match_type_ru"])).Visible((bool)ViewData["CK_UI_rss_match_type"]).Width((int)ViewData["CK_UI_rss_match_type_width"]).VisibleIndex((int)ViewData["CK_UI_rss_match_type_pos"]).AllowEditing((bool)ViewData["CK_UI_rss_match_type_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.project_state).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_project_state_ru"])).Visible((bool)ViewData["CK_UI_project_state"]).Width((int)ViewData["CK_UI_project_state_width"]).VisibleIndex((int)ViewData["CK_UI_project_state_pos"]).AllowEditing((bool)ViewData["CK_UI_project_state_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.tpsu_division).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_tpsu_division_ru"])).Visible((bool)ViewData["CK_UI_tpsu_division"]).Width((int)ViewData["CK_UI_tpsu_division_width"]).VisibleIndex((int)ViewData["CK_UI_tpsu_division_pos"]).AllowEditing((bool)ViewData["CK_UI_tpsu_division_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.tpsu_division_id).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_tpsu_division_id_ru"])).Visible((bool)ViewData["CK_UI_tpsu_division_id"]).Width((int)ViewData["CK_UI_tpsu_division_id_width"]).VisibleIndex((int)ViewData["CK_UI_tpsu_division_id_pos"]).AllowEditing((bool)ViewData["CK_UI_tpsu_division_id_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.subcontractor_info_list_id).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_subcontractor_info_list_id_ru"])).Visible((bool)ViewData["CK_UI_subcontractor_info_list_id"]).Width((int)ViewData["CK_UI_subcontractor_info_list_id_width"]).VisibleIndex((int)ViewData["CK_UI_subcontractor_info_list_id_pos"]).AllowEditing((bool)ViewData["CK_UI_subcontractor_info_list_id_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.subcontractor_info_list).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_subcontractor_info_list_ru"])).Visible((bool)ViewData["CK_UI_subcontractor_info_list"]).Width((int)ViewData["CK_UI_subcontractor_info_list_width"]).VisibleIndex((int)ViewData["CK_UI_subcontractor_info_list_pos"]).AllowEditing((bool)ViewData["CK_UI_subcontractor_info_list_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.is_documentation_percent).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_is_documentation_percent_ru"])).Visible((bool)ViewData["CK_UI_is_documentation_percent"]).Width((int)ViewData["CK_UI_is_documentation_percent_width"]).VisibleIndex((int)ViewData["CK_UI_is_documentation_percent_pos"]).AllowEditing((bool)ViewData["CK_UI_is_documentation_percent_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.is_documentation).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_is_documentation_ru"])).Visible((bool)ViewData["CK_UI_is_documentation"]).Width((int)ViewData["CK_UI_is_documentation_width"]).VisibleIndex((int)ViewData["CK_UI_is_documentation_pos"]).AllowEditing((bool)ViewData["CK_UI_is_documentation_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.is_change_documentation_percent).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_is_change_documentation_percent_ru"])).Visible((bool)ViewData["CK_UI_is_change_documentation_percent"]).Width((int)ViewData["CK_UI_is_change_documentation_percent_width"]).VisibleIndex((int)ViewData["CK_UI_is_change_documentation_percent_pos"]).AllowEditing((bool)ViewData["CK_UI_is_change_documentation_percent_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.is_change_documentation).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_is_change_documentation_ru"])).Visible((bool)ViewData["CK_UI_is_change_documentation"]).Width((int)ViewData["CK_UI_is_change_documentation_width"]).VisibleIndex((int)ViewData["CK_UI_is_change_documentation_pos"]).AllowEditing((bool)ViewData["CK_UI_is_change_documentation_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.total_sum_gk).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_total_sum_gk_ru"])).Visible((bool)ViewData["CK_UI_total_sum_gk"]).Width((int)ViewData["CK_UI_total_sum_gk_width"]).VisibleIndex((int)ViewData["CK_UI_total_sum_gk_pos"]).AllowEditing((bool)ViewData["CK_UI_total_sum_gk_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.total_sum_direct).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_total_sum_direct_ru"])).Visible((bool)ViewData["CK_UI_total_sum_direct"]).Width((int)ViewData["CK_UI_total_sum_direct_width"]).VisibleIndex((int)ViewData["CK_UI_total_sum_direct_pos"]).AllowEditing((bool)ViewData["CK_UI_total_sum_direct_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.advance_info).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_advance_info_ru"])).Visible((bool)ViewData["CK_UI_advance_info"]).Width((int)ViewData["CK_UI_advance_info_width"]).VisibleIndex((int)ViewData["CK_UI_advance_info_pos"]).AllowEditing((bool)ViewData["CK_UI_advance_info_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.logistical_network_objects).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_logistical_network_objects_ru"])).Visible((bool)ViewData["CK_UI_logistical_network_objects"]).Width((int)ViewData["CK_UI_logistical_network_objects_width"]).VisibleIndex((int)ViewData["CK_UI_logistical_network_objects_pos"]).AllowEditing((bool)ViewData["CK_UI_logistical_network_objects_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.subcontractors).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_subcontractors_ru"])).Visible((bool)ViewData["CK_UI_subcontractors"]).Width((int)ViewData["CK_UI_subcontractors_width"]).VisibleIndex((int)ViewData["CK_UI_subcontractors_pos"]).AllowEditing((bool)ViewData["CK_UI_subcontractors_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.project_description).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_project_description_ru"])).Visible((bool)ViewData["CK_UI_project_description"]).Width((int)ViewData["CK_UI_project_description_width"]).VisibleIndex((int)ViewData["CK_UI_project_description_pos"]).AllowEditing((bool)ViewData["CK_UI_project_description_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.project_type_id).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_project_type_id_ru"])).Visible((bool)ViewData["CK_UI_project_type_id"]).Width((int)ViewData["CK_UI_project_type_id_width"]).VisibleIndex((int)ViewData["CK_UI_project_type_id_pos"]).AllowEditing((bool)ViewData["CK_UI_project_type_id_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.project_state_id).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_project_state_id_ru"])).Visible((bool)ViewData["CK_UI_project_state_id"]).Width((int)ViewData["CK_UI_project_state_id_width"]).VisibleIndex((int)ViewData["CK_UI_code_pos"]).AllowEditing((bool)ViewData["CK_UI_code_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.package_curator_id).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_package_curator_id_ru"])).Visible((bool)ViewData["CK_UI_package_curator_id"]).Width((int)ViewData["CK_UI_package_curator_id_width"]).VisibleIndex((int)ViewData["CK_UI_package_curator_id_pos"]).AllowEditing((bool)ViewData["CK_UI_package_curator_id_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.supply_curator_id).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_supply_curator_id_ru"])).Visible((bool)ViewData["CK_UI_supply_curator_id"]).Width((int)ViewData["CK_UI_supply_curator_id_width"]).VisibleIndex((int)ViewData["CK_UI_supply_curator_id_pos"]).AllowEditing((bool)ViewData["CK_UI_supply_curator_id_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.project_curator_id).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_project_curator_id_ru"])).Visible((bool)ViewData["CK_UI_project_curator_id"]).Width((int)ViewData["CK_UI_project_curator_id_width"]).VisibleIndex((int)ViewData["CK_UI_project_curator_id_pos"]).AllowEditing((bool)ViewData["CK_UI_project_curator_id_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.stocks_curator_id).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_stocks_curator_id_ru"])).Visible((bool)ViewData["CK_UI_stocks_curator_id"]).Width((int)ViewData["CK_UI_stocks_curator_id_width"]).VisibleIndex((int)ViewData["CK_UI_stocks_curator_id_pos"]).AllowEditing((bool)ViewData["CK_UI_stocks_curator_id_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.rss_match_type_id).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_rss_match_type_id_ru"])).Visible((bool)ViewData["CK_UI_rss_match_type_id"]).Width((int)ViewData["CK_UI_rss_match_type_id_width"]).VisibleIndex((int)ViewData["CK_UI_rss_match_type_id_pos"]).AllowEditing((bool)ViewData["CK_UI_rss_match_type_id_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.customer_id).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_customer_id_ru"])).Visible((bool)ViewData["CK_UI_customer_id"]).Width((int)ViewData["CK_UI_customer_id_width"]).VisibleIndex((int)ViewData["CK_UI_customer_id_pos"]).AllowEditing((bool)ViewData["CK_UI_customer_id_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.customer).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_customer_ru"])).Visible((bool)ViewData["CK_UI_customer"]).Width((int)ViewData["CK_UI_customer_width"]).VisibleIndex((int)ViewData["CK_UI_customer_pos"]).AllowEditing((bool)ViewData["CK_UI_customer_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.designer_id).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_designer_id_ru"])).Visible((bool)ViewData["CK_UI_designer_id"]).Width((int)ViewData["CK_UI_designer_id_width"]).VisibleIndex((int)ViewData["CK_UI_designer_id_pos"]).AllowEditing((bool)ViewData["CK_UI_designer_id_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.designer).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_designer_ru"])).Visible((bool)ViewData["CK_UI_designer"]).Width((int)ViewData["CK_UI_designer_width"]).VisibleIndex((int)ViewData["CK_UI_designer_pos"]).AllowEditing((bool)ViewData["CK_UI_designer_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.start).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_start_ru"])).Visible((bool)ViewData["CK_UI_start"]).Width((int)ViewData["CK_UI_start_width"]).VisibleIndex((int)ViewData["CK_UI_start_pos"]).AllowEditing((bool)ViewData["CK_UI_start_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.finish).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_finish_ru"])).Visible((bool)ViewData["CK_UI_finish"]).Width((int)ViewData["CK_UI_finish_width"]).VisibleIndex((int)ViewData["CK_UI_finish_pos"]).AllowEditing((bool)ViewData["CK_UI_finish_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.year1).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_year1_ru"])).Visible((bool)ViewData["CK_UI_year1"]).Width((int)ViewData["CK_UI_year1_width"]).VisibleIndex((int)ViewData["CK_UI_year1_pos"]).AllowEditing((bool)ViewData["CK_UI_year1_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.year2).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_year2_ru"])).Visible((bool)ViewData["CK_UI_year2"]).Width((int)ViewData["CK_UI_year2_width"]).VisibleIndex((int)ViewData["CK_UI_year2_pos"]).AllowEditing((bool)ViewData["CK_UI_year2_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.finish_date).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_finish_date_ru"])).Visible((bool)ViewData["CK_UI_finish_date"]).Width((int)ViewData["CK_UI_finish_date_width"]).VisibleIndex((int)ViewData["CK_UI_finish_date_pos"]).AllowEditing((bool)ViewData["CK_UI_finish_date_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.build_curator_id).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_build_curator_id_ru"])).Visible((bool)ViewData["CK_UI_build_curator_id"]).Width((int)ViewData["CK_UI_build_curator_id_width"]).VisibleIndex((int)ViewData["CK_UI_build_curator_id_pos"]).AllowEditing((bool)ViewData["CK_UI_build_curator_id_edit"]).EncodeHtml(false);
                                columns.AddFor(m => m.build_curator).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_build_curator_ru"])).Visible((bool)ViewData["CK_UI_build_curator"]).Width((int)ViewData["CK_UI_build_curator_width"]).VisibleIndex((int)ViewData["CK_UI_build_curator_pos"]).AllowEditing((bool)ViewData["CK_UI_build_curator_edit"]).EncodeHtml(false);

                            })
                                                                                                .Paging(p => p.PageSize(30))
                                                                                                .Pager(pager =>
                                                                                                {
                                                                                                    pager.ShowPageSizeSelector(true);
                                                                                                    pager.AllowedPageSizes(new List<int> { 5, 10, 20, 30, 50 });
                                                                                                    pager.AllowedPageSizes(new List<int> { 5, 10, 20, 30, 50 });
                                                                                                    pager.ShowInfo(true);
                                                                                                    pager.ShowNavigationButtons(true);
                                                                                                    pager.Visible(true);
                                                                                                })

                                                                                                .FilterRow(f => f.Visible(true).ApplyFilter(GridApplyFilterMode.Auto))
                                                                                                .HeaderFilter(f => f.Visible(true))
                                                                                                .RemoteOperations(true)
                                                                                                .ShowRowLines(true)
                                                                                                .ColumnAutoWidth(true)
                                                                                                .FilterSyncEnabled(true)
                                                                                                .Height(new JS("function() { return window.innerHeight-$('div.myheader').height();}"))
                                                                                                .Width("100%")
                                                                                                .LoadPanel(load => load.IndicatorSrc("/../../img/orig.gif").ShowIndicator(true).Height(200).Width(200))
                                                                                                //.Summary(s => s
                                                                                                //    .TotalItems(totalItems =>
                                                                                                //    {
                                                                                                //        totalItems.AddFor(m => m.id).SummaryType(SummaryType.Count);
                                                                                                //    })
                                                                                                //    .GroupItems(groupItems =>
                                                                                                //    {
                                                                                                //        groupItems.Add().SummaryType(SummaryType.Count);
                                                                                                //    })
                                                                                                //)                                                                                                
                                                                                                .Sorting(s => s.Mode(GridSortingMode.Multiple))
                                                                                                .AllowColumnResizing(true)
                                                                                                .AllowColumnReordering(true)
                                                                                                .Option("columnResizingMode", ColumnResizingMode.Widget)
                                                                                                .WordWrapEnabled(true)
                                                                                                .OnToolbarPreparing("onToolbarPreparing")
                                                                                                .OnContentReady("contentReady")
                                                                                                .OnRowClick("onRowClick")
                                                                                                .Scrolling(scrolling => scrolling.UseNative(true).ShowScrollbar(DevExtreme.AspNet.Mvc.ShowScrollbarMode.Always)))
<script>
    rebind_obj.rebindPrjLogNet = true;

    function validFunc(e) {
        return true;
    }

    //partPrjLogNet


    //function AddPrjLogNet() {
    //    // var dataGrid = $("#Grid").dxDataGrid("instance");
    //    // var selectedData = dataGrid.getSelectedRowsData();
    //    //$("#GridCard").load('/Common/GridCardPartialUpdate?param_id=' + selectedData[0]['id'] +
    //    //    '&selectProc=APL_SELECT_PROJECT_LIST_INFO2&flowWindowName=GridCard&flowWindowRussianName=Карточка&gridId=Grid&binding=false' +
    //    //    '&close_Window=false&updateProc=APL_UPDATE_PROJECT2&id_func=' + selectedData[0]['id']);
    //    //OpenCard(true, "GridCard", "Grid", "paramFunc");
    //    $.ajax({
    //        async: true,
    //        cache: false,
    //        url: "/Common/GridCardPartialUpdate",
    //        type: "Get",
    //        data: {
    //            param_id: null,
    //            selectProc: "APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTS",
    //            flowWindowName: "GridCard",
    //            flowWindowRussianName: "Пункты маршрутов",
    //            gridId: "GridPrjLogNet",
    //            binding: true,
    //            close_Window: false,
    //            updateProc: "APL_UPDATE_PROJECT_LOGISTICAL_NETWORK_OBJECT2",
    //            id_func: "without_id",
    //            additionalParams: null              
                
    //        },
    //        success: function (partialViewResult) {
    //            $("#partPrjLogNet").html(partialViewResult);
    //            OpenCard(false, "GridPrjLogNetCard", "GridPrjLogNet", null);
    //        }
    //    });
    //}

    //function UpdatePrjLogNet() {
    //    var dataGrid = $("#Grid").dxDataGrid("instance");
    //    var selectedData = dataGrid.getSelectedRowsData();
    //    var selectedKeys = dataGrid.getSelectedRowKeys();
    //    if (selectedKeys.length == 0)
    //        return alert("Выберите строку!");
    //    //$("#GridCard").load('/Common/GridCardPartialUpdate?param_id=' + selectedData[0]['id'] +
    //    //    '&selectProc=APL_SELECT_PROJECT_LIST_INFO2&flowWindowName=GridCard&flowWindowRussianName=Карточка&gridId=Grid&binding=false' +
    //    //    '&close_Window=false&updateProc=APL_UPDATE_PROJECT2&id_func=' + selectedData[0]['id']);
    //    $.ajax({
    //        async: true,
    //        cache: false,
    //        url: "/Common/GridCardPartialUpdate",
    //        type: "Get",
    //        data: {
    //            param_id: selectedData[0]['id'],
    //            selectProc: "APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTS",
    //            flowWindowName: "GridCard",
    //            flowWindowRussianName: "Пункты маршрутов",
    //            gridId: "Grid",
    //            binding: true,
    //            close_Window: true,
    //            updateProc: "APL_UPDATE_PROJECT_LOGISTICAL_NETWORK_OBJECT2",
    //            id_func: "find_row_idPrjLogNet",
    //            additionalParams: null  
    //        },
    //        success: function (partialViewResult) {
    //            $("#partPrjLogNet").html(partialViewResult);
    //            OpenCard(true, "GridPrjLogNetCard", "GridPrjLogNet", null);
    //        }
    //    });
    //}
    function onBeforeSendPrjLogNet(method, ajaxOptions) {
        if (method === "update" || method==="add") {
            rebind_obj.rebindPrjLogNet = true;
            var obj = {
                showSelected: null,
                selectedRecord: null,
                rebind: rebind_obj.rebindPrjLogNet,
                storedProcedureSelect: "APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTS",
                storedProcedureInsert: "APL_UPDATE_PROJECT_LOGISTICAL_NETWORK_OBJECT2",
                controller: controller
            };           
            ajaxOptions.data.additionalParams = JSON.stringify(obj);
        }
    }

    function ShowRoads() {
        var dataGrid = $("#Grid").dxDataGrid("instance");
        var selectedKeys = dataGrid.getSelectedRowKeys();
        if (selectedKeys.length == 0)
            return alert("Выберите строку!");
        var selectedData = dataGrid.getSelectedRowsData();
        rebind_obj.rebindPrjLogNet = true;
        Reloading("GridPrjLogNet");
        rebind_obj.rebindPrjLogNet = false;
        $('#roads').modal('show');
    }
    $(function () {
        var str = '@ViewBag.RoleAddUpdate'.toLowerCase();
        if (str === 'true') {
            //$('#AddItem').show();
            $('#AddItem').show(); }
        else { 
            //$('#AddItem').hide();
            $('#AddItem').hide();
        }
    });

    function contentReadyPrjLogNet(e) {
        rebind_obj.rebindPrjLogNet = false;
    }
    function AddPrjLogNet() { 
        var dataGrid = $("#GridPrjLogNet").dxDataGrid("instance");
        dataGrid.addRow();
        var selectedData = dataGrid.getRowElement(0); 
        selectedData.values["id"] = 0;
        selectedData.values["lno_id"] = 0;
        selectedData.values["lno_description"] = "бред";
        
        //selectedData[0]["id"] = 0;


    }

    function ReturnDataPrjLogNet(controller) {
        var dataGrid = $("#Grid").dxDataGrid("instance");
        var selectedKeys = dataGrid.getSelectedRowKeys();
        var id = null;
        if (selectedKeys.length != 0) {
            var selectedData = dataGrid.getSelectedRowsData();
            id = selectedData[0]["id"];
        }        
        var obj = {
            showSelected: null,
            selectedRecord: null,
            rebind: rebind_obj.rebind,
            storedProcedure: "APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTS",
            controller: controller,
            hide_closed: $('#hide_closed').prop("checked"),
            id: id
        };
        return JSON.stringify(obj);
    }

    function PrjLogNetReloadGrid() {
        var dataGrid = $("#GridPrjLogNet").dxDataGrid("instance");
        rebind_obj.rebindPrjLogNet = true;
        Reloading("GridPrjLogNet");
        rebind_obj.rebindPrjLogNet = false;
    }

    function onToolbarPreparingPrjLogNet(e) {
        var dataGrid = e.component;
        e.toolbarOptions.items.unshift({
            location: "after",
            template: $(
                //    "<button title='Показать выбранные' class='btn btn_in_grid dx-button btn_pad_grid' onclick='" + showSelected.function + "' id='" + showSelected.id + "'><img src='/../../img/GridBtn/1-7.png' style='height:18px; width:auto;' alt='Показать выбранные'></img></button>" +
                //"<button title='Редактировать' class='btn btn_in_grid dx-button btn_pad_grid' onclick='UpdatePrjLogNet();' id='UpdatePrjLogNet'><img src='/../../img/GridBtn/1-2.png' style='height:18px; width:auto;' alt='Редактировать'></img></button>" +
                "<button title='Добавить' class='btn btn_in_grid dx-button btn_pad_grid' onclick='AddPrjLogNet();' id='AddPrjLogNet'><img src='/../../img/GridBtn/1-1.png' style='height:18px; width:auto;' alt='Добавить'></img></button>" +
                "<button class='btn btn_in_grid dx-button btn_pad_grid' title='Искать' onclick='PrjLogNetReloadGrid();' id='PrjLogNetReloadGrid'><img src='/../../img/GridBtn/1-5.png' style='height:18px; width:auto;' alt='Искать' ></img></button>" +
                "<button title='Очистить фильтры' onclick='ClearFilters(\"GridPrjLogNet\");' class='btn btn_in_grid dx-button btn_pad_grid' id='ClearFilters'><img src='/../../img/GridBtn/1-9.png' style='height:18px; width:auto;'  alt='Очистить фильтры'></img></button>"
                //"<button title='Расширенный поиск'  class= 'btn btn_in_grid dx-button btn_pad_grid' data-toggle='modal' onclick='" + fullSearch.function + "' id='" + fullSearch.id + "' ><img src='/../../img/GridBtn/1-10.png' style='height:18px; width:auto;' alt='Расширенный поиск'></img></button>" +
                //"<button title='Выгрузить Excel' class='btn btn_in_grid dx-button btn_pad_grid' onclick='" + excel.name + "();' id='" + excel.id + "'><img src='/../../img/GridBtn/1-4.png' style='height:18px; width:auto;' alt='Выгрузить Excel'></img></button>" +
                //"<button title='Настройки' class= 'btn btn_in_grid dx-button btn_pad_grid' data-toggle='modal' data-target='#" + settings.name + "' id='" + settings.id + "' ><img src='/../../img/GridBtn/1-6.png' style='height:18px; width:auto;' alt='Настройки'></img></button>"
                )
        });
    }
    var rebind_obj = new Object();
    rebind_obj.rebind = true;

</script>
