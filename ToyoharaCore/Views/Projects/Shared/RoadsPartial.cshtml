@using ToyoharaCore.Models
@using ToyoharaCore.Models.CustomModel
@{
    string control = ViewContext.RouteData.Values["Controller"].ToString();
}


@Html.Partial("Settings", (ToyoharaCore.Models.CustomModel.Settings)ViewBag.Settings3)
<div id="ObjectLogRoads"></div>

<div id="roads" class="modal fade" tabindex="-1" role="dialog" style="z-index:10000;" data-backdrop="static">
    <div class="modal-dialog" style="width: 60%;" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title">Пункты маршрутов</h4>
            </div>
            <div class="modal-body">

                @(Html.DevExtreme().DataGrid<APL_SELECT_PROJECT_LOGISTICAL_NETWORK_OBJECTSResult>()
                                                            .ID("GridPrjLogNet")
                                                            .ShowBorders(true)
                                                            .DataSource(d => d.Mvc()
                                                                .LoadAction("GetData")
                                                                .Controller("Common")
                                                                .Key("id")
                                                                .LoadParams(new {additionalParams = new JS("function(){return ReturnDataPrjLogNet('" + control + "');}")})
                                                                .UpdateAction("PutData")
                                                                .InsertAction("PostData")
                                                                .OnBeforeSend("onBeforeSendPrjLogNet")
                                                                )
                                                            .Editing(editing =>{
                                                                editing.Mode(GridEditMode.Batch);
                                                                editing.AllowUpdating((bool)ViewBag.saveBtnVisible);
                                                                })
                                                            //.Selection(s => s.Mode(SelectionMode.Multiple).ShowCheckBoxesMode(DevExtreme.AspNet.Mvc.GridSelectionShowCheckBoxesMode.Always).AllowSelectAll(true))
                                                            .Selection(s => s.Mode(SelectionMode.Multiple).AllowSelectAll(true))
                                                            .Columns(columns =>{
                                                                columns.AddFor(m => m.id).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_id_grid_settings3_ru"])).Visible((bool)ViewData["CK_UI_id_grid_settings3"]).Width((int)ViewData["CK_UI_id_grid_settings3_width"]).VisibleIndex((int)ViewData["CK_UI_id_grid_settings3_pos"]).AllowEditing((bool)ViewData["CK_UI_id_grid_settings3_edit"]);
                                                                columns.AddFor(m => m.lno_id).Lookup(lookup => lookup
                                                                                .DataSource(new JS(ViewBag.LnoDropdown))
                                                                                .DisplayExpr("description")
                                                                                .ValueExpr("id")).CssClass("zindex")
                                                                                .HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_lno_id_grid_settings3_ru"])).Visible((bool)ViewData["CK_UI_lno_id_grid_settings3"]).Width((int)ViewData["CK_UI_lno_id_grid_settings3_width"]).VisibleIndex((int)ViewData["CK_UI_lno_id_grid_settings3_pos"]).AllowEditing((bool)ViewData["CK_UI_lno_id_grid_settings3_edit"]).CssClass("zindex");
                                                                columns.AddFor(m => m.lno_description).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_lno_description_grid_settings3_ru"])).Visible((bool)ViewData["CK_UI_lno_description_grid_settings3"]).Width((int)ViewData["CK_UI_lno_description_grid_settings3_width"]).VisibleIndex((int)ViewData["CK_UI_lno_description_grid_settings3_pos"]).AllowEditing((bool)ViewData["CK_UI_lno_description_grid_settings3_edit"]);
                                                                columns.AddFor(m => m.start).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_start_grid_settings3_ru"])).Visible((bool)ViewData["CK_UI_start_grid_settings3"]).Width((int)ViewData["CK_UI_start_grid_settings3_width"]).VisibleIndex((int)ViewData["CK_UI_start_grid_settings3_pos"]).AllowEditing((bool)ViewData["CK_UI_start_grid_settings3_edit"]);
                                                                columns.AddFor(m => m.finish).HeaderCellTemplate(Convert.ToString(ViewData["CK_UI_finish_grid_settings3_ru"])).Visible((bool)ViewData["CK_UI_finish_grid_settings3"]).Width((int)ViewData["CK_UI_finish_grid_settings3_width"]).VisibleIndex((int)ViewData["CK_UI_finish_grid_settings3_pos"]).AllowEditing((bool)ViewData["CK_UI_finish_grid_settings3_edit"]);
                                                                })
                                                            .FilterRow(f => f.Visible(true).ApplyFilter(GridApplyFilterMode.Auto))
                                                            .HeaderFilter(f => f.Visible(true))
                                                            .RemoteOperations(true)
                                                            .ShowRowLines(true)
                                                            .ColumnAutoWidth(true)
                                                            .FilterSyncEnabled(true)
                                                            .Width("100%")
                                                            .LoadPanel(load => load.IndicatorSrc("/../../img/orig.gif").ShowIndicator(true).Height(200).Width(200))
                                                            .Sorting(s => s.Mode(GridSortingMode.Multiple))
                                                            .AllowColumnResizing(true)
                                                            .ColumnAutoWidth(false)
                                                            .AllowColumnReordering(true)
                                                            .Option("columnResizingMode", ColumnResizingMode.Widget)
                                                            .WordWrapEnabled(true)
                                                            .OnToolbarPreparing("onToolbarPreparingPrjLogNet")
                                                            .OnContentReady("contentReadyPrjLogNet")
                                                            .OnInitNewRow("onInitNewRow")
                                                            //.OnRowInserted("onRowInsertedPrjLogNet")
                                                            //.OnRowClick("onRowClickRoads")
                                                            .Scrolling(scrolling => scrolling.UseNative(true).ShowScrollbar(DevExtreme.AspNet.Mvc.ShowScrollbarMode.Always))
                )

            </div>
        </div>
    </div>
</div>
<script>
    function onToolbarPreparingPrjLogNet(e) {
        var dataGrid = e.component;
        e.toolbarOptions.items.unshift({
            location: "after",
            template: $(
                //    "<button title='Показать выбранные' class='btn btn_in_grid dx-button btn_pad_grid' onclick='" + showSelected.function + "' id='" + showSelected.id + "'><img src='/../../img/GridBtn/1-7.png' style='height:18px; width:auto;' alt='Показать выбранные'></img></button>" +
                // "<button title='Редактировать' class='btn btn_in_grid dx-button btn_pad_grid' onclick='UpdatePrjLogNet();' id='UpdatePrjLogNet'><img src='/../../img/GridBtn/1-2.png' style='height:18px; width:auto;' alt='Редактировать'></img></button>" +
                "<button title='Добавить' class='btn btn_in_grid dx-button btn_pad_grid' onclick='AddPrjLogNet();' id='AddPrjLogNet'><img src='/../../img/GridBtn/1-1.png' style='height:18px; width:auto;' alt='Добавить'></img></button>" +
                "<button title='Удалить' class='btn btn_in_grid dx-button btn_pad_grid' onclick='DeleteProjectLNO();' id='DeleteProjectLNO'><img src='/../../img/GridBtn/1-3.png' width='18 height='18' alt='Удалить' /></button>" +
                "<button class='btn btn_in_grid dx-button btn_pad_grid' title='Обновить' onclick='PrjLogNetReloadGrid();' id='PrjLogNetReloadGrid'><img src='/../../img/GridBtn/1-5.png' style='height:18px; width:auto;' alt='Искать' ></img></button>" +
                "<button title='Очистить фильтры' onclick='ClearFilters(\"GridPrjLogNet\");' class='btn btn_in_grid dx-button btn_pad_grid' id='ClearFilters'><img src='/../../img/GridBtn/1-9.png' style='height:18px; width:auto;'  alt='Очистить фильтры'></img></button>"+
                //"<button title='Расширенный поиск'  class= 'btn btn_in_grid dx-button btn_pad_grid' data-toggle='modal' onclick='" + fullSearch.function + "' id='" + fullSearch.id + "' ><img src='/../../img/GridBtn/1-10.png' style='height:18px; width:auto;' alt='Расширенный поиск'></img></button>" +
                //"<button title='Выгрузить Excel' class='btn btn_in_grid dx-button btn_pad_grid' onclick='" + excel.name + "();' id='" + excel.id + "'><img src='/../../img/GridBtn/1-4.png' style='height:18px; width:auto;' alt='Выгрузить Excel'></img></button>" +
                "<button title='Настройки' class= 'btn btn_in_grid dx-button btn_pad_grid' data-toggle='modal' data-target='#UserSettings3' id='UserSettings3' ><img src='/../../img/GridBtn/1-6.png' style='height:18px; width:auto;' alt='Настройки'></img></button>"+
                "<button title='История изменения' class='btn btn_in_grid dx-button btn_pad_grid' onclick='ObjectLogRoads()' id='ObjectLogRoads'><img src='/../../img/GridBtn/1-12.png' style='height:18px; width:auto;' alt='Групповое обновление'></img></button>"
            )
        });
    }


    $(function () {
       // alert('1');
        var str2 = '@ViewBag.saveBtnVisible'.toLowerCase();
        if (str2 === 'true') {
           // $('#UpdatePrjLogNet').show();
            $('#AddPrjLogNet').show();
        }
        else {
           // $('#UpdatePrjLogNet').hide();
            $('#AddPrjLogNet').hide();
        }

        if ('@ViewBag.DeleteProjectLNO'.toLowerCase() === 'true') $('#DeleteProjectLNO').show(); else $('#DeleteProjectLNO').hide();



    });



    function ObjectLogRoads() {
        var dataGrid = $("#GridPrjLogNet").dxDataGrid("instance");
        var selectedKeys = dataGrid.getSelectedRowKeys();
        if (selectedKeys.length == 0) { alert('Вы не выбрали ни одной строки'); }
        if (selectedKeys.length > 1) { alert('Вы выбрали больше одной строки. Для просмотра истории нужно выбрать только одну строку'); }
        if (selectedKeys.length == 1) {
            var selectedData = dataGrid.getSelectedRowsData();
            $.ajax({
                async: true,
                cache: false,
                url: "/Common/ObjectLog",
                type: "Get",
                data: {
                    object_type: 'project_logistical_network_object',
                    object_id: dataGrid.cellValue(dataGrid.getRowIndexByKey(selectedKeys[0]), "id"),
                    openParsialDivFunction: 'ObjectLogRoads'
                },
                success: function (partialViewResult) {
                    $("#ObjectLogRoads").html(partialViewResult);
                    $('#ObjLog').modal('show');
                }
            });
        }
    }


</script>